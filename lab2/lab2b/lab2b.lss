
lab2b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000188  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000188  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  00000210  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003b9  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001c7  00000000  00000000  00000609  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000013b  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000038  00000000  00000000  0000090c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001a9  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001f0  00000000  00000000  00000aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00000cdd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 c2 00 	jmp	0x184	; 0x184 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
/*********************************************
	Main Function
**********************************************/

int main(int argc, char const *argv[])
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	29 97       	sbiw	r28, 0x09	; 9
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
	//set D2-D7 as output pins
	DDRD |= ((1 << PD2)| (1 << PD3) | (1 << PD4 ) | ( 1 << PD5 ) | ( 1 << PD6 ) | ( 1 << PD7 )); 
  94:	8a b1       	in	r24, 0x0a	; 10
  96:	8c 6f       	ori	r24, 0xFC	; 252
  98:	8a b9       	out	0x0a, r24	; 10
	//set B0 and B1 as output pins
	DDRB |= ((1 << PB0) | (1 << PB1));
  9a:	84 b1       	in	r24, 0x04	; 4
  9c:	83 60       	ori	r24, 0x03	; 3
  9e:	84 b9       	out	0x04, r24	; 4

	//set B2 and B3 as input pins 
	DDRB &=~((1 << PB2) | (1 << PB3));
  a0:	84 b1       	in	r24, 0x04	; 4
  a2:	83 7f       	andi	r24, 0xF3	; 243
  a4:	84 b9       	out	0x04, r24	; 4
	//set up pull-up resistors
	PORTB |=((1 << PB2) | (1 << PB3));
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	8c 60       	ori	r24, 0x0C	; 12
  aa:	85 b9       	out	0x05, r24	; 5

	uint8_t bits[8];
	uint8_t count = MIN;
	volatile uint8_t input;
	int change = NONE;
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
	DDRB &=~((1 << PB2) | (1 << PB3));
	//set up pull-up resistors
	PORTB |=((1 << PB2) | (1 << PB3));

	uint8_t bits[8];
	uint8_t count = MIN;
  b0:	60 e0       	ldi	r22, 0x00	; 0
}

static void update_leds(uint8_t bits[]){

	PORTD = 0b00000000;
	PORTB = 0b00001100; //need to ensure that pull-up resistors are always set.
  b2:	7c e0       	ldi	r23, 0x0C	; 12
	volatile uint8_t input;
	int change = NONE;

	while(1){

		_NOP();
  b4:	00 00       	nop
		input = PINB;
  b6:	23 b1       	in	r18, 0x03	; 3
  b8:	29 87       	std	Y+9, r18	; 0x09

		if( ((input >> 3) & 0b00000001) == 0 ){ //press S2
  ba:	29 85       	ldd	r18, Y+9	; 0x09
  bc:	23 fd       	sbrc	r18, 3
  be:	03 c0       	rjmp	.+6      	; 0xc6 <main+0x46>

			change = SUBTRACT;
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	f7 cf       	rjmp	.-18     	; 0xb4 <main+0x34>
		}
		else if( ((input >> 2) & 0b00000001) == 0 ){ //press S1
  c6:	29 85       	ldd	r18, Y+9	; 0x09
  c8:	22 fd       	sbrc	r18, 2
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <main+0x52>

			change = ADD;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	f1 cf       	rjmp	.-30     	; 0xb4 <main+0x34>
	Local Function Definition
**********************************************/

static uint8_t update_counter(uint8_t counter, int change){

	if( change == ADD ){
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	91 05       	cpc	r25, r1
  d6:	11 f4       	brne	.+4      	; 0xdc <main+0x5c>

		return (counter + 1);
  d8:	6f 5f       	subi	r22, 0xFF	; 255
  da:	03 c0       	rjmp	.+6      	; 0xe2 <main+0x62>
	}
	else if( change == SUBTRACT ){
  dc:	02 97       	sbiw	r24, 0x02	; 2
  de:	09 f4       	brne	.+2      	; 0xe2 <main+0x62>
		return (counter - 1);
  e0:	61 50       	subi	r22, 0x01	; 1

static void convert_to_binary(uint8_t bits[], uint8_t number){

	int c,k;

	for (c = 7; c >= 0; c--){
  e2:	87 e0       	ldi	r24, 0x07	; 7
  e4:	90 e0       	ldi	r25, 0x00	; 0
    	k = number >> c;
  e6:	46 2f       	mov	r20, r22
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	e1 e0       	ldi	r30, 0x01	; 1
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	ec 0f       	add	r30, r28
  f0:	fd 1f       	adc	r31, r29
  f2:	e8 0f       	add	r30, r24
  f4:	f9 1f       	adc	r31, r25
  f6:	9a 01       	movw	r18, r20
  f8:	08 2e       	mov	r0, r24
  fa:	02 c0       	rjmp	.+4      	; 0x100 <main+0x80>
  fc:	35 95       	asr	r19
  fe:	27 95       	ror	r18
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <main+0x7c>
    	bits[c] = (k & 1) ? 1 : 0;
 104:	21 70       	andi	r18, 0x01	; 1
 106:	33 27       	eor	r19, r19
 108:	20 83       	st	Z, r18

static void convert_to_binary(uint8_t bits[], uint8_t number){

	int c,k;

	for (c = 7; c >= 0; c--){
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	70 f7       	brcc	.-36     	; 0xea <main+0x6a>
		return counter;
}

static void update_leds(uint8_t bits[]){

	PORTD = 0b00000000;
 10e:	1b b8       	out	0x0b, r1	; 11
	PORTB = 0b00001100; //need to ensure that pull-up resistors are always set.
 110:	75 b9       	out	0x05, r23	; 5
 112:	8a e0       	ldi	r24, 0x0A	; 10
 114:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	35 e0       	ldi	r19, 0x05	; 5
 118:	3a 95       	dec	r19
 11a:	f1 f7       	brne	.-4      	; 0x118 <main+0x98>
 11c:	00 00       	nop
 11e:	01 97       	sbiw	r24, 0x01	; 1
}

static void delay_us (uint16_t us) {
	uint16_t i;
	
	for (i = 0; i < us; i++)
 120:	00 97       	sbiw	r24, 0x00	; 0
 122:	c9 f7       	brne	.-14     	; 0x116 <main+0x96>

	PORTD = 0b00000000;
	PORTB = 0b00001100; //need to ensure that pull-up resistors are always set.
	
	delay_us(10);
	PORTD |= ((bits[0] << PD2) | (bits[1] << PD3) | (bits[2] << PD4) | (bits[3] << PD5) | (bits[4] << PD6) | (bits[5] << PD7));
 124:	4b b1       	in	r20, 0x0b	; 11
 126:	29 81       	ldd	r18, Y+1	; 0x01
 128:	54 e0       	ldi	r21, 0x04	; 4
 12a:	25 9f       	mul	r18, r21
 12c:	90 01       	movw	r18, r0
 12e:	11 24       	eor	r1, r1
 130:	8a 81       	ldd	r24, Y+2	; 0x02
 132:	58 e0       	ldi	r21, 0x08	; 8
 134:	85 9f       	mul	r24, r21
 136:	c0 01       	movw	r24, r0
 138:	11 24       	eor	r1, r1
 13a:	28 2b       	or	r18, r24
 13c:	24 2b       	or	r18, r20
 13e:	8b 81       	ldd	r24, Y+3	; 0x03
 140:	30 e1       	ldi	r19, 0x10	; 16
 142:	83 9f       	mul	r24, r19
 144:	c0 01       	movw	r24, r0
 146:	11 24       	eor	r1, r1
 148:	28 2b       	or	r18, r24
 14a:	8c 81       	ldd	r24, Y+4	; 0x04
 14c:	50 e2       	ldi	r21, 0x20	; 32
 14e:	85 9f       	mul	r24, r21
 150:	c0 01       	movw	r24, r0
 152:	11 24       	eor	r1, r1
 154:	28 2b       	or	r18, r24
 156:	8d 81       	ldd	r24, Y+5	; 0x05
 158:	30 e4       	ldi	r19, 0x40	; 64
 15a:	83 9f       	mul	r24, r19
 15c:	c0 01       	movw	r24, r0
 15e:	11 24       	eor	r1, r1
 160:	28 2b       	or	r18, r24
 162:	8e 81       	ldd	r24, Y+6	; 0x06
 164:	50 e8       	ldi	r21, 0x80	; 128
 166:	85 9f       	mul	r24, r21
 168:	c0 01       	movw	r24, r0
 16a:	11 24       	eor	r1, r1
 16c:	28 2b       	or	r18, r24
 16e:	2b b9       	out	0x0b, r18	; 11
	PORTB |= ((bits[6] << PB0) | (bits[7] << PB1));
 170:	95 b1       	in	r25, 0x05	; 5
 172:	8f 81       	ldd	r24, Y+7	; 0x07
 174:	98 2b       	or	r25, r24
 176:	88 85       	ldd	r24, Y+8	; 0x08
 178:	88 0f       	add	r24, r24
 17a:	89 2b       	or	r24, r25
 17c:	85 b9       	out	0x05, r24	; 5

			change = ADD;
		}
		else{
			count = update_counter(count, change);
			change = NONE;
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	98 cf       	rjmp	.-208    	; 0xb4 <main+0x34>

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
