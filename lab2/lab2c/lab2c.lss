
lab2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000190  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  00000218  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000383  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000018c  00000000  00000000  000005db  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000142  00000000  00000000  00000767  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000038  00000000  00000000  000008ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000177  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000120  00000000  00000000  00000a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00000b7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
/*********************************************
	Main Function
**********************************************/

int main(int argc, char const *argv[])
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	29 97       	sbiw	r28, 0x09	; 9
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
	//set D2-D7 as output pins
	DDRD |= ((1 << PD2)| (1 << PD3) | (1 << PD4 ) | ( 1 << PD5 ) | ( 1 << PD6 ) | ( 1 << PD7 )); 
  94:	8a b1       	in	r24, 0x0a	; 10
  96:	8c 6f       	ori	r24, 0xFC	; 252
  98:	8a b9       	out	0x0a, r24	; 10
	//set B0 and B1 as output pins
	DDRB |= ((1 << PB0) | (1 << PB1));
  9a:	84 b1       	in	r24, 0x04	; 4
  9c:	83 60       	ori	r24, 0x03	; 3
  9e:	84 b9       	out	0x04, r24	; 4

	//set B2 and B3 as input pins 
	DDRB &=~((1 << PB2) | (1 << PB3) | (1 << PB4));
  a0:	84 b1       	in	r24, 0x04	; 4
  a2:	83 7e       	andi	r24, 0xE3	; 227
  a4:	84 b9       	out	0x04, r24	; 4
	//set up pull-up resistors
	PORTB |=((1 << PB2) | (1 << PB3) | (1 << PB4));
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	8c 61       	ori	r24, 0x1C	; 28
  aa:	85 b9       	out	0x05, r24	; 5

	uint8_t bits[] = {0,0,0,0,0,0,0,0};
  ac:	fe 01       	movw	r30, r28
  ae:	31 96       	adiw	r30, 0x01	; 1
  b0:	88 e0       	ldi	r24, 0x08	; 8
  b2:	df 01       	movw	r26, r30
  b4:	1d 92       	st	X+, r1
  b6:	8a 95       	dec	r24
  b8:	e9 f7       	brne	.-6      	; 0xb4 <main+0x34>
  ba:	41 e0       	ldi	r20, 0x01	; 1
}

static void update_leds(uint8_t bits[]){

	PORTD = 0b00000000;
	PORTB = 0b00011100; //need to ensure that pull-up resistors are always set.
  bc:	5c e1       	ldi	r21, 0x1C	; 28
	volatile uint8_t input;
	int sum = 0;

	while(1){

		_NOP();
  be:	00 00       	nop
		input = PINB;
  c0:	83 b1       	in	r24, 0x03	; 3
  c2:	89 87       	std	Y+9, r24	; 0x09

		sum += ((input >> 4) & 0b00000001) ? 0 : 1; //press S1
  c4:	29 85       	ldd	r18, Y+9	; 0x09
  c6:	22 95       	swap	r18
  c8:	21 70       	andi	r18, 0x01	; 1
  ca:	24 27       	eor	r18, r20
  cc:	30 e0       	ldi	r19, 0x00	; 0
		sum += ((input >> 3) & 0b00000001) ? 0 : 2; //press S2
  ce:	89 85       	ldd	r24, Y+9	; 0x09
  d0:	83 ff       	sbrs	r24, 3
  d2:	03 c0       	rjmp	.+6      	; 0xda <main+0x5a>
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <main+0x5e>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	28 0f       	add	r18, r24
  e0:	39 1f       	adc	r19, r25
		sum += ((input >> 2) & 0b00000001) ? 0 : 4; //press S3
  e2:	89 85       	ldd	r24, Y+9	; 0x09
  e4:	82 ff       	sbrs	r24, 2
  e6:	03 c0       	rjmp	.+6      	; 0xee <main+0x6e>
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <main+0x72>
  ee:	84 e0       	ldi	r24, 0x04	; 4
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	28 0f       	add	r18, r24
  f4:	39 1f       	adc	r19, r25
  f6:	df 01       	movw	r26, r30
  f8:	cd 01       	movw	r24, r26
  fa:	8e 1b       	sub	r24, r30
  fc:	9f 0b       	sbc	r25, r31
**********************************************/

static void update_bit_array(uint8_t bits[], int lim, uint8_t val){

	int i;
	for(i=0;i<lim;i++){
  fe:	82 17       	cp	r24, r18
 100:	93 07       	cpc	r25, r19
 102:	14 f4       	brge	.+4      	; 0x108 <main+0x88>
		bits[i] = val;
 104:	4d 93       	st	X+, r20
 106:	f8 cf       	rjmp	.-16     	; 0xf8 <main+0x78>
	}
}

static void update_leds(uint8_t bits[]){

	PORTD = 0b00000000;
 108:	1b b8       	out	0x0b, r1	; 11
	PORTB = 0b00011100; //need to ensure that pull-up resistors are always set.
 10a:	55 b9       	out	0x05, r21	; 5
 10c:	8a e0       	ldi	r24, 0x0A	; 10
 10e:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	b5 e0       	ldi	r27, 0x05	; 5
 112:	ba 95       	dec	r27
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x92>
 116:	00 00       	nop
 118:	01 97       	sbiw	r24, 0x01	; 1
}

static void delay_us (uint16_t us) {
	uint16_t i;
	
	for (i = 0; i < us; i++)
 11a:	00 97       	sbiw	r24, 0x00	; 0
 11c:	c9 f7       	brne	.-14     	; 0x110 <main+0x90>

	PORTD = 0b00000000;
	PORTB = 0b00011100; //need to ensure that pull-up resistors are always set.
	
	delay_us(10);
	PORTD |= ((bits[0] << PD2) | (bits[1] << PD3) | (bits[2] << PD4) | (bits[3] << PD5) | (bits[4] << PD6) | (bits[5] << PD7));
 11e:	ab b1       	in	r26, 0x0b	; 11
 120:	69 81       	ldd	r22, Y+1	; 0x01
 122:	84 e0       	ldi	r24, 0x04	; 4
 124:	68 9f       	mul	r22, r24
 126:	b0 01       	movw	r22, r0
 128:	11 24       	eor	r1, r1
 12a:	8a 81       	ldd	r24, Y+2	; 0x02
 12c:	b8 e0       	ldi	r27, 0x08	; 8
 12e:	8b 9f       	mul	r24, r27
 130:	c0 01       	movw	r24, r0
 132:	11 24       	eor	r1, r1
 134:	68 2b       	or	r22, r24
 136:	6a 2b       	or	r22, r26
 138:	8b 81       	ldd	r24, Y+3	; 0x03
 13a:	70 e1       	ldi	r23, 0x10	; 16
 13c:	87 9f       	mul	r24, r23
 13e:	c0 01       	movw	r24, r0
 140:	11 24       	eor	r1, r1
 142:	68 2b       	or	r22, r24
 144:	8c 81       	ldd	r24, Y+4	; 0x04
 146:	a0 e2       	ldi	r26, 0x20	; 32
 148:	8a 9f       	mul	r24, r26
 14a:	c0 01       	movw	r24, r0
 14c:	11 24       	eor	r1, r1
 14e:	68 2b       	or	r22, r24
 150:	8d 81       	ldd	r24, Y+5	; 0x05
 152:	b0 e4       	ldi	r27, 0x40	; 64
 154:	8b 9f       	mul	r24, r27
 156:	c0 01       	movw	r24, r0
 158:	11 24       	eor	r1, r1
 15a:	68 2b       	or	r22, r24
 15c:	8e 81       	ldd	r24, Y+6	; 0x06
 15e:	70 e8       	ldi	r23, 0x80	; 128
 160:	87 9f       	mul	r24, r23
 162:	c0 01       	movw	r24, r0
 164:	11 24       	eor	r1, r1
 166:	68 2b       	or	r22, r24
 168:	6b b9       	out	0x0b, r22	; 11
	PORTB |= ((bits[6] << PB0) | (bits[7] << PB1));
 16a:	95 b1       	in	r25, 0x05	; 5
 16c:	8f 81       	ldd	r24, Y+7	; 0x07
 16e:	98 2b       	or	r25, r24
 170:	88 85       	ldd	r24, Y+8	; 0x08
 172:	88 0f       	add	r24, r24
 174:	89 2b       	or	r24, r25
 176:	85 b9       	out	0x05, r24	; 5
 178:	df 01       	movw	r26, r30
 17a:	cd 01       	movw	r24, r26
 17c:	8e 1b       	sub	r24, r30
 17e:	9f 0b       	sbc	r25, r31
**********************************************/

static void update_bit_array(uint8_t bits[], int lim, uint8_t val){

	int i;
	for(i=0;i<lim;i++){
 180:	82 17       	cp	r24, r18
 182:	93 07       	cpc	r25, r19
 184:	0c f0       	brlt	.+2      	; 0x188 <main+0x108>
 186:	9b cf       	rjmp	.-202    	; 0xbe <main+0x3e>
		bits[i] = val;
 188:	1d 92       	st	X+, r1
 18a:	f7 cf       	rjmp	.-18     	; 0x17a <main+0xfa>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
