
lab4b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000fb8  0000102c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fb8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000120  00000000  00000000  00001048  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000009d3  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000243  00000000  00000000  00001b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004cd  00000000  00000000  00001d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001b0  00000000  00000000  0000224c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001df  00000000  00000000  000023fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000032c  00000000  00000000  000025db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 eb       	ldi	r30, 0xB8	; 184
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
static void inverseData(uint32_t max, uint32_t vals[],int len);
/*********************************************
	Main Function
**********************************************/

int main(int argc, char const *argv[]){
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	aa 97       	sbiw	r28, 0x2a	; 42
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
  aa:	98 a7       	std	Y+40, r25	; 0x28
  ac:	8f a3       	std	Y+39, r24	; 0x27
  ae:	7a a7       	std	Y+42, r23	; 0x2a
  b0:	69 a7       	std	Y+41, r22	; 0x29

	initUART(BAUD);
  b2:	60 e8       	ldi	r22, 0x80	; 128
  b4:	75 e2       	ldi	r23, 0x25	; 37
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 23 01 	call	0x246	; 0x246 <initUART>
	initADC();
  be:	0e 94 e6 00 	call	0x1cc	; 0x1cc <initADC>
	
	uint32_t dout[ARRAY_LEN] = {0};
  c2:	20 e2       	ldi	r18, 0x20	; 32
  c4:	ce 01       	movw	r24, r28
  c6:	07 96       	adiw	r24, 0x07	; 7
  c8:	fc 01       	movw	r30, r24
  ca:	32 2f       	mov	r19, r18
  cc:	11 92       	st	Z+, r1
  ce:	3a 95       	dec	r19
  d0:	e9 f7       	brne	.-6      	; 0xcc <main+0x36>
	uint32_t max = 0;
  d2:	19 82       	std	Y+1, r1	; 0x01
  d4:	1a 82       	std	Y+2, r1	; 0x02
  d6:	1b 82       	std	Y+3, r1	; 0x03
  d8:	1c 82       	std	Y+4, r1	; 0x04
	int i;

	while(1){

		max = 0;//reset
  da:	19 82       	std	Y+1, r1	; 0x01
  dc:	1a 82       	std	Y+2, r1	; 0x02
  de:	1b 82       	std	Y+3, r1	; 0x03
  e0:	1c 82       	std	Y+4, r1	; 0x04
		for(i = 0;i<ARRAY_LEN;++i){
  e2:	1e 82       	std	Y+6, r1	; 0x06
  e4:	1d 82       	std	Y+5, r1	; 0x05
  e6:	4c c0       	rjmp	.+152    	; 0x180 <main+0xea>
			dout[i] = analog(i); //capture sensor outputs
  e8:	8d 81       	ldd	r24, Y+5	; 0x05
  ea:	0e 94 67 01 	call	0x2ce	; 0x2ce <analog>
  ee:	cc 01       	movw	r24, r24
  f0:	a0 e0       	ldi	r26, 0x00	; 0
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	2d 81       	ldd	r18, Y+5	; 0x05
  f6:	3e 81       	ldd	r19, Y+6	; 0x06
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	22 0f       	add	r18, r18
  fe:	33 1f       	adc	r19, r19
 100:	ae 01       	movw	r20, r28
 102:	4f 5f       	subi	r20, 0xFF	; 255
 104:	5f 4f       	sbci	r21, 0xFF	; 255
 106:	24 0f       	add	r18, r20
 108:	35 1f       	adc	r19, r21
 10a:	2a 5f       	subi	r18, 0xFA	; 250
 10c:	3f 4f       	sbci	r19, 0xFF	; 255
 10e:	f9 01       	movw	r30, r18
 110:	80 83       	st	Z, r24
 112:	91 83       	std	Z+1, r25	; 0x01
 114:	a2 83       	std	Z+2, r26	; 0x02
 116:	b3 83       	std	Z+3, r27	; 0x03
			if(max < dout[i]){
 118:	8d 81       	ldd	r24, Y+5	; 0x05
 11a:	9e 81       	ldd	r25, Y+6	; 0x06
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	9e 01       	movw	r18, r28
 126:	2f 5f       	subi	r18, 0xFF	; 255
 128:	3f 4f       	sbci	r19, 0xFF	; 255
 12a:	82 0f       	add	r24, r18
 12c:	93 1f       	adc	r25, r19
 12e:	06 96       	adiw	r24, 0x06	; 6
 130:	fc 01       	movw	r30, r24
 132:	20 81       	ld	r18, Z
 134:	31 81       	ldd	r19, Z+1	; 0x01
 136:	42 81       	ldd	r20, Z+2	; 0x02
 138:	53 81       	ldd	r21, Z+3	; 0x03
 13a:	89 81       	ldd	r24, Y+1	; 0x01
 13c:	9a 81       	ldd	r25, Y+2	; 0x02
 13e:	ab 81       	ldd	r26, Y+3	; 0x03
 140:	bc 81       	ldd	r27, Y+4	; 0x04
 142:	82 17       	cp	r24, r18
 144:	93 07       	cpc	r25, r19
 146:	a4 07       	cpc	r26, r20
 148:	b5 07       	cpc	r27, r21
 14a:	a8 f4       	brcc	.+42     	; 0x176 <main+0xe0>
				max = dout[i]; //update the maximum value for each occurance of new sensor outputs
 14c:	8d 81       	ldd	r24, Y+5	; 0x05
 14e:	9e 81       	ldd	r25, Y+6	; 0x06
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	9e 01       	movw	r18, r28
 15a:	2f 5f       	subi	r18, 0xFF	; 255
 15c:	3f 4f       	sbci	r19, 0xFF	; 255
 15e:	82 0f       	add	r24, r18
 160:	93 1f       	adc	r25, r19
 162:	06 96       	adiw	r24, 0x06	; 6
 164:	fc 01       	movw	r30, r24
 166:	80 81       	ld	r24, Z
 168:	91 81       	ldd	r25, Z+1	; 0x01
 16a:	a2 81       	ldd	r26, Z+2	; 0x02
 16c:	b3 81       	ldd	r27, Z+3	; 0x03
 16e:	89 83       	std	Y+1, r24	; 0x01
 170:	9a 83       	std	Y+2, r25	; 0x02
 172:	ab 83       	std	Y+3, r26	; 0x03
 174:	bc 83       	std	Y+4, r27	; 0x04
	int i;

	while(1){

		max = 0;//reset
		for(i = 0;i<ARRAY_LEN;++i){
 176:	8d 81       	ldd	r24, Y+5	; 0x05
 178:	9e 81       	ldd	r25, Y+6	; 0x06
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	9e 83       	std	Y+6, r25	; 0x06
 17e:	8d 83       	std	Y+5, r24	; 0x05
 180:	8d 81       	ldd	r24, Y+5	; 0x05
 182:	9e 81       	ldd	r25, Y+6	; 0x06
 184:	88 30       	cpi	r24, 0x08	; 8
 186:	91 05       	cpc	r25, r1
 188:	0c f4       	brge	.+2      	; 0x18c <main+0xf6>
 18a:	ae cf       	rjmp	.-164    	; 0xe8 <main+0x52>
			dout[i] = analog(i); //capture sensor outputs
			if(max < dout[i]){
				max = dout[i]; //update the maximum value for each occurance of new sensor outputs
			}
		}
		inverseData(max,dout,ARRAY_LEN);
 18c:	ae 01       	movw	r20, r28
 18e:	49 5f       	subi	r20, 0xF9	; 249
 190:	5f 4f       	sbci	r21, 0xFF	; 255
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	9a 81       	ldd	r25, Y+2	; 0x02
 196:	ab 81       	ldd	r26, Y+3	; 0x03
 198:	bc 81       	ldd	r27, Y+4	; 0x04
 19a:	28 e0       	ldi	r18, 0x08	; 8
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	bc 01       	movw	r22, r24
 1a0:	cd 01       	movw	r24, r26
 1a2:	0e 94 4d 03 	call	0x69a	; 0x69a <inverseData>
		printUint32(calPosition(dout,ARRAY_LEN));
 1a6:	ce 01       	movw	r24, r28
 1a8:	07 96       	adiw	r24, 0x07	; 7
 1aa:	68 e0       	ldi	r22, 0x08	; 8
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	0e 94 bf 02 	call	0x57e	; 0x57e <calPosition>
 1b2:	dc 01       	movw	r26, r24
 1b4:	cb 01       	movw	r24, r22
 1b6:	bc 01       	movw	r22, r24
 1b8:	cd 01       	movw	r24, r26
 1ba:	0e 94 c4 01 	call	0x388	; 0x388 <printUint32>
		
		printCR();
 1be:	0e 94 9d 01 	call	0x33a	; 0x33a <printCR>
		delayMs(500);
 1c2:	84 ef       	ldi	r24, 0xF4	; 244
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	0e 94 28 02 	call	0x450	; 0x450 <delayMs>
	}
 1ca:	87 cf       	rjmp	.-242    	; 0xda <main+0x44>

000001cc <initADC>:
	1). Vref internally connect to AVcc
	2). Right adjusted for 8-bit resolution
	3). Disable digital buffer for analog input pins
*/

static void initADC(void){
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62

	ADCSRA = 0;
 1d4:	8a e7       	ldi	r24, 0x7A	; 122
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	fc 01       	movw	r30, r24
 1da:	10 82       	st	Z, r1
	//enable ADC
	ADCSRA |= ( 1 << ADEN );
 1dc:	8a e7       	ldi	r24, 0x7A	; 122
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	2a e7       	ldi	r18, 0x7A	; 122
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	f9 01       	movw	r30, r18
 1e6:	20 81       	ld	r18, Z
 1e8:	20 68       	ori	r18, 0x80	; 128
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 83       	st	Z, r18
	//Vref internally connect to AVcc
	ADMUX |= ( 1 << REFS0 );
 1ee:	8c e7       	ldi	r24, 0x7C	; 124
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	2c e7       	ldi	r18, 0x7C	; 124
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	f9 01       	movw	r30, r18
 1f8:	20 81       	ld	r18, Z
 1fa:	20 64       	ori	r18, 0x40	; 64
 1fc:	fc 01       	movw	r30, r24
 1fe:	20 83       	st	Z, r18
	//right adjusted for 10-bit resolution
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 200:	8a e7       	ldi	r24, 0x7A	; 122
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	2a e7       	ldi	r18, 0x7A	; 122
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	f9 01       	movw	r30, r18
 20a:	20 81       	ld	r18, Z
 20c:	27 60       	ori	r18, 0x07	; 7
 20e:	fc 01       	movw	r30, r24
 210:	20 83       	st	Z, r18
	//disable digital input for ADC pins
	DIDR0 = 0;
 212:	8e e7       	ldi	r24, 0x7E	; 126
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	fc 01       	movw	r30, r24
 218:	10 82       	st	Z, r1
	DIDR0 |= ((1 << ADC5D) | (1 << ADC4D) | (1 << ADC3D) | (1 << ADC2D) | (1 << ADC1D) | (1 << ADC0D));
 21a:	8e e7       	ldi	r24, 0x7E	; 126
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	2e e7       	ldi	r18, 0x7E	; 126
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	f9 01       	movw	r30, r18
 224:	20 81       	ld	r18, Z
 226:	2f 63       	ori	r18, 0x3F	; 63
 228:	fc 01       	movw	r30, r24
 22a:	20 83       	st	Z, r18
	//start the first conversion
	ADCSRA |= (1 << ADSC);
 22c:	8a e7       	ldi	r24, 0x7A	; 122
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	2a e7       	ldi	r18, 0x7A	; 122
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	f9 01       	movw	r30, r18
 236:	20 81       	ld	r18, Z
 238:	20 64       	ori	r18, 0x40	; 64
 23a:	fc 01       	movw	r30, r24
 23c:	20 83       	st	Z, r18

	return;
 23e:	00 00       	nop
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <initUART>:
/*
  Initialize settings for uart functions, the function runs the USART
in double speed mode.
*/ 

static void initUART(uint32_t baud){
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
 24e:	2a 97       	sbiw	r28, 0x0a	; 10
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	f8 94       	cli
 254:	de bf       	out	0x3e, r29	; 62
 256:	0f be       	out	0x3f, r0	; 63
 258:	cd bf       	out	0x3d, r28	; 61
 25a:	6b 83       	std	Y+3, r22	; 0x03
 25c:	7c 83       	std	Y+4, r23	; 0x04
 25e:	8d 83       	std	Y+5, r24	; 0x05
 260:	9e 83       	std	Y+6, r25	; 0x06

   //double-speed mode UBRR formula
   unsigned int ubrr = F_CPU/8/baud -1;
 262:	80 e8       	ldi	r24, 0x80	; 128
 264:	94 e8       	ldi	r25, 0x84	; 132
 266:	ae e1       	ldi	r26, 0x1E	; 30
 268:	b0 e0       	ldi	r27, 0x00	; 0
 26a:	2b 81       	ldd	r18, Y+3	; 0x03
 26c:	3c 81       	ldd	r19, Y+4	; 0x04
 26e:	4d 81       	ldd	r20, Y+5	; 0x05
 270:	5e 81       	ldd	r21, Y+6	; 0x06
 272:	bc 01       	movw	r22, r24
 274:	cd 01       	movw	r24, r26
 276:	0e 94 c6 04 	call	0x98c	; 0x98c <__udivmodsi4>
 27a:	da 01       	movw	r26, r20
 27c:	c9 01       	movw	r24, r18
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	9a 83       	std	Y+2, r25	; 0x02
 282:	89 83       	std	Y+1, r24	; 0x01
   //shift MSB and store in UBRR0H 
   UBRR0H = (unsigned char) (ubrr >> 8); 
 284:	85 ec       	ldi	r24, 0xC5	; 197
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	29 81       	ldd	r18, Y+1	; 0x01
 28a:	3a 81       	ldd	r19, Y+2	; 0x02
 28c:	23 2f       	mov	r18, r19
 28e:	33 27       	eor	r19, r19
 290:	fc 01       	movw	r30, r24
 292:	20 83       	st	Z, r18
   //store LSB in UBRR0L      
   UBRR0L = (unsigned char) ubrr;
 294:	84 ec       	ldi	r24, 0xC4	; 196
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	29 81       	ldd	r18, Y+1	; 0x01
 29a:	fc 01       	movw	r30, r24
 29c:	20 83       	st	Z, r18
   //enable double speed mode
   UCSR0A = (1 << U2X0);
 29e:	80 ec       	ldi	r24, 0xC0	; 192
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	22 e0       	ldi	r18, 0x02	; 2
 2a4:	fc 01       	movw	r30, r24
 2a6:	20 83       	st	Z, r18
   //enable transmitter/receiver 
   UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 2a8:	81 ec       	ldi	r24, 0xC1	; 193
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	28 e1       	ldi	r18, 0x18	; 24
 2ae:	fc 01       	movw	r30, r24
 2b0:	20 83       	st	Z, r18
   //8-Bit Characters, 1 Stop bits, Even parity
   UCSR0C = (1 << UCSZ00) | (1 << UCSZ01) | (1 << UPM01);
 2b2:	82 ec       	ldi	r24, 0xC2	; 194
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	26 e2       	ldi	r18, 0x26	; 38
 2b8:	fc 01       	movw	r30, r24
 2ba:	20 83       	st	Z, r18
   
}
 2bc:	2a 96       	adiw	r28, 0x0a	; 10
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	f8 94       	cli
 2c2:	de bf       	out	0x3e, r29	; 62
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	cd bf       	out	0x3d, r28	; 61
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <analog>:

/* 
	Analog to digital for 8-bit resolution
*/

static uint16_t analog(uint8_t channel){
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	1f 92       	push	r1
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
 2d8:	89 83       	std	Y+1, r24	; 0x01

	//clear MUX[3:0]
	ADMUX &= 0xF0; 
 2da:	8c e7       	ldi	r24, 0x7C	; 124
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	2c e7       	ldi	r18, 0x7C	; 124
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	f9 01       	movw	r30, r18
 2e4:	20 81       	ld	r18, Z
 2e6:	20 7f       	andi	r18, 0xF0	; 240
 2e8:	fc 01       	movw	r30, r24
 2ea:	20 83       	st	Z, r18
	//select channel
	ADMUX |= channel; 
 2ec:	8c e7       	ldi	r24, 0x7C	; 124
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	2c e7       	ldi	r18, 0x7C	; 124
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	f9 01       	movw	r30, r18
 2f6:	30 81       	ld	r19, Z
 2f8:	29 81       	ldd	r18, Y+1	; 0x01
 2fa:	23 2b       	or	r18, r19
 2fc:	fc 01       	movw	r30, r24
 2fe:	20 83       	st	Z, r18
	//start conversion
	ADCSRA |= (1 << ADSC);
 300:	8a e7       	ldi	r24, 0x7A	; 122
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	2a e7       	ldi	r18, 0x7A	; 122
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	f9 01       	movw	r30, r18
 30a:	20 81       	ld	r18, Z
 30c:	20 64       	ori	r18, 0x40	; 64
 30e:	fc 01       	movw	r30, r24
 310:	20 83       	st	Z, r18
	//wait for the conversion completed
	while(ADCSRA & ( 1 << ADSC));
 312:	00 00       	nop
 314:	8a e7       	ldi	r24, 0x7A	; 122
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	fc 01       	movw	r30, r24
 31a:	80 81       	ld	r24, Z
 31c:	88 2f       	mov	r24, r24
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	80 74       	andi	r24, 0x40	; 64
 322:	99 27       	eor	r25, r25
 324:	00 97       	sbiw	r24, 0x00	; 0
 326:	b1 f7       	brne	.-20     	; 0x314 <analog+0x46>

	return ADC;
 328:	88 e7       	ldi	r24, 0x78	; 120
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	fc 01       	movw	r30, r24
 32e:	80 81       	ld	r24, Z
 330:	91 81       	ldd	r25, Z+1	; 0x01
}
 332:	0f 90       	pop	r0
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	08 95       	ret

0000033a <printCR>:

/* 
	print carriage return & newline
*/

static void printCR(void){
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62

	transmitByte((uint8_t)'\n');
 342:	8a e0       	ldi	r24, 0x0A	; 10
 344:	0e 94 aa 01 	call	0x354	; 0x354 <transmitByte>
	transmitByte((uint8_t)'\r');
 348:	8d e0       	ldi	r24, 0x0D	; 13
 34a:	0e 94 aa 01 	call	0x354	; 0x354 <transmitByte>
}
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <transmitByte>:

/*
   Write byte to UART
*/ 

static void transmitByte(uint8_t data){
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	1f 92       	push	r1
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
 35e:	89 83       	std	Y+1, r24	; 0x01

	// Wait for empty transmit buffer
   	while ( !(UCSR0A & (1 << UDRE0)) );
 360:	00 00       	nop
 362:	80 ec       	ldi	r24, 0xC0	; 192
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	fc 01       	movw	r30, r24
 368:	80 81       	ld	r24, Z
 36a:	88 2f       	mov	r24, r24
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	80 72       	andi	r24, 0x20	; 32
 370:	99 27       	eor	r25, r25
 372:	00 97       	sbiw	r24, 0x00	; 0
 374:	b1 f3       	breq	.-20     	; 0x362 <transmitByte+0xe>
    // Start transmission by writing to UDR0 register
   	UDR0 = data;
 376:	86 ec       	ldi	r24, 0xC6	; 198
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	29 81       	ldd	r18, Y+1	; 0x01
 37c:	fc 01       	movw	r30, r24
 37e:	20 83       	st	Z, r18
}  
 380:	0f 90       	pop	r0
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <printUint32>:
/*
	Print a uint32_t number to the serial console. The negtive sign is printed if the number is negative.
	In addition, necessary character shifting is also performed for pretty formatting. 
*/

static void printUint32(uint32_t num){
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
 390:	29 97       	sbiw	r28, 0x09	; 9
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	f8 94       	cli
 396:	de bf       	out	0x3e, r29	; 62
 398:	0f be       	out	0x3f, r0	; 63
 39a:	cd bf       	out	0x3d, r28	; 61
 39c:	6e 83       	std	Y+6, r22	; 0x06
 39e:	7f 83       	std	Y+7, r23	; 0x07
 3a0:	88 87       	std	Y+8, r24	; 0x08
 3a2:	99 87       	std	Y+9, r25	; 0x09

	char str[5];
	memset(str,0,sizeof(str));
 3a4:	45 e0       	ldi	r20, 0x05	; 5
 3a6:	50 e0       	ldi	r21, 0x00	; 0
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	ce 01       	movw	r24, r28
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	0e 94 02 05 	call	0xa04	; 0xa04 <memset>
	sprintf(str,"%u",(unsigned int)num);
 3b4:	8e 81       	ldd	r24, Y+6	; 0x06
 3b6:	9f 81       	ldd	r25, Y+7	; 0x07
 3b8:	29 2f       	mov	r18, r25
 3ba:	2f 93       	push	r18
 3bc:	8f 93       	push	r24
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	89 2f       	mov	r24, r25
 3c4:	8f 93       	push	r24
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	8f 93       	push	r24
 3cc:	ce 01       	movw	r24, r28
 3ce:	01 96       	adiw	r24, 0x01	; 1
 3d0:	89 2f       	mov	r24, r25
 3d2:	8f 93       	push	r24
 3d4:	ce 01       	movw	r24, r28
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	8f 93       	push	r24
 3da:	0e 94 09 05 	call	0xa12	; 0xa12 <sprintf>
 3de:	0f 90       	pop	r0
 3e0:	0f 90       	pop	r0
 3e2:	0f 90       	pop	r0
 3e4:	0f 90       	pop	r0
 3e6:	0f 90       	pop	r0
 3e8:	0f 90       	pop	r0
	str[4] = '\0';
 3ea:	1d 82       	std	Y+5, r1	; 0x05
	transmitString(str);
 3ec:	ce 01       	movw	r24, r28
 3ee:	01 96       	adiw	r24, 0x01	; 1
 3f0:	0e 94 03 02 	call	0x406	; 0x406 <transmitString>
}
 3f4:	29 96       	adiw	r28, 0x09	; 9
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	f8 94       	cli
 3fa:	de bf       	out	0x3e, r29	; 62
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	cd bf       	out	0x3d, r28	; 61
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	08 95       	ret

00000406 <transmitString>:

/*
	print a string in the serial console
*/

static void transmitString(char* stringPtr){
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	00 d0       	rcall	.+0      	; 0x40c <transmitString+0x6>
 40c:	00 d0       	rcall	.+0      	; 0x40e <transmitString+0x8>
 40e:	cd b7       	in	r28, 0x3d	; 61
 410:	de b7       	in	r29, 0x3e	; 62
 412:	9c 83       	std	Y+4, r25	; 0x04
 414:	8b 83       	std	Y+3, r24	; 0x03

	char* iter = stringPtr;
 416:	8b 81       	ldd	r24, Y+3	; 0x03
 418:	9c 81       	ldd	r25, Y+4	; 0x04
 41a:	9a 83       	std	Y+2, r25	; 0x02
 41c:	89 83       	std	Y+1, r24	; 0x01
	while(*iter != '\0'){
 41e:	0b c0       	rjmp	.+22     	; 0x436 <transmitString+0x30>
		transmitByte(*iter++);
 420:	89 81       	ldd	r24, Y+1	; 0x01
 422:	9a 81       	ldd	r25, Y+2	; 0x02
 424:	9c 01       	movw	r18, r24
 426:	2f 5f       	subi	r18, 0xFF	; 255
 428:	3f 4f       	sbci	r19, 0xFF	; 255
 42a:	3a 83       	std	Y+2, r19	; 0x02
 42c:	29 83       	std	Y+1, r18	; 0x01
 42e:	fc 01       	movw	r30, r24
 430:	80 81       	ld	r24, Z
 432:	0e 94 aa 01 	call	0x354	; 0x354 <transmitByte>
*/

static void transmitString(char* stringPtr){

	char* iter = stringPtr;
	while(*iter != '\0'){
 436:	89 81       	ldd	r24, Y+1	; 0x01
 438:	9a 81       	ldd	r25, Y+2	; 0x02
 43a:	fc 01       	movw	r30, r24
 43c:	80 81       	ld	r24, Z
 43e:	88 23       	and	r24, r24
 440:	79 f7       	brne	.-34     	; 0x420 <transmitString+0x1a>
		transmitByte(*iter++);
	}
}
 442:	0f 90       	pop	r0
 444:	0f 90       	pop	r0
 446:	0f 90       	pop	r0
 448:	0f 90       	pop	r0
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	08 95       	ret

00000450 <delayMs>:

/*
	delay function
*/

static void delayMs (uint16_t ms) {
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
 458:	62 97       	sbiw	r28, 0x12	; 18
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	f8 94       	cli
 45e:	de bf       	out	0x3e, r29	; 62
 460:	0f be       	out	0x3f, r0	; 63
 462:	cd bf       	out	0x3d, r28	; 61
 464:	9a 8b       	std	Y+18, r25	; 0x12
 466:	89 8b       	std	Y+17, r24	; 0x11

	uint16_t i;
	for (i = 0; i < ms; i++)
 468:	1a 82       	std	Y+2, r1	; 0x02
 46a:	19 82       	std	Y+1, r1	; 0x01
 46c:	77 c0       	rjmp	.+238    	; 0x55c <delayMs+0x10c>
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	a0 e8       	ldi	r26, 0x80	; 128
 474:	bf e3       	ldi	r27, 0x3F	; 63
 476:	8b 83       	std	Y+3, r24	; 0x03
 478:	9c 83       	std	Y+4, r25	; 0x04
 47a:	ad 83       	std	Y+5, r26	; 0x05
 47c:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 47e:	20 e0       	ldi	r18, 0x00	; 0
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	4a e7       	ldi	r20, 0x7A	; 122
 484:	55 e4       	ldi	r21, 0x45	; 69
 486:	6b 81       	ldd	r22, Y+3	; 0x03
 488:	7c 81       	ldd	r23, Y+4	; 0x04
 48a:	8d 81       	ldd	r24, Y+5	; 0x05
 48c:	9e 81       	ldd	r25, Y+6	; 0x06
 48e:	0e 94 2b 04 	call	0x856	; 0x856 <__mulsf3>
 492:	dc 01       	movw	r26, r24
 494:	cb 01       	movw	r24, r22
 496:	8f 83       	std	Y+7, r24	; 0x07
 498:	98 87       	std	Y+8, r25	; 0x08
 49a:	a9 87       	std	Y+9, r26	; 0x09
 49c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 49e:	20 e0       	ldi	r18, 0x00	; 0
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	40 e8       	ldi	r20, 0x80	; 128
 4a4:	5f e3       	ldi	r21, 0x3F	; 63
 4a6:	6f 81       	ldd	r22, Y+7	; 0x07
 4a8:	78 85       	ldd	r23, Y+8	; 0x08
 4aa:	89 85       	ldd	r24, Y+9	; 0x09
 4ac:	9a 85       	ldd	r25, Y+10	; 0x0a
 4ae:	0e 94 aa 03 	call	0x754	; 0x754 <__cmpsf2>
 4b2:	88 23       	and	r24, r24
 4b4:	2c f4       	brge	.+10     	; 0x4c0 <delayMs+0x70>
		__ticks = 1;
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	9c 87       	std	Y+12, r25	; 0x0c
 4bc:	8b 87       	std	Y+11, r24	; 0x0b
 4be:	3f c0       	rjmp	.+126    	; 0x53e <delayMs+0xee>
	else if (__tmp > 65535)
 4c0:	20 e0       	ldi	r18, 0x00	; 0
 4c2:	3f ef       	ldi	r19, 0xFF	; 255
 4c4:	4f e7       	ldi	r20, 0x7F	; 127
 4c6:	57 e4       	ldi	r21, 0x47	; 71
 4c8:	6f 81       	ldd	r22, Y+7	; 0x07
 4ca:	78 85       	ldd	r23, Y+8	; 0x08
 4cc:	89 85       	ldd	r24, Y+9	; 0x09
 4ce:	9a 85       	ldd	r25, Y+10	; 0x0a
 4d0:	0e 94 27 04 	call	0x84e	; 0x84e <__gesf2>
 4d4:	18 16       	cp	r1, r24
 4d6:	4c f5       	brge	.+82     	; 0x52a <delayMs+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4d8:	20 e0       	ldi	r18, 0x00	; 0
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	40 e2       	ldi	r20, 0x20	; 32
 4de:	51 e4       	ldi	r21, 0x41	; 65
 4e0:	6b 81       	ldd	r22, Y+3	; 0x03
 4e2:	7c 81       	ldd	r23, Y+4	; 0x04
 4e4:	8d 81       	ldd	r24, Y+5	; 0x05
 4e6:	9e 81       	ldd	r25, Y+6	; 0x06
 4e8:	0e 94 2b 04 	call	0x856	; 0x856 <__mulsf3>
 4ec:	dc 01       	movw	r26, r24
 4ee:	cb 01       	movw	r24, r22
 4f0:	bc 01       	movw	r22, r24
 4f2:	cd 01       	movw	r24, r26
 4f4:	0e 94 ae 03 	call	0x75c	; 0x75c <__fixunssfsi>
 4f8:	dc 01       	movw	r26, r24
 4fa:	cb 01       	movw	r24, r22
 4fc:	9c 87       	std	Y+12, r25	; 0x0c
 4fe:	8b 87       	std	Y+11, r24	; 0x0b
 500:	0f c0       	rjmp	.+30     	; 0x520 <delayMs+0xd0>
 502:	80 e9       	ldi	r24, 0x90	; 144
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	9e 87       	std	Y+14, r25	; 0x0e
 508:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 50a:	8d 85       	ldd	r24, Y+13	; 0x0d
 50c:	9e 85       	ldd	r25, Y+14	; 0x0e
 50e:	01 97       	sbiw	r24, 0x01	; 1
 510:	f1 f7       	brne	.-4      	; 0x50e <delayMs+0xbe>
 512:	9e 87       	std	Y+14, r25	; 0x0e
 514:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 516:	8b 85       	ldd	r24, Y+11	; 0x0b
 518:	9c 85       	ldd	r25, Y+12	; 0x0c
 51a:	01 97       	sbiw	r24, 0x01	; 1
 51c:	9c 87       	std	Y+12, r25	; 0x0c
 51e:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 520:	8b 85       	ldd	r24, Y+11	; 0x0b
 522:	9c 85       	ldd	r25, Y+12	; 0x0c
 524:	00 97       	sbiw	r24, 0x00	; 0
 526:	69 f7       	brne	.-38     	; 0x502 <delayMs+0xb2>
 528:	14 c0       	rjmp	.+40     	; 0x552 <delayMs+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 52a:	6f 81       	ldd	r22, Y+7	; 0x07
 52c:	78 85       	ldd	r23, Y+8	; 0x08
 52e:	89 85       	ldd	r24, Y+9	; 0x09
 530:	9a 85       	ldd	r25, Y+10	; 0x0a
 532:	0e 94 ae 03 	call	0x75c	; 0x75c <__fixunssfsi>
 536:	dc 01       	movw	r26, r24
 538:	cb 01       	movw	r24, r22
 53a:	9c 87       	std	Y+12, r25	; 0x0c
 53c:	8b 87       	std	Y+11, r24	; 0x0b
 53e:	8b 85       	ldd	r24, Y+11	; 0x0b
 540:	9c 85       	ldd	r25, Y+12	; 0x0c
 542:	98 8b       	std	Y+16, r25	; 0x10
 544:	8f 87       	std	Y+15, r24	; 0x0f
 546:	8f 85       	ldd	r24, Y+15	; 0x0f
 548:	98 89       	ldd	r25, Y+16	; 0x10
 54a:	01 97       	sbiw	r24, 0x01	; 1
 54c:	f1 f7       	brne	.-4      	; 0x54a <delayMs+0xfa>
 54e:	98 8b       	std	Y+16, r25	; 0x10
 550:	8f 87       	std	Y+15, r24	; 0x0f
 552:	89 81       	ldd	r24, Y+1	; 0x01
 554:	9a 81       	ldd	r25, Y+2	; 0x02
 556:	01 96       	adiw	r24, 0x01	; 1
 558:	9a 83       	std	Y+2, r25	; 0x02
 55a:	89 83       	std	Y+1, r24	; 0x01
 55c:	29 81       	ldd	r18, Y+1	; 0x01
 55e:	3a 81       	ldd	r19, Y+2	; 0x02
 560:	89 89       	ldd	r24, Y+17	; 0x11
 562:	9a 89       	ldd	r25, Y+18	; 0x12
 564:	28 17       	cp	r18, r24
 566:	39 07       	cpc	r19, r25
 568:	08 f4       	brcc	.+2      	; 0x56c <delayMs+0x11c>
 56a:	81 cf       	rjmp	.-254    	; 0x46e <delayMs+0x1e>
		_delay_ms(1);	
}
 56c:	62 96       	adiw	r28, 0x12	; 18
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	f8 94       	cli
 572:	de bf       	out	0x3e, r29	; 62
 574:	0f be       	out	0x3f, r0	; 63
 576:	cd bf       	out	0x3d, r28	; 61
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	08 95       	ret

0000057e <calPosition>:

/*
	Calculate the position value based on the current setting
*/
static uint32_t calPosition( uint32_t vals[], int len){
 57e:	cf 93       	push	r28
 580:	df 93       	push	r29
 582:	cd b7       	in	r28, 0x3d	; 61
 584:	de b7       	in	r29, 0x3e	; 62
 586:	62 97       	sbiw	r28, 0x12	; 18
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	f8 94       	cli
 58c:	de bf       	out	0x3e, r29	; 62
 58e:	0f be       	out	0x3f, r0	; 63
 590:	cd bf       	out	0x3d, r28	; 61
 592:	9c 87       	std	Y+12, r25	; 0x0c
 594:	8b 87       	std	Y+11, r24	; 0x0b
 596:	7e 87       	std	Y+14, r23	; 0x0e
 598:	6d 87       	std	Y+13, r22	; 0x0d

  int i;
  uint32_t sum = 0;
 59a:	1b 82       	std	Y+3, r1	; 0x03
 59c:	1c 82       	std	Y+4, r1	; 0x04
 59e:	1d 82       	std	Y+5, r1	; 0x05
 5a0:	1e 82       	std	Y+6, r1	; 0x06
  uint32_t mul = 0;
 5a2:	1f 82       	std	Y+7, r1	; 0x07
 5a4:	18 86       	std	Y+8, r1	; 0x08
 5a6:	19 86       	std	Y+9, r1	; 0x09
 5a8:	1a 86       	std	Y+10, r1	; 0x0a

  for(i=0;i<len;++i){
 5aa:	1a 82       	std	Y+2, r1	; 0x02
 5ac:	19 82       	std	Y+1, r1	; 0x01
 5ae:	54 c0       	rjmp	.+168    	; 0x658 <calPosition+0xda>

    sum += vals[i];
 5b0:	89 81       	ldd	r24, Y+1	; 0x01
 5b2:	9a 81       	ldd	r25, Y+2	; 0x02
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	2b 85       	ldd	r18, Y+11	; 0x0b
 5be:	3c 85       	ldd	r19, Y+12	; 0x0c
 5c0:	82 0f       	add	r24, r18
 5c2:	93 1f       	adc	r25, r19
 5c4:	fc 01       	movw	r30, r24
 5c6:	80 81       	ld	r24, Z
 5c8:	91 81       	ldd	r25, Z+1	; 0x01
 5ca:	a2 81       	ldd	r26, Z+2	; 0x02
 5cc:	b3 81       	ldd	r27, Z+3	; 0x03
 5ce:	2b 81       	ldd	r18, Y+3	; 0x03
 5d0:	3c 81       	ldd	r19, Y+4	; 0x04
 5d2:	4d 81       	ldd	r20, Y+5	; 0x05
 5d4:	5e 81       	ldd	r21, Y+6	; 0x06
 5d6:	82 0f       	add	r24, r18
 5d8:	93 1f       	adc	r25, r19
 5da:	a4 1f       	adc	r26, r20
 5dc:	b5 1f       	adc	r27, r21
 5de:	8b 83       	std	Y+3, r24	; 0x03
 5e0:	9c 83       	std	Y+4, r25	; 0x04
 5e2:	ad 83       	std	Y+5, r26	; 0x05
 5e4:	be 83       	std	Y+6, r27	; 0x06
    mul += 1050 *(i+1)*vals[i];
 5e6:	89 81       	ldd	r24, Y+1	; 0x01
 5e8:	9a 81       	ldd	r25, Y+2	; 0x02
 5ea:	ac 01       	movw	r20, r24
 5ec:	4f 5f       	subi	r20, 0xFF	; 255
 5ee:	5f 4f       	sbci	r21, 0xFF	; 255
 5f0:	2a e1       	ldi	r18, 0x1A	; 26
 5f2:	34 e0       	ldi	r19, 0x04	; 4
 5f4:	42 9f       	mul	r20, r18
 5f6:	c0 01       	movw	r24, r0
 5f8:	43 9f       	mul	r20, r19
 5fa:	90 0d       	add	r25, r0
 5fc:	52 9f       	mul	r21, r18
 5fe:	90 0d       	add	r25, r0
 600:	11 24       	eor	r1, r1
 602:	9c 01       	movw	r18, r24
 604:	44 27       	eor	r20, r20
 606:	37 fd       	sbrc	r19, 7
 608:	40 95       	com	r20
 60a:	54 2f       	mov	r21, r20
 60c:	89 81       	ldd	r24, Y+1	; 0x01
 60e:	9a 81       	ldd	r25, Y+2	; 0x02
 610:	88 0f       	add	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	6b 85       	ldd	r22, Y+11	; 0x0b
 61a:	7c 85       	ldd	r23, Y+12	; 0x0c
 61c:	86 0f       	add	r24, r22
 61e:	97 1f       	adc	r25, r23
 620:	fc 01       	movw	r30, r24
 622:	80 81       	ld	r24, Z
 624:	91 81       	ldd	r25, Z+1	; 0x01
 626:	a2 81       	ldd	r26, Z+2	; 0x02
 628:	b3 81       	ldd	r27, Z+3	; 0x03
 62a:	bc 01       	movw	r22, r24
 62c:	cd 01       	movw	r24, r26
 62e:	0e 94 b6 04 	call	0x96c	; 0x96c <__mulsi3>
 632:	dc 01       	movw	r26, r24
 634:	cb 01       	movw	r24, r22
 636:	2f 81       	ldd	r18, Y+7	; 0x07
 638:	38 85       	ldd	r19, Y+8	; 0x08
 63a:	49 85       	ldd	r20, Y+9	; 0x09
 63c:	5a 85       	ldd	r21, Y+10	; 0x0a
 63e:	82 0f       	add	r24, r18
 640:	93 1f       	adc	r25, r19
 642:	a4 1f       	adc	r26, r20
 644:	b5 1f       	adc	r27, r21
 646:	8f 83       	std	Y+7, r24	; 0x07
 648:	98 87       	std	Y+8, r25	; 0x08
 64a:	a9 87       	std	Y+9, r26	; 0x09
 64c:	ba 87       	std	Y+10, r27	; 0x0a

  int i;
  uint32_t sum = 0;
  uint32_t mul = 0;

  for(i=0;i<len;++i){
 64e:	89 81       	ldd	r24, Y+1	; 0x01
 650:	9a 81       	ldd	r25, Y+2	; 0x02
 652:	01 96       	adiw	r24, 0x01	; 1
 654:	9a 83       	std	Y+2, r25	; 0x02
 656:	89 83       	std	Y+1, r24	; 0x01
 658:	29 81       	ldd	r18, Y+1	; 0x01
 65a:	3a 81       	ldd	r19, Y+2	; 0x02
 65c:	8d 85       	ldd	r24, Y+13	; 0x0d
 65e:	9e 85       	ldd	r25, Y+14	; 0x0e
 660:	28 17       	cp	r18, r24
 662:	39 07       	cpc	r19, r25
 664:	0c f4       	brge	.+2      	; 0x668 <calPosition+0xea>
 666:	a4 cf       	rjmp	.-184    	; 0x5b0 <calPosition+0x32>

    sum += vals[i];
    mul += 1050 *(i+1)*vals[i];
  }
  return (uint32_t)(mul/sum);
 668:	8f 81       	ldd	r24, Y+7	; 0x07
 66a:	98 85       	ldd	r25, Y+8	; 0x08
 66c:	a9 85       	ldd	r26, Y+9	; 0x09
 66e:	ba 85       	ldd	r27, Y+10	; 0x0a
 670:	2b 81       	ldd	r18, Y+3	; 0x03
 672:	3c 81       	ldd	r19, Y+4	; 0x04
 674:	4d 81       	ldd	r20, Y+5	; 0x05
 676:	5e 81       	ldd	r21, Y+6	; 0x06
 678:	bc 01       	movw	r22, r24
 67a:	cd 01       	movw	r24, r26
 67c:	0e 94 c6 04 	call	0x98c	; 0x98c <__udivmodsi4>
 680:	da 01       	movw	r26, r20
 682:	c9 01       	movw	r24, r18
}
 684:	bc 01       	movw	r22, r24
 686:	cd 01       	movw	r24, r26
 688:	62 96       	adiw	r28, 0x12	; 18
 68a:	0f b6       	in	r0, 0x3f	; 63
 68c:	f8 94       	cli
 68e:	de bf       	out	0x3e, r29	; 62
 690:	0f be       	out	0x3f, r0	; 63
 692:	cd bf       	out	0x3d, r28	; 61
 694:	df 91       	pop	r29
 696:	cf 91       	pop	r28
 698:	08 95       	ret

0000069a <inverseData>:


static void inverseData(uint32_t max, uint32_t vals[],int len){
 69a:	ef 92       	push	r14
 69c:	ff 92       	push	r15
 69e:	0f 93       	push	r16
 6a0:	1f 93       	push	r17
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
 6a6:	cd b7       	in	r28, 0x3d	; 61
 6a8:	de b7       	in	r29, 0x3e	; 62
 6aa:	2a 97       	sbiw	r28, 0x0a	; 10
 6ac:	0f b6       	in	r0, 0x3f	; 63
 6ae:	f8 94       	cli
 6b0:	de bf       	out	0x3e, r29	; 62
 6b2:	0f be       	out	0x3f, r0	; 63
 6b4:	cd bf       	out	0x3d, r28	; 61
 6b6:	6b 83       	std	Y+3, r22	; 0x03
 6b8:	7c 83       	std	Y+4, r23	; 0x04
 6ba:	8d 83       	std	Y+5, r24	; 0x05
 6bc:	9e 83       	std	Y+6, r25	; 0x06
 6be:	58 87       	std	Y+8, r21	; 0x08
 6c0:	4f 83       	std	Y+7, r20	; 0x07
 6c2:	3a 87       	std	Y+10, r19	; 0x0a
 6c4:	29 87       	std	Y+9, r18	; 0x09

	int i = 0;
 6c6:	1a 82       	std	Y+2, r1	; 0x02
 6c8:	19 82       	std	Y+1, r1	; 0x01
	for(;i<len;++i){
 6ca:	30 c0       	rjmp	.+96     	; 0x72c <inverseData+0x92>
		vals[i] = max - vals[i];
 6cc:	89 81       	ldd	r24, Y+1	; 0x01
 6ce:	9a 81       	ldd	r25, Y+2	; 0x02
 6d0:	88 0f       	add	r24, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	88 0f       	add	r24, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	2f 81       	ldd	r18, Y+7	; 0x07
 6da:	38 85       	ldd	r19, Y+8	; 0x08
 6dc:	b9 01       	movw	r22, r18
 6de:	68 0f       	add	r22, r24
 6e0:	79 1f       	adc	r23, r25
 6e2:	89 81       	ldd	r24, Y+1	; 0x01
 6e4:	9a 81       	ldd	r25, Y+2	; 0x02
 6e6:	88 0f       	add	r24, r24
 6e8:	99 1f       	adc	r25, r25
 6ea:	88 0f       	add	r24, r24
 6ec:	99 1f       	adc	r25, r25
 6ee:	2f 81       	ldd	r18, Y+7	; 0x07
 6f0:	38 85       	ldd	r19, Y+8	; 0x08
 6f2:	82 0f       	add	r24, r18
 6f4:	93 1f       	adc	r25, r19
 6f6:	fc 01       	movw	r30, r24
 6f8:	80 81       	ld	r24, Z
 6fa:	91 81       	ldd	r25, Z+1	; 0x01
 6fc:	a2 81       	ldd	r26, Z+2	; 0x02
 6fe:	b3 81       	ldd	r27, Z+3	; 0x03
 700:	2b 81       	ldd	r18, Y+3	; 0x03
 702:	3c 81       	ldd	r19, Y+4	; 0x04
 704:	4d 81       	ldd	r20, Y+5	; 0x05
 706:	5e 81       	ldd	r21, Y+6	; 0x06
 708:	79 01       	movw	r14, r18
 70a:	8a 01       	movw	r16, r20
 70c:	e8 1a       	sub	r14, r24
 70e:	f9 0a       	sbc	r15, r25
 710:	0a 0b       	sbc	r16, r26
 712:	1b 0b       	sbc	r17, r27
 714:	d8 01       	movw	r26, r16
 716:	c7 01       	movw	r24, r14
 718:	fb 01       	movw	r30, r22
 71a:	80 83       	st	Z, r24
 71c:	91 83       	std	Z+1, r25	; 0x01
 71e:	a2 83       	std	Z+2, r26	; 0x02
 720:	b3 83       	std	Z+3, r27	; 0x03


static void inverseData(uint32_t max, uint32_t vals[],int len){

	int i = 0;
	for(;i<len;++i){
 722:	89 81       	ldd	r24, Y+1	; 0x01
 724:	9a 81       	ldd	r25, Y+2	; 0x02
 726:	01 96       	adiw	r24, 0x01	; 1
 728:	9a 83       	std	Y+2, r25	; 0x02
 72a:	89 83       	std	Y+1, r24	; 0x01
 72c:	29 81       	ldd	r18, Y+1	; 0x01
 72e:	3a 81       	ldd	r19, Y+2	; 0x02
 730:	89 85       	ldd	r24, Y+9	; 0x09
 732:	9a 85       	ldd	r25, Y+10	; 0x0a
 734:	28 17       	cp	r18, r24
 736:	39 07       	cpc	r19, r25
 738:	4c f2       	brlt	.-110    	; 0x6cc <inverseData+0x32>
		vals[i] = max - vals[i];
	}
}
 73a:	2a 96       	adiw	r28, 0x0a	; 10
 73c:	0f b6       	in	r0, 0x3f	; 63
 73e:	f8 94       	cli
 740:	de bf       	out	0x3e, r29	; 62
 742:	0f be       	out	0x3f, r0	; 63
 744:	cd bf       	out	0x3d, r28	; 61
 746:	df 91       	pop	r29
 748:	cf 91       	pop	r28
 74a:	1f 91       	pop	r17
 74c:	0f 91       	pop	r16
 74e:	ff 90       	pop	r15
 750:	ef 90       	pop	r14
 752:	08 95       	ret

00000754 <__cmpsf2>:
 754:	2f d0       	rcall	.+94     	; 0x7b4 <__fp_cmp>
 756:	08 f4       	brcc	.+2      	; 0x75a <__cmpsf2+0x6>
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	08 95       	ret

0000075c <__fixunssfsi>:
 75c:	57 d0       	rcall	.+174    	; 0x80c <__fp_splitA>
 75e:	88 f0       	brcs	.+34     	; 0x782 <__fixunssfsi+0x26>
 760:	9f 57       	subi	r25, 0x7F	; 127
 762:	90 f0       	brcs	.+36     	; 0x788 <__fixunssfsi+0x2c>
 764:	b9 2f       	mov	r27, r25
 766:	99 27       	eor	r25, r25
 768:	b7 51       	subi	r27, 0x17	; 23
 76a:	a0 f0       	brcs	.+40     	; 0x794 <__fixunssfsi+0x38>
 76c:	d1 f0       	breq	.+52     	; 0x7a2 <__fixunssfsi+0x46>
 76e:	66 0f       	add	r22, r22
 770:	77 1f       	adc	r23, r23
 772:	88 1f       	adc	r24, r24
 774:	99 1f       	adc	r25, r25
 776:	1a f0       	brmi	.+6      	; 0x77e <__fixunssfsi+0x22>
 778:	ba 95       	dec	r27
 77a:	c9 f7       	brne	.-14     	; 0x76e <__fixunssfsi+0x12>
 77c:	12 c0       	rjmp	.+36     	; 0x7a2 <__fixunssfsi+0x46>
 77e:	b1 30       	cpi	r27, 0x01	; 1
 780:	81 f0       	breq	.+32     	; 0x7a2 <__fixunssfsi+0x46>
 782:	5e d0       	rcall	.+188    	; 0x840 <__fp_zero>
 784:	b1 e0       	ldi	r27, 0x01	; 1
 786:	08 95       	ret
 788:	5b c0       	rjmp	.+182    	; 0x840 <__fp_zero>
 78a:	67 2f       	mov	r22, r23
 78c:	78 2f       	mov	r23, r24
 78e:	88 27       	eor	r24, r24
 790:	b8 5f       	subi	r27, 0xF8	; 248
 792:	39 f0       	breq	.+14     	; 0x7a2 <__fixunssfsi+0x46>
 794:	b9 3f       	cpi	r27, 0xF9	; 249
 796:	cc f3       	brlt	.-14     	; 0x78a <__fixunssfsi+0x2e>
 798:	86 95       	lsr	r24
 79a:	77 95       	ror	r23
 79c:	67 95       	ror	r22
 79e:	b3 95       	inc	r27
 7a0:	d9 f7       	brne	.-10     	; 0x798 <__fixunssfsi+0x3c>
 7a2:	3e f4       	brtc	.+14     	; 0x7b2 <__fixunssfsi+0x56>
 7a4:	90 95       	com	r25
 7a6:	80 95       	com	r24
 7a8:	70 95       	com	r23
 7aa:	61 95       	neg	r22
 7ac:	7f 4f       	sbci	r23, 0xFF	; 255
 7ae:	8f 4f       	sbci	r24, 0xFF	; 255
 7b0:	9f 4f       	sbci	r25, 0xFF	; 255
 7b2:	08 95       	ret

000007b4 <__fp_cmp>:
 7b4:	99 0f       	add	r25, r25
 7b6:	00 08       	sbc	r0, r0
 7b8:	55 0f       	add	r21, r21
 7ba:	aa 0b       	sbc	r26, r26
 7bc:	e0 e8       	ldi	r30, 0x80	; 128
 7be:	fe ef       	ldi	r31, 0xFE	; 254
 7c0:	16 16       	cp	r1, r22
 7c2:	17 06       	cpc	r1, r23
 7c4:	e8 07       	cpc	r30, r24
 7c6:	f9 07       	cpc	r31, r25
 7c8:	c0 f0       	brcs	.+48     	; 0x7fa <__fp_cmp+0x46>
 7ca:	12 16       	cp	r1, r18
 7cc:	13 06       	cpc	r1, r19
 7ce:	e4 07       	cpc	r30, r20
 7d0:	f5 07       	cpc	r31, r21
 7d2:	98 f0       	brcs	.+38     	; 0x7fa <__fp_cmp+0x46>
 7d4:	62 1b       	sub	r22, r18
 7d6:	73 0b       	sbc	r23, r19
 7d8:	84 0b       	sbc	r24, r20
 7da:	95 0b       	sbc	r25, r21
 7dc:	39 f4       	brne	.+14     	; 0x7ec <__fp_cmp+0x38>
 7de:	0a 26       	eor	r0, r26
 7e0:	61 f0       	breq	.+24     	; 0x7fa <__fp_cmp+0x46>
 7e2:	23 2b       	or	r18, r19
 7e4:	24 2b       	or	r18, r20
 7e6:	25 2b       	or	r18, r21
 7e8:	21 f4       	brne	.+8      	; 0x7f2 <__fp_cmp+0x3e>
 7ea:	08 95       	ret
 7ec:	0a 26       	eor	r0, r26
 7ee:	09 f4       	brne	.+2      	; 0x7f2 <__fp_cmp+0x3e>
 7f0:	a1 40       	sbci	r26, 0x01	; 1
 7f2:	a6 95       	lsr	r26
 7f4:	8f ef       	ldi	r24, 0xFF	; 255
 7f6:	81 1d       	adc	r24, r1
 7f8:	81 1d       	adc	r24, r1
 7fa:	08 95       	ret

000007fc <__fp_split3>:
 7fc:	57 fd       	sbrc	r21, 7
 7fe:	90 58       	subi	r25, 0x80	; 128
 800:	44 0f       	add	r20, r20
 802:	55 1f       	adc	r21, r21
 804:	59 f0       	breq	.+22     	; 0x81c <__fp_splitA+0x10>
 806:	5f 3f       	cpi	r21, 0xFF	; 255
 808:	71 f0       	breq	.+28     	; 0x826 <__fp_splitA+0x1a>
 80a:	47 95       	ror	r20

0000080c <__fp_splitA>:
 80c:	88 0f       	add	r24, r24
 80e:	97 fb       	bst	r25, 7
 810:	99 1f       	adc	r25, r25
 812:	61 f0       	breq	.+24     	; 0x82c <__fp_splitA+0x20>
 814:	9f 3f       	cpi	r25, 0xFF	; 255
 816:	79 f0       	breq	.+30     	; 0x836 <__fp_splitA+0x2a>
 818:	87 95       	ror	r24
 81a:	08 95       	ret
 81c:	12 16       	cp	r1, r18
 81e:	13 06       	cpc	r1, r19
 820:	14 06       	cpc	r1, r20
 822:	55 1f       	adc	r21, r21
 824:	f2 cf       	rjmp	.-28     	; 0x80a <__fp_split3+0xe>
 826:	46 95       	lsr	r20
 828:	f1 df       	rcall	.-30     	; 0x80c <__fp_splitA>
 82a:	08 c0       	rjmp	.+16     	; 0x83c <__fp_splitA+0x30>
 82c:	16 16       	cp	r1, r22
 82e:	17 06       	cpc	r1, r23
 830:	18 06       	cpc	r1, r24
 832:	99 1f       	adc	r25, r25
 834:	f1 cf       	rjmp	.-30     	; 0x818 <__fp_splitA+0xc>
 836:	86 95       	lsr	r24
 838:	71 05       	cpc	r23, r1
 83a:	61 05       	cpc	r22, r1
 83c:	08 94       	sec
 83e:	08 95       	ret

00000840 <__fp_zero>:
 840:	e8 94       	clt

00000842 <__fp_szero>:
 842:	bb 27       	eor	r27, r27
 844:	66 27       	eor	r22, r22
 846:	77 27       	eor	r23, r23
 848:	cb 01       	movw	r24, r22
 84a:	97 f9       	bld	r25, 7
 84c:	08 95       	ret

0000084e <__gesf2>:
 84e:	b2 df       	rcall	.-156    	; 0x7b4 <__fp_cmp>
 850:	08 f4       	brcc	.+2      	; 0x854 <__gesf2+0x6>
 852:	8f ef       	ldi	r24, 0xFF	; 255
 854:	08 95       	ret

00000856 <__mulsf3>:
 856:	0b d0       	rcall	.+22     	; 0x86e <__mulsf3x>
 858:	78 c0       	rjmp	.+240    	; 0x94a <__fp_round>
 85a:	69 d0       	rcall	.+210    	; 0x92e <__fp_pscA>
 85c:	28 f0       	brcs	.+10     	; 0x868 <__mulsf3+0x12>
 85e:	6e d0       	rcall	.+220    	; 0x93c <__fp_pscB>
 860:	18 f0       	brcs	.+6      	; 0x868 <__mulsf3+0x12>
 862:	95 23       	and	r25, r21
 864:	09 f0       	breq	.+2      	; 0x868 <__mulsf3+0x12>
 866:	5a c0       	rjmp	.+180    	; 0x91c <__fp_inf>
 868:	5f c0       	rjmp	.+190    	; 0x928 <__fp_nan>
 86a:	11 24       	eor	r1, r1
 86c:	ea cf       	rjmp	.-44     	; 0x842 <__fp_szero>

0000086e <__mulsf3x>:
 86e:	c6 df       	rcall	.-116    	; 0x7fc <__fp_split3>
 870:	a0 f3       	brcs	.-24     	; 0x85a <__mulsf3+0x4>

00000872 <__mulsf3_pse>:
 872:	95 9f       	mul	r25, r21
 874:	d1 f3       	breq	.-12     	; 0x86a <__mulsf3+0x14>
 876:	95 0f       	add	r25, r21
 878:	50 e0       	ldi	r21, 0x00	; 0
 87a:	55 1f       	adc	r21, r21
 87c:	62 9f       	mul	r22, r18
 87e:	f0 01       	movw	r30, r0
 880:	72 9f       	mul	r23, r18
 882:	bb 27       	eor	r27, r27
 884:	f0 0d       	add	r31, r0
 886:	b1 1d       	adc	r27, r1
 888:	63 9f       	mul	r22, r19
 88a:	aa 27       	eor	r26, r26
 88c:	f0 0d       	add	r31, r0
 88e:	b1 1d       	adc	r27, r1
 890:	aa 1f       	adc	r26, r26
 892:	64 9f       	mul	r22, r20
 894:	66 27       	eor	r22, r22
 896:	b0 0d       	add	r27, r0
 898:	a1 1d       	adc	r26, r1
 89a:	66 1f       	adc	r22, r22
 89c:	82 9f       	mul	r24, r18
 89e:	22 27       	eor	r18, r18
 8a0:	b0 0d       	add	r27, r0
 8a2:	a1 1d       	adc	r26, r1
 8a4:	62 1f       	adc	r22, r18
 8a6:	73 9f       	mul	r23, r19
 8a8:	b0 0d       	add	r27, r0
 8aa:	a1 1d       	adc	r26, r1
 8ac:	62 1f       	adc	r22, r18
 8ae:	83 9f       	mul	r24, r19
 8b0:	a0 0d       	add	r26, r0
 8b2:	61 1d       	adc	r22, r1
 8b4:	22 1f       	adc	r18, r18
 8b6:	74 9f       	mul	r23, r20
 8b8:	33 27       	eor	r19, r19
 8ba:	a0 0d       	add	r26, r0
 8bc:	61 1d       	adc	r22, r1
 8be:	23 1f       	adc	r18, r19
 8c0:	84 9f       	mul	r24, r20
 8c2:	60 0d       	add	r22, r0
 8c4:	21 1d       	adc	r18, r1
 8c6:	82 2f       	mov	r24, r18
 8c8:	76 2f       	mov	r23, r22
 8ca:	6a 2f       	mov	r22, r26
 8cc:	11 24       	eor	r1, r1
 8ce:	9f 57       	subi	r25, 0x7F	; 127
 8d0:	50 40       	sbci	r21, 0x00	; 0
 8d2:	8a f0       	brmi	.+34     	; 0x8f6 <__mulsf3_pse+0x84>
 8d4:	e1 f0       	breq	.+56     	; 0x90e <__stack+0xf>
 8d6:	88 23       	and	r24, r24
 8d8:	4a f0       	brmi	.+18     	; 0x8ec <__mulsf3_pse+0x7a>
 8da:	ee 0f       	add	r30, r30
 8dc:	ff 1f       	adc	r31, r31
 8de:	bb 1f       	adc	r27, r27
 8e0:	66 1f       	adc	r22, r22
 8e2:	77 1f       	adc	r23, r23
 8e4:	88 1f       	adc	r24, r24
 8e6:	91 50       	subi	r25, 0x01	; 1
 8e8:	50 40       	sbci	r21, 0x00	; 0
 8ea:	a9 f7       	brne	.-22     	; 0x8d6 <__mulsf3_pse+0x64>
 8ec:	9e 3f       	cpi	r25, 0xFE	; 254
 8ee:	51 05       	cpc	r21, r1
 8f0:	70 f0       	brcs	.+28     	; 0x90e <__stack+0xf>
 8f2:	14 c0       	rjmp	.+40     	; 0x91c <__fp_inf>
 8f4:	a6 cf       	rjmp	.-180    	; 0x842 <__fp_szero>
 8f6:	5f 3f       	cpi	r21, 0xFF	; 255
 8f8:	ec f3       	brlt	.-6      	; 0x8f4 <__mulsf3_pse+0x82>
 8fa:	98 3e       	cpi	r25, 0xE8	; 232
 8fc:	dc f3       	brlt	.-10     	; 0x8f4 <__mulsf3_pse+0x82>
 8fe:	86 95       	lsr	r24
 900:	77 95       	ror	r23
 902:	67 95       	ror	r22
 904:	b7 95       	ror	r27
 906:	f7 95       	ror	r31
 908:	e7 95       	ror	r30
 90a:	9f 5f       	subi	r25, 0xFF	; 255
 90c:	c1 f7       	brne	.-16     	; 0x8fe <__mulsf3_pse+0x8c>
 90e:	fe 2b       	or	r31, r30
 910:	88 0f       	add	r24, r24
 912:	91 1d       	adc	r25, r1
 914:	96 95       	lsr	r25
 916:	87 95       	ror	r24
 918:	97 f9       	bld	r25, 7
 91a:	08 95       	ret

0000091c <__fp_inf>:
 91c:	97 f9       	bld	r25, 7
 91e:	9f 67       	ori	r25, 0x7F	; 127
 920:	80 e8       	ldi	r24, 0x80	; 128
 922:	70 e0       	ldi	r23, 0x00	; 0
 924:	60 e0       	ldi	r22, 0x00	; 0
 926:	08 95       	ret

00000928 <__fp_nan>:
 928:	9f ef       	ldi	r25, 0xFF	; 255
 92a:	80 ec       	ldi	r24, 0xC0	; 192
 92c:	08 95       	ret

0000092e <__fp_pscA>:
 92e:	00 24       	eor	r0, r0
 930:	0a 94       	dec	r0
 932:	16 16       	cp	r1, r22
 934:	17 06       	cpc	r1, r23
 936:	18 06       	cpc	r1, r24
 938:	09 06       	cpc	r0, r25
 93a:	08 95       	ret

0000093c <__fp_pscB>:
 93c:	00 24       	eor	r0, r0
 93e:	0a 94       	dec	r0
 940:	12 16       	cp	r1, r18
 942:	13 06       	cpc	r1, r19
 944:	14 06       	cpc	r1, r20
 946:	05 06       	cpc	r0, r21
 948:	08 95       	ret

0000094a <__fp_round>:
 94a:	09 2e       	mov	r0, r25
 94c:	03 94       	inc	r0
 94e:	00 0c       	add	r0, r0
 950:	11 f4       	brne	.+4      	; 0x956 <__fp_round+0xc>
 952:	88 23       	and	r24, r24
 954:	52 f0       	brmi	.+20     	; 0x96a <__fp_round+0x20>
 956:	bb 0f       	add	r27, r27
 958:	40 f4       	brcc	.+16     	; 0x96a <__fp_round+0x20>
 95a:	bf 2b       	or	r27, r31
 95c:	11 f4       	brne	.+4      	; 0x962 <__fp_round+0x18>
 95e:	60 ff       	sbrs	r22, 0
 960:	04 c0       	rjmp	.+8      	; 0x96a <__fp_round+0x20>
 962:	6f 5f       	subi	r22, 0xFF	; 255
 964:	7f 4f       	sbci	r23, 0xFF	; 255
 966:	8f 4f       	sbci	r24, 0xFF	; 255
 968:	9f 4f       	sbci	r25, 0xFF	; 255
 96a:	08 95       	ret

0000096c <__mulsi3>:
 96c:	db 01       	movw	r26, r22
 96e:	8f 93       	push	r24
 970:	9f 93       	push	r25
 972:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__muluhisi3>
 976:	bf 91       	pop	r27
 978:	af 91       	pop	r26
 97a:	a2 9f       	mul	r26, r18
 97c:	80 0d       	add	r24, r0
 97e:	91 1d       	adc	r25, r1
 980:	a3 9f       	mul	r26, r19
 982:	90 0d       	add	r25, r0
 984:	b2 9f       	mul	r27, r18
 986:	90 0d       	add	r25, r0
 988:	11 24       	eor	r1, r1
 98a:	08 95       	ret

0000098c <__udivmodsi4>:
 98c:	a1 e2       	ldi	r26, 0x21	; 33
 98e:	1a 2e       	mov	r1, r26
 990:	aa 1b       	sub	r26, r26
 992:	bb 1b       	sub	r27, r27
 994:	fd 01       	movw	r30, r26
 996:	0d c0       	rjmp	.+26     	; 0x9b2 <__udivmodsi4_ep>

00000998 <__udivmodsi4_loop>:
 998:	aa 1f       	adc	r26, r26
 99a:	bb 1f       	adc	r27, r27
 99c:	ee 1f       	adc	r30, r30
 99e:	ff 1f       	adc	r31, r31
 9a0:	a2 17       	cp	r26, r18
 9a2:	b3 07       	cpc	r27, r19
 9a4:	e4 07       	cpc	r30, r20
 9a6:	f5 07       	cpc	r31, r21
 9a8:	20 f0       	brcs	.+8      	; 0x9b2 <__udivmodsi4_ep>
 9aa:	a2 1b       	sub	r26, r18
 9ac:	b3 0b       	sbc	r27, r19
 9ae:	e4 0b       	sbc	r30, r20
 9b0:	f5 0b       	sbc	r31, r21

000009b2 <__udivmodsi4_ep>:
 9b2:	66 1f       	adc	r22, r22
 9b4:	77 1f       	adc	r23, r23
 9b6:	88 1f       	adc	r24, r24
 9b8:	99 1f       	adc	r25, r25
 9ba:	1a 94       	dec	r1
 9bc:	69 f7       	brne	.-38     	; 0x998 <__udivmodsi4_loop>
 9be:	60 95       	com	r22
 9c0:	70 95       	com	r23
 9c2:	80 95       	com	r24
 9c4:	90 95       	com	r25
 9c6:	9b 01       	movw	r18, r22
 9c8:	ac 01       	movw	r20, r24
 9ca:	bd 01       	movw	r22, r26
 9cc:	cf 01       	movw	r24, r30
 9ce:	08 95       	ret

000009d0 <__muluhisi3>:
 9d0:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__umulhisi3>
 9d4:	a5 9f       	mul	r26, r21
 9d6:	90 0d       	add	r25, r0
 9d8:	b4 9f       	mul	r27, r20
 9da:	90 0d       	add	r25, r0
 9dc:	a4 9f       	mul	r26, r20
 9de:	80 0d       	add	r24, r0
 9e0:	91 1d       	adc	r25, r1
 9e2:	11 24       	eor	r1, r1
 9e4:	08 95       	ret

000009e6 <__umulhisi3>:
 9e6:	a2 9f       	mul	r26, r18
 9e8:	b0 01       	movw	r22, r0
 9ea:	b3 9f       	mul	r27, r19
 9ec:	c0 01       	movw	r24, r0
 9ee:	a3 9f       	mul	r26, r19
 9f0:	70 0d       	add	r23, r0
 9f2:	81 1d       	adc	r24, r1
 9f4:	11 24       	eor	r1, r1
 9f6:	91 1d       	adc	r25, r1
 9f8:	b2 9f       	mul	r27, r18
 9fa:	70 0d       	add	r23, r0
 9fc:	81 1d       	adc	r24, r1
 9fe:	11 24       	eor	r1, r1
 a00:	91 1d       	adc	r25, r1
 a02:	08 95       	ret

00000a04 <memset>:
 a04:	dc 01       	movw	r26, r24
 a06:	01 c0       	rjmp	.+2      	; 0xa0a <memset+0x6>
 a08:	6d 93       	st	X+, r22
 a0a:	41 50       	subi	r20, 0x01	; 1
 a0c:	50 40       	sbci	r21, 0x00	; 0
 a0e:	e0 f7       	brcc	.-8      	; 0xa08 <memset+0x4>
 a10:	08 95       	ret

00000a12 <sprintf>:
 a12:	ae e0       	ldi	r26, 0x0E	; 14
 a14:	b0 e0       	ldi	r27, 0x00	; 0
 a16:	ef e0       	ldi	r30, 0x0F	; 15
 a18:	f5 e0       	ldi	r31, 0x05	; 5
 a1a:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <__prologue_saves__+0x1c>
 a1e:	0d 89       	ldd	r16, Y+21	; 0x15
 a20:	1e 89       	ldd	r17, Y+22	; 0x16
 a22:	86 e0       	ldi	r24, 0x06	; 6
 a24:	8c 83       	std	Y+4, r24	; 0x04
 a26:	1a 83       	std	Y+2, r17	; 0x02
 a28:	09 83       	std	Y+1, r16	; 0x01
 a2a:	8f ef       	ldi	r24, 0xFF	; 255
 a2c:	9f e7       	ldi	r25, 0x7F	; 127
 a2e:	9e 83       	std	Y+6, r25	; 0x06
 a30:	8d 83       	std	Y+5, r24	; 0x05
 a32:	ae 01       	movw	r20, r28
 a34:	47 5e       	subi	r20, 0xE7	; 231
 a36:	5f 4f       	sbci	r21, 0xFF	; 255
 a38:	6f 89       	ldd	r22, Y+23	; 0x17
 a3a:	78 8d       	ldd	r23, Y+24	; 0x18
 a3c:	ce 01       	movw	r24, r28
 a3e:	01 96       	adiw	r24, 0x01	; 1
 a40:	0e 94 2b 05 	call	0xa56	; 0xa56 <vfprintf>
 a44:	ef 81       	ldd	r30, Y+7	; 0x07
 a46:	f8 85       	ldd	r31, Y+8	; 0x08
 a48:	e0 0f       	add	r30, r16
 a4a:	f1 1f       	adc	r31, r17
 a4c:	10 82       	st	Z, r1
 a4e:	2e 96       	adiw	r28, 0x0e	; 14
 a50:	e4 e0       	ldi	r30, 0x04	; 4
 a52:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__epilogue_restores__+0x1c>

00000a56 <vfprintf>:
 a56:	ac e0       	ldi	r26, 0x0C	; 12
 a58:	b0 e0       	ldi	r27, 0x00	; 0
 a5a:	e1 e3       	ldi	r30, 0x31	; 49
 a5c:	f5 e0       	ldi	r31, 0x05	; 5
 a5e:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__prologue_saves__>
 a62:	7c 01       	movw	r14, r24
 a64:	6b 01       	movw	r12, r22
 a66:	8a 01       	movw	r16, r20
 a68:	fc 01       	movw	r30, r24
 a6a:	17 82       	std	Z+7, r1	; 0x07
 a6c:	16 82       	std	Z+6, r1	; 0x06
 a6e:	83 81       	ldd	r24, Z+3	; 0x03
 a70:	81 ff       	sbrs	r24, 1
 a72:	bd c1       	rjmp	.+890    	; 0xdee <vfprintf+0x398>
 a74:	ce 01       	movw	r24, r28
 a76:	01 96       	adiw	r24, 0x01	; 1
 a78:	4c 01       	movw	r8, r24
 a7a:	f7 01       	movw	r30, r14
 a7c:	93 81       	ldd	r25, Z+3	; 0x03
 a7e:	f6 01       	movw	r30, r12
 a80:	93 fd       	sbrc	r25, 3
 a82:	85 91       	lpm	r24, Z+
 a84:	93 ff       	sbrs	r25, 3
 a86:	81 91       	ld	r24, Z+
 a88:	6f 01       	movw	r12, r30
 a8a:	88 23       	and	r24, r24
 a8c:	09 f4       	brne	.+2      	; 0xa90 <vfprintf+0x3a>
 a8e:	ab c1       	rjmp	.+854    	; 0xde6 <vfprintf+0x390>
 a90:	85 32       	cpi	r24, 0x25	; 37
 a92:	39 f4       	brne	.+14     	; 0xaa2 <vfprintf+0x4c>
 a94:	93 fd       	sbrc	r25, 3
 a96:	85 91       	lpm	r24, Z+
 a98:	93 ff       	sbrs	r25, 3
 a9a:	81 91       	ld	r24, Z+
 a9c:	6f 01       	movw	r12, r30
 a9e:	85 32       	cpi	r24, 0x25	; 37
 aa0:	29 f4       	brne	.+10     	; 0xaac <vfprintf+0x56>
 aa2:	b7 01       	movw	r22, r14
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 aaa:	e7 cf       	rjmp	.-50     	; 0xa7a <vfprintf+0x24>
 aac:	51 2c       	mov	r5, r1
 aae:	31 2c       	mov	r3, r1
 ab0:	20 e0       	ldi	r18, 0x00	; 0
 ab2:	20 32       	cpi	r18, 0x20	; 32
 ab4:	a0 f4       	brcc	.+40     	; 0xade <vfprintf+0x88>
 ab6:	8b 32       	cpi	r24, 0x2B	; 43
 ab8:	69 f0       	breq	.+26     	; 0xad4 <vfprintf+0x7e>
 aba:	30 f4       	brcc	.+12     	; 0xac8 <vfprintf+0x72>
 abc:	80 32       	cpi	r24, 0x20	; 32
 abe:	59 f0       	breq	.+22     	; 0xad6 <vfprintf+0x80>
 ac0:	83 32       	cpi	r24, 0x23	; 35
 ac2:	69 f4       	brne	.+26     	; 0xade <vfprintf+0x88>
 ac4:	20 61       	ori	r18, 0x10	; 16
 ac6:	2c c0       	rjmp	.+88     	; 0xb20 <vfprintf+0xca>
 ac8:	8d 32       	cpi	r24, 0x2D	; 45
 aca:	39 f0       	breq	.+14     	; 0xada <vfprintf+0x84>
 acc:	80 33       	cpi	r24, 0x30	; 48
 ace:	39 f4       	brne	.+14     	; 0xade <vfprintf+0x88>
 ad0:	21 60       	ori	r18, 0x01	; 1
 ad2:	26 c0       	rjmp	.+76     	; 0xb20 <vfprintf+0xca>
 ad4:	22 60       	ori	r18, 0x02	; 2
 ad6:	24 60       	ori	r18, 0x04	; 4
 ad8:	23 c0       	rjmp	.+70     	; 0xb20 <vfprintf+0xca>
 ada:	28 60       	ori	r18, 0x08	; 8
 adc:	21 c0       	rjmp	.+66     	; 0xb20 <vfprintf+0xca>
 ade:	27 fd       	sbrc	r18, 7
 ae0:	27 c0       	rjmp	.+78     	; 0xb30 <vfprintf+0xda>
 ae2:	30 ed       	ldi	r19, 0xD0	; 208
 ae4:	38 0f       	add	r19, r24
 ae6:	3a 30       	cpi	r19, 0x0A	; 10
 ae8:	78 f4       	brcc	.+30     	; 0xb08 <vfprintf+0xb2>
 aea:	26 ff       	sbrs	r18, 6
 aec:	06 c0       	rjmp	.+12     	; 0xafa <vfprintf+0xa4>
 aee:	fa e0       	ldi	r31, 0x0A	; 10
 af0:	5f 9e       	mul	r5, r31
 af2:	30 0d       	add	r19, r0
 af4:	11 24       	eor	r1, r1
 af6:	53 2e       	mov	r5, r19
 af8:	13 c0       	rjmp	.+38     	; 0xb20 <vfprintf+0xca>
 afa:	8a e0       	ldi	r24, 0x0A	; 10
 afc:	38 9e       	mul	r3, r24
 afe:	30 0d       	add	r19, r0
 b00:	11 24       	eor	r1, r1
 b02:	33 2e       	mov	r3, r19
 b04:	20 62       	ori	r18, 0x20	; 32
 b06:	0c c0       	rjmp	.+24     	; 0xb20 <vfprintf+0xca>
 b08:	8e 32       	cpi	r24, 0x2E	; 46
 b0a:	21 f4       	brne	.+8      	; 0xb14 <vfprintf+0xbe>
 b0c:	26 fd       	sbrc	r18, 6
 b0e:	6b c1       	rjmp	.+726    	; 0xde6 <vfprintf+0x390>
 b10:	20 64       	ori	r18, 0x40	; 64
 b12:	06 c0       	rjmp	.+12     	; 0xb20 <vfprintf+0xca>
 b14:	8c 36       	cpi	r24, 0x6C	; 108
 b16:	11 f4       	brne	.+4      	; 0xb1c <vfprintf+0xc6>
 b18:	20 68       	ori	r18, 0x80	; 128
 b1a:	02 c0       	rjmp	.+4      	; 0xb20 <vfprintf+0xca>
 b1c:	88 36       	cpi	r24, 0x68	; 104
 b1e:	41 f4       	brne	.+16     	; 0xb30 <vfprintf+0xda>
 b20:	f6 01       	movw	r30, r12
 b22:	93 fd       	sbrc	r25, 3
 b24:	85 91       	lpm	r24, Z+
 b26:	93 ff       	sbrs	r25, 3
 b28:	81 91       	ld	r24, Z+
 b2a:	6f 01       	movw	r12, r30
 b2c:	81 11       	cpse	r24, r1
 b2e:	c1 cf       	rjmp	.-126    	; 0xab2 <vfprintf+0x5c>
 b30:	98 2f       	mov	r25, r24
 b32:	9f 7d       	andi	r25, 0xDF	; 223
 b34:	95 54       	subi	r25, 0x45	; 69
 b36:	93 30       	cpi	r25, 0x03	; 3
 b38:	28 f4       	brcc	.+10     	; 0xb44 <vfprintf+0xee>
 b3a:	0c 5f       	subi	r16, 0xFC	; 252
 b3c:	1f 4f       	sbci	r17, 0xFF	; 255
 b3e:	ff e3       	ldi	r31, 0x3F	; 63
 b40:	f9 83       	std	Y+1, r31	; 0x01
 b42:	0d c0       	rjmp	.+26     	; 0xb5e <vfprintf+0x108>
 b44:	83 36       	cpi	r24, 0x63	; 99
 b46:	31 f0       	breq	.+12     	; 0xb54 <vfprintf+0xfe>
 b48:	83 37       	cpi	r24, 0x73	; 115
 b4a:	71 f0       	breq	.+28     	; 0xb68 <vfprintf+0x112>
 b4c:	83 35       	cpi	r24, 0x53	; 83
 b4e:	09 f0       	breq	.+2      	; 0xb52 <vfprintf+0xfc>
 b50:	5b c0       	rjmp	.+182    	; 0xc08 <vfprintf+0x1b2>
 b52:	22 c0       	rjmp	.+68     	; 0xb98 <vfprintf+0x142>
 b54:	f8 01       	movw	r30, r16
 b56:	80 81       	ld	r24, Z
 b58:	89 83       	std	Y+1, r24	; 0x01
 b5a:	0e 5f       	subi	r16, 0xFE	; 254
 b5c:	1f 4f       	sbci	r17, 0xFF	; 255
 b5e:	44 24       	eor	r4, r4
 b60:	43 94       	inc	r4
 b62:	51 2c       	mov	r5, r1
 b64:	54 01       	movw	r10, r8
 b66:	15 c0       	rjmp	.+42     	; 0xb92 <vfprintf+0x13c>
 b68:	38 01       	movw	r6, r16
 b6a:	f2 e0       	ldi	r31, 0x02	; 2
 b6c:	6f 0e       	add	r6, r31
 b6e:	71 1c       	adc	r7, r1
 b70:	f8 01       	movw	r30, r16
 b72:	a0 80       	ld	r10, Z
 b74:	b1 80       	ldd	r11, Z+1	; 0x01
 b76:	26 ff       	sbrs	r18, 6
 b78:	03 c0       	rjmp	.+6      	; 0xb80 <vfprintf+0x12a>
 b7a:	65 2d       	mov	r22, r5
 b7c:	70 e0       	ldi	r23, 0x00	; 0
 b7e:	02 c0       	rjmp	.+4      	; 0xb84 <vfprintf+0x12e>
 b80:	6f ef       	ldi	r22, 0xFF	; 255
 b82:	7f ef       	ldi	r23, 0xFF	; 255
 b84:	c5 01       	movw	r24, r10
 b86:	2c 87       	std	Y+12, r18	; 0x0c
 b88:	0e 94 08 07 	call	0xe10	; 0xe10 <strnlen>
 b8c:	2c 01       	movw	r4, r24
 b8e:	83 01       	movw	r16, r6
 b90:	2c 85       	ldd	r18, Y+12	; 0x0c
 b92:	2f 77       	andi	r18, 0x7F	; 127
 b94:	22 2e       	mov	r2, r18
 b96:	17 c0       	rjmp	.+46     	; 0xbc6 <vfprintf+0x170>
 b98:	38 01       	movw	r6, r16
 b9a:	f2 e0       	ldi	r31, 0x02	; 2
 b9c:	6f 0e       	add	r6, r31
 b9e:	71 1c       	adc	r7, r1
 ba0:	f8 01       	movw	r30, r16
 ba2:	a0 80       	ld	r10, Z
 ba4:	b1 80       	ldd	r11, Z+1	; 0x01
 ba6:	26 ff       	sbrs	r18, 6
 ba8:	03 c0       	rjmp	.+6      	; 0xbb0 <vfprintf+0x15a>
 baa:	65 2d       	mov	r22, r5
 bac:	70 e0       	ldi	r23, 0x00	; 0
 bae:	02 c0       	rjmp	.+4      	; 0xbb4 <vfprintf+0x15e>
 bb0:	6f ef       	ldi	r22, 0xFF	; 255
 bb2:	7f ef       	ldi	r23, 0xFF	; 255
 bb4:	c5 01       	movw	r24, r10
 bb6:	2c 87       	std	Y+12, r18	; 0x0c
 bb8:	0e 94 fd 06 	call	0xdfa	; 0xdfa <strnlen_P>
 bbc:	2c 01       	movw	r4, r24
 bbe:	2c 85       	ldd	r18, Y+12	; 0x0c
 bc0:	20 68       	ori	r18, 0x80	; 128
 bc2:	22 2e       	mov	r2, r18
 bc4:	83 01       	movw	r16, r6
 bc6:	23 fc       	sbrc	r2, 3
 bc8:	1b c0       	rjmp	.+54     	; 0xc00 <vfprintf+0x1aa>
 bca:	83 2d       	mov	r24, r3
 bcc:	90 e0       	ldi	r25, 0x00	; 0
 bce:	48 16       	cp	r4, r24
 bd0:	59 06       	cpc	r5, r25
 bd2:	b0 f4       	brcc	.+44     	; 0xc00 <vfprintf+0x1aa>
 bd4:	b7 01       	movw	r22, r14
 bd6:	80 e2       	ldi	r24, 0x20	; 32
 bd8:	90 e0       	ldi	r25, 0x00	; 0
 bda:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 bde:	3a 94       	dec	r3
 be0:	f4 cf       	rjmp	.-24     	; 0xbca <vfprintf+0x174>
 be2:	f5 01       	movw	r30, r10
 be4:	27 fc       	sbrc	r2, 7
 be6:	85 91       	lpm	r24, Z+
 be8:	27 fe       	sbrs	r2, 7
 bea:	81 91       	ld	r24, Z+
 bec:	5f 01       	movw	r10, r30
 bee:	b7 01       	movw	r22, r14
 bf0:	90 e0       	ldi	r25, 0x00	; 0
 bf2:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 bf6:	31 10       	cpse	r3, r1
 bf8:	3a 94       	dec	r3
 bfa:	f1 e0       	ldi	r31, 0x01	; 1
 bfc:	4f 1a       	sub	r4, r31
 bfe:	51 08       	sbc	r5, r1
 c00:	41 14       	cp	r4, r1
 c02:	51 04       	cpc	r5, r1
 c04:	71 f7       	brne	.-36     	; 0xbe2 <vfprintf+0x18c>
 c06:	e5 c0       	rjmp	.+458    	; 0xdd2 <vfprintf+0x37c>
 c08:	84 36       	cpi	r24, 0x64	; 100
 c0a:	11 f0       	breq	.+4      	; 0xc10 <vfprintf+0x1ba>
 c0c:	89 36       	cpi	r24, 0x69	; 105
 c0e:	39 f5       	brne	.+78     	; 0xc5e <vfprintf+0x208>
 c10:	f8 01       	movw	r30, r16
 c12:	27 ff       	sbrs	r18, 7
 c14:	07 c0       	rjmp	.+14     	; 0xc24 <vfprintf+0x1ce>
 c16:	60 81       	ld	r22, Z
 c18:	71 81       	ldd	r23, Z+1	; 0x01
 c1a:	82 81       	ldd	r24, Z+2	; 0x02
 c1c:	93 81       	ldd	r25, Z+3	; 0x03
 c1e:	0c 5f       	subi	r16, 0xFC	; 252
 c20:	1f 4f       	sbci	r17, 0xFF	; 255
 c22:	08 c0       	rjmp	.+16     	; 0xc34 <vfprintf+0x1de>
 c24:	60 81       	ld	r22, Z
 c26:	71 81       	ldd	r23, Z+1	; 0x01
 c28:	88 27       	eor	r24, r24
 c2a:	77 fd       	sbrc	r23, 7
 c2c:	80 95       	com	r24
 c2e:	98 2f       	mov	r25, r24
 c30:	0e 5f       	subi	r16, 0xFE	; 254
 c32:	1f 4f       	sbci	r17, 0xFF	; 255
 c34:	2f 76       	andi	r18, 0x6F	; 111
 c36:	b2 2e       	mov	r11, r18
 c38:	97 ff       	sbrs	r25, 7
 c3a:	09 c0       	rjmp	.+18     	; 0xc4e <vfprintf+0x1f8>
 c3c:	90 95       	com	r25
 c3e:	80 95       	com	r24
 c40:	70 95       	com	r23
 c42:	61 95       	neg	r22
 c44:	7f 4f       	sbci	r23, 0xFF	; 255
 c46:	8f 4f       	sbci	r24, 0xFF	; 255
 c48:	9f 4f       	sbci	r25, 0xFF	; 255
 c4a:	20 68       	ori	r18, 0x80	; 128
 c4c:	b2 2e       	mov	r11, r18
 c4e:	2a e0       	ldi	r18, 0x0A	; 10
 c50:	30 e0       	ldi	r19, 0x00	; 0
 c52:	a4 01       	movw	r20, r8
 c54:	0e 94 45 07 	call	0xe8a	; 0xe8a <__ultoa_invert>
 c58:	a8 2e       	mov	r10, r24
 c5a:	a8 18       	sub	r10, r8
 c5c:	44 c0       	rjmp	.+136    	; 0xce6 <vfprintf+0x290>
 c5e:	85 37       	cpi	r24, 0x75	; 117
 c60:	29 f4       	brne	.+10     	; 0xc6c <vfprintf+0x216>
 c62:	2f 7e       	andi	r18, 0xEF	; 239
 c64:	b2 2e       	mov	r11, r18
 c66:	2a e0       	ldi	r18, 0x0A	; 10
 c68:	30 e0       	ldi	r19, 0x00	; 0
 c6a:	25 c0       	rjmp	.+74     	; 0xcb6 <vfprintf+0x260>
 c6c:	f2 2f       	mov	r31, r18
 c6e:	f9 7f       	andi	r31, 0xF9	; 249
 c70:	bf 2e       	mov	r11, r31
 c72:	8f 36       	cpi	r24, 0x6F	; 111
 c74:	c1 f0       	breq	.+48     	; 0xca6 <vfprintf+0x250>
 c76:	18 f4       	brcc	.+6      	; 0xc7e <vfprintf+0x228>
 c78:	88 35       	cpi	r24, 0x58	; 88
 c7a:	79 f0       	breq	.+30     	; 0xc9a <vfprintf+0x244>
 c7c:	b4 c0       	rjmp	.+360    	; 0xde6 <vfprintf+0x390>
 c7e:	80 37       	cpi	r24, 0x70	; 112
 c80:	19 f0       	breq	.+6      	; 0xc88 <vfprintf+0x232>
 c82:	88 37       	cpi	r24, 0x78	; 120
 c84:	21 f0       	breq	.+8      	; 0xc8e <vfprintf+0x238>
 c86:	af c0       	rjmp	.+350    	; 0xde6 <vfprintf+0x390>
 c88:	2f 2f       	mov	r18, r31
 c8a:	20 61       	ori	r18, 0x10	; 16
 c8c:	b2 2e       	mov	r11, r18
 c8e:	b4 fe       	sbrs	r11, 4
 c90:	0d c0       	rjmp	.+26     	; 0xcac <vfprintf+0x256>
 c92:	8b 2d       	mov	r24, r11
 c94:	84 60       	ori	r24, 0x04	; 4
 c96:	b8 2e       	mov	r11, r24
 c98:	09 c0       	rjmp	.+18     	; 0xcac <vfprintf+0x256>
 c9a:	24 ff       	sbrs	r18, 4
 c9c:	0a c0       	rjmp	.+20     	; 0xcb2 <vfprintf+0x25c>
 c9e:	9f 2f       	mov	r25, r31
 ca0:	96 60       	ori	r25, 0x06	; 6
 ca2:	b9 2e       	mov	r11, r25
 ca4:	06 c0       	rjmp	.+12     	; 0xcb2 <vfprintf+0x25c>
 ca6:	28 e0       	ldi	r18, 0x08	; 8
 ca8:	30 e0       	ldi	r19, 0x00	; 0
 caa:	05 c0       	rjmp	.+10     	; 0xcb6 <vfprintf+0x260>
 cac:	20 e1       	ldi	r18, 0x10	; 16
 cae:	30 e0       	ldi	r19, 0x00	; 0
 cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <vfprintf+0x260>
 cb2:	20 e1       	ldi	r18, 0x10	; 16
 cb4:	32 e0       	ldi	r19, 0x02	; 2
 cb6:	f8 01       	movw	r30, r16
 cb8:	b7 fe       	sbrs	r11, 7
 cba:	07 c0       	rjmp	.+14     	; 0xcca <vfprintf+0x274>
 cbc:	60 81       	ld	r22, Z
 cbe:	71 81       	ldd	r23, Z+1	; 0x01
 cc0:	82 81       	ldd	r24, Z+2	; 0x02
 cc2:	93 81       	ldd	r25, Z+3	; 0x03
 cc4:	0c 5f       	subi	r16, 0xFC	; 252
 cc6:	1f 4f       	sbci	r17, 0xFF	; 255
 cc8:	06 c0       	rjmp	.+12     	; 0xcd6 <vfprintf+0x280>
 cca:	60 81       	ld	r22, Z
 ccc:	71 81       	ldd	r23, Z+1	; 0x01
 cce:	80 e0       	ldi	r24, 0x00	; 0
 cd0:	90 e0       	ldi	r25, 0x00	; 0
 cd2:	0e 5f       	subi	r16, 0xFE	; 254
 cd4:	1f 4f       	sbci	r17, 0xFF	; 255
 cd6:	a4 01       	movw	r20, r8
 cd8:	0e 94 45 07 	call	0xe8a	; 0xe8a <__ultoa_invert>
 cdc:	a8 2e       	mov	r10, r24
 cde:	a8 18       	sub	r10, r8
 ce0:	fb 2d       	mov	r31, r11
 ce2:	ff 77       	andi	r31, 0x7F	; 127
 ce4:	bf 2e       	mov	r11, r31
 ce6:	b6 fe       	sbrs	r11, 6
 ce8:	0b c0       	rjmp	.+22     	; 0xd00 <vfprintf+0x2aa>
 cea:	2b 2d       	mov	r18, r11
 cec:	2e 7f       	andi	r18, 0xFE	; 254
 cee:	a5 14       	cp	r10, r5
 cf0:	50 f4       	brcc	.+20     	; 0xd06 <vfprintf+0x2b0>
 cf2:	b4 fe       	sbrs	r11, 4
 cf4:	0a c0       	rjmp	.+20     	; 0xd0a <vfprintf+0x2b4>
 cf6:	b2 fc       	sbrc	r11, 2
 cf8:	08 c0       	rjmp	.+16     	; 0xd0a <vfprintf+0x2b4>
 cfa:	2b 2d       	mov	r18, r11
 cfc:	2e 7e       	andi	r18, 0xEE	; 238
 cfe:	05 c0       	rjmp	.+10     	; 0xd0a <vfprintf+0x2b4>
 d00:	7a 2c       	mov	r7, r10
 d02:	2b 2d       	mov	r18, r11
 d04:	03 c0       	rjmp	.+6      	; 0xd0c <vfprintf+0x2b6>
 d06:	7a 2c       	mov	r7, r10
 d08:	01 c0       	rjmp	.+2      	; 0xd0c <vfprintf+0x2b6>
 d0a:	75 2c       	mov	r7, r5
 d0c:	24 ff       	sbrs	r18, 4
 d0e:	0d c0       	rjmp	.+26     	; 0xd2a <vfprintf+0x2d4>
 d10:	fe 01       	movw	r30, r28
 d12:	ea 0d       	add	r30, r10
 d14:	f1 1d       	adc	r31, r1
 d16:	80 81       	ld	r24, Z
 d18:	80 33       	cpi	r24, 0x30	; 48
 d1a:	11 f4       	brne	.+4      	; 0xd20 <vfprintf+0x2ca>
 d1c:	29 7e       	andi	r18, 0xE9	; 233
 d1e:	09 c0       	rjmp	.+18     	; 0xd32 <vfprintf+0x2dc>
 d20:	22 ff       	sbrs	r18, 2
 d22:	06 c0       	rjmp	.+12     	; 0xd30 <vfprintf+0x2da>
 d24:	73 94       	inc	r7
 d26:	73 94       	inc	r7
 d28:	04 c0       	rjmp	.+8      	; 0xd32 <vfprintf+0x2dc>
 d2a:	82 2f       	mov	r24, r18
 d2c:	86 78       	andi	r24, 0x86	; 134
 d2e:	09 f0       	breq	.+2      	; 0xd32 <vfprintf+0x2dc>
 d30:	73 94       	inc	r7
 d32:	23 fd       	sbrc	r18, 3
 d34:	13 c0       	rjmp	.+38     	; 0xd5c <vfprintf+0x306>
 d36:	20 ff       	sbrs	r18, 0
 d38:	06 c0       	rjmp	.+12     	; 0xd46 <vfprintf+0x2f0>
 d3a:	5a 2c       	mov	r5, r10
 d3c:	73 14       	cp	r7, r3
 d3e:	18 f4       	brcc	.+6      	; 0xd46 <vfprintf+0x2f0>
 d40:	53 0c       	add	r5, r3
 d42:	57 18       	sub	r5, r7
 d44:	73 2c       	mov	r7, r3
 d46:	73 14       	cp	r7, r3
 d48:	68 f4       	brcc	.+26     	; 0xd64 <vfprintf+0x30e>
 d4a:	b7 01       	movw	r22, r14
 d4c:	80 e2       	ldi	r24, 0x20	; 32
 d4e:	90 e0       	ldi	r25, 0x00	; 0
 d50:	2c 87       	std	Y+12, r18	; 0x0c
 d52:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 d56:	73 94       	inc	r7
 d58:	2c 85       	ldd	r18, Y+12	; 0x0c
 d5a:	f5 cf       	rjmp	.-22     	; 0xd46 <vfprintf+0x2f0>
 d5c:	73 14       	cp	r7, r3
 d5e:	10 f4       	brcc	.+4      	; 0xd64 <vfprintf+0x30e>
 d60:	37 18       	sub	r3, r7
 d62:	01 c0       	rjmp	.+2      	; 0xd66 <vfprintf+0x310>
 d64:	31 2c       	mov	r3, r1
 d66:	24 ff       	sbrs	r18, 4
 d68:	12 c0       	rjmp	.+36     	; 0xd8e <vfprintf+0x338>
 d6a:	b7 01       	movw	r22, r14
 d6c:	80 e3       	ldi	r24, 0x30	; 48
 d6e:	90 e0       	ldi	r25, 0x00	; 0
 d70:	2c 87       	std	Y+12, r18	; 0x0c
 d72:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 d76:	2c 85       	ldd	r18, Y+12	; 0x0c
 d78:	22 ff       	sbrs	r18, 2
 d7a:	17 c0       	rjmp	.+46     	; 0xdaa <vfprintf+0x354>
 d7c:	21 ff       	sbrs	r18, 1
 d7e:	03 c0       	rjmp	.+6      	; 0xd86 <vfprintf+0x330>
 d80:	88 e5       	ldi	r24, 0x58	; 88
 d82:	90 e0       	ldi	r25, 0x00	; 0
 d84:	02 c0       	rjmp	.+4      	; 0xd8a <vfprintf+0x334>
 d86:	88 e7       	ldi	r24, 0x78	; 120
 d88:	90 e0       	ldi	r25, 0x00	; 0
 d8a:	b7 01       	movw	r22, r14
 d8c:	0c c0       	rjmp	.+24     	; 0xda6 <vfprintf+0x350>
 d8e:	82 2f       	mov	r24, r18
 d90:	86 78       	andi	r24, 0x86	; 134
 d92:	59 f0       	breq	.+22     	; 0xdaa <vfprintf+0x354>
 d94:	21 fd       	sbrc	r18, 1
 d96:	02 c0       	rjmp	.+4      	; 0xd9c <vfprintf+0x346>
 d98:	80 e2       	ldi	r24, 0x20	; 32
 d9a:	01 c0       	rjmp	.+2      	; 0xd9e <vfprintf+0x348>
 d9c:	8b e2       	ldi	r24, 0x2B	; 43
 d9e:	27 fd       	sbrc	r18, 7
 da0:	8d e2       	ldi	r24, 0x2D	; 45
 da2:	b7 01       	movw	r22, r14
 da4:	90 e0       	ldi	r25, 0x00	; 0
 da6:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 daa:	a5 14       	cp	r10, r5
 dac:	38 f4       	brcc	.+14     	; 0xdbc <vfprintf+0x366>
 dae:	b7 01       	movw	r22, r14
 db0:	80 e3       	ldi	r24, 0x30	; 48
 db2:	90 e0       	ldi	r25, 0x00	; 0
 db4:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 db8:	5a 94       	dec	r5
 dba:	f7 cf       	rjmp	.-18     	; 0xdaa <vfprintf+0x354>
 dbc:	aa 94       	dec	r10
 dbe:	f4 01       	movw	r30, r8
 dc0:	ea 0d       	add	r30, r10
 dc2:	f1 1d       	adc	r31, r1
 dc4:	80 81       	ld	r24, Z
 dc6:	b7 01       	movw	r22, r14
 dc8:	90 e0       	ldi	r25, 0x00	; 0
 dca:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 dce:	a1 10       	cpse	r10, r1
 dd0:	f5 cf       	rjmp	.-22     	; 0xdbc <vfprintf+0x366>
 dd2:	33 20       	and	r3, r3
 dd4:	09 f4       	brne	.+2      	; 0xdd8 <vfprintf+0x382>
 dd6:	51 ce       	rjmp	.-862    	; 0xa7a <vfprintf+0x24>
 dd8:	b7 01       	movw	r22, r14
 dda:	80 e2       	ldi	r24, 0x20	; 32
 ddc:	90 e0       	ldi	r25, 0x00	; 0
 dde:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 de2:	3a 94       	dec	r3
 de4:	f6 cf       	rjmp	.-20     	; 0xdd2 <vfprintf+0x37c>
 de6:	f7 01       	movw	r30, r14
 de8:	86 81       	ldd	r24, Z+6	; 0x06
 dea:	97 81       	ldd	r25, Z+7	; 0x07
 dec:	02 c0       	rjmp	.+4      	; 0xdf2 <vfprintf+0x39c>
 dee:	8f ef       	ldi	r24, 0xFF	; 255
 df0:	9f ef       	ldi	r25, 0xFF	; 255
 df2:	2c 96       	adiw	r28, 0x0c	; 12
 df4:	e2 e1       	ldi	r30, 0x12	; 18
 df6:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__epilogue_restores__>

00000dfa <strnlen_P>:
 dfa:	fc 01       	movw	r30, r24
 dfc:	05 90       	lpm	r0, Z+
 dfe:	61 50       	subi	r22, 0x01	; 1
 e00:	70 40       	sbci	r23, 0x00	; 0
 e02:	01 10       	cpse	r0, r1
 e04:	d8 f7       	brcc	.-10     	; 0xdfc <strnlen_P+0x2>
 e06:	80 95       	com	r24
 e08:	90 95       	com	r25
 e0a:	8e 0f       	add	r24, r30
 e0c:	9f 1f       	adc	r25, r31
 e0e:	08 95       	ret

00000e10 <strnlen>:
 e10:	fc 01       	movw	r30, r24
 e12:	61 50       	subi	r22, 0x01	; 1
 e14:	70 40       	sbci	r23, 0x00	; 0
 e16:	01 90       	ld	r0, Z+
 e18:	01 10       	cpse	r0, r1
 e1a:	d8 f7       	brcc	.-10     	; 0xe12 <strnlen+0x2>
 e1c:	80 95       	com	r24
 e1e:	90 95       	com	r25
 e20:	8e 0f       	add	r24, r30
 e22:	9f 1f       	adc	r25, r31
 e24:	08 95       	ret

00000e26 <fputc>:
 e26:	0f 93       	push	r16
 e28:	1f 93       	push	r17
 e2a:	cf 93       	push	r28
 e2c:	df 93       	push	r29
 e2e:	18 2f       	mov	r17, r24
 e30:	09 2f       	mov	r16, r25
 e32:	eb 01       	movw	r28, r22
 e34:	8b 81       	ldd	r24, Y+3	; 0x03
 e36:	81 fd       	sbrc	r24, 1
 e38:	03 c0       	rjmp	.+6      	; 0xe40 <fputc+0x1a>
 e3a:	8f ef       	ldi	r24, 0xFF	; 255
 e3c:	9f ef       	ldi	r25, 0xFF	; 255
 e3e:	20 c0       	rjmp	.+64     	; 0xe80 <fputc+0x5a>
 e40:	82 ff       	sbrs	r24, 2
 e42:	10 c0       	rjmp	.+32     	; 0xe64 <fputc+0x3e>
 e44:	4e 81       	ldd	r20, Y+6	; 0x06
 e46:	5f 81       	ldd	r21, Y+7	; 0x07
 e48:	2c 81       	ldd	r18, Y+4	; 0x04
 e4a:	3d 81       	ldd	r19, Y+5	; 0x05
 e4c:	42 17       	cp	r20, r18
 e4e:	53 07       	cpc	r21, r19
 e50:	7c f4       	brge	.+30     	; 0xe70 <fputc+0x4a>
 e52:	e8 81       	ld	r30, Y
 e54:	f9 81       	ldd	r31, Y+1	; 0x01
 e56:	9f 01       	movw	r18, r30
 e58:	2f 5f       	subi	r18, 0xFF	; 255
 e5a:	3f 4f       	sbci	r19, 0xFF	; 255
 e5c:	39 83       	std	Y+1, r19	; 0x01
 e5e:	28 83       	st	Y, r18
 e60:	10 83       	st	Z, r17
 e62:	06 c0       	rjmp	.+12     	; 0xe70 <fputc+0x4a>
 e64:	e8 85       	ldd	r30, Y+8	; 0x08
 e66:	f9 85       	ldd	r31, Y+9	; 0x09
 e68:	81 2f       	mov	r24, r17
 e6a:	09 95       	icall
 e6c:	89 2b       	or	r24, r25
 e6e:	29 f7       	brne	.-54     	; 0xe3a <fputc+0x14>
 e70:	2e 81       	ldd	r18, Y+6	; 0x06
 e72:	3f 81       	ldd	r19, Y+7	; 0x07
 e74:	2f 5f       	subi	r18, 0xFF	; 255
 e76:	3f 4f       	sbci	r19, 0xFF	; 255
 e78:	3f 83       	std	Y+7, r19	; 0x07
 e7a:	2e 83       	std	Y+6, r18	; 0x06
 e7c:	81 2f       	mov	r24, r17
 e7e:	90 2f       	mov	r25, r16
 e80:	df 91       	pop	r29
 e82:	cf 91       	pop	r28
 e84:	1f 91       	pop	r17
 e86:	0f 91       	pop	r16
 e88:	08 95       	ret

00000e8a <__ultoa_invert>:
 e8a:	fa 01       	movw	r30, r20
 e8c:	aa 27       	eor	r26, r26
 e8e:	28 30       	cpi	r18, 0x08	; 8
 e90:	51 f1       	breq	.+84     	; 0xee6 <__ultoa_invert+0x5c>
 e92:	20 31       	cpi	r18, 0x10	; 16
 e94:	81 f1       	breq	.+96     	; 0xef6 <__ultoa_invert+0x6c>
 e96:	e8 94       	clt
 e98:	6f 93       	push	r22
 e9a:	6e 7f       	andi	r22, 0xFE	; 254
 e9c:	6e 5f       	subi	r22, 0xFE	; 254
 e9e:	7f 4f       	sbci	r23, 0xFF	; 255
 ea0:	8f 4f       	sbci	r24, 0xFF	; 255
 ea2:	9f 4f       	sbci	r25, 0xFF	; 255
 ea4:	af 4f       	sbci	r26, 0xFF	; 255
 ea6:	b1 e0       	ldi	r27, 0x01	; 1
 ea8:	3e d0       	rcall	.+124    	; 0xf26 <__ultoa_invert+0x9c>
 eaa:	b4 e0       	ldi	r27, 0x04	; 4
 eac:	3c d0       	rcall	.+120    	; 0xf26 <__ultoa_invert+0x9c>
 eae:	67 0f       	add	r22, r23
 eb0:	78 1f       	adc	r23, r24
 eb2:	89 1f       	adc	r24, r25
 eb4:	9a 1f       	adc	r25, r26
 eb6:	a1 1d       	adc	r26, r1
 eb8:	68 0f       	add	r22, r24
 eba:	79 1f       	adc	r23, r25
 ebc:	8a 1f       	adc	r24, r26
 ebe:	91 1d       	adc	r25, r1
 ec0:	a1 1d       	adc	r26, r1
 ec2:	6a 0f       	add	r22, r26
 ec4:	71 1d       	adc	r23, r1
 ec6:	81 1d       	adc	r24, r1
 ec8:	91 1d       	adc	r25, r1
 eca:	a1 1d       	adc	r26, r1
 ecc:	20 d0       	rcall	.+64     	; 0xf0e <__ultoa_invert+0x84>
 ece:	09 f4       	brne	.+2      	; 0xed2 <__ultoa_invert+0x48>
 ed0:	68 94       	set
 ed2:	3f 91       	pop	r19
 ed4:	2a e0       	ldi	r18, 0x0A	; 10
 ed6:	26 9f       	mul	r18, r22
 ed8:	11 24       	eor	r1, r1
 eda:	30 19       	sub	r19, r0
 edc:	30 5d       	subi	r19, 0xD0	; 208
 ede:	31 93       	st	Z+, r19
 ee0:	de f6       	brtc	.-74     	; 0xe98 <__ultoa_invert+0xe>
 ee2:	cf 01       	movw	r24, r30
 ee4:	08 95       	ret
 ee6:	46 2f       	mov	r20, r22
 ee8:	47 70       	andi	r20, 0x07	; 7
 eea:	40 5d       	subi	r20, 0xD0	; 208
 eec:	41 93       	st	Z+, r20
 eee:	b3 e0       	ldi	r27, 0x03	; 3
 ef0:	0f d0       	rcall	.+30     	; 0xf10 <__ultoa_invert+0x86>
 ef2:	c9 f7       	brne	.-14     	; 0xee6 <__ultoa_invert+0x5c>
 ef4:	f6 cf       	rjmp	.-20     	; 0xee2 <__ultoa_invert+0x58>
 ef6:	46 2f       	mov	r20, r22
 ef8:	4f 70       	andi	r20, 0x0F	; 15
 efa:	40 5d       	subi	r20, 0xD0	; 208
 efc:	4a 33       	cpi	r20, 0x3A	; 58
 efe:	18 f0       	brcs	.+6      	; 0xf06 <__ultoa_invert+0x7c>
 f00:	49 5d       	subi	r20, 0xD9	; 217
 f02:	31 fd       	sbrc	r19, 1
 f04:	40 52       	subi	r20, 0x20	; 32
 f06:	41 93       	st	Z+, r20
 f08:	02 d0       	rcall	.+4      	; 0xf0e <__ultoa_invert+0x84>
 f0a:	a9 f7       	brne	.-22     	; 0xef6 <__ultoa_invert+0x6c>
 f0c:	ea cf       	rjmp	.-44     	; 0xee2 <__ultoa_invert+0x58>
 f0e:	b4 e0       	ldi	r27, 0x04	; 4
 f10:	a6 95       	lsr	r26
 f12:	97 95       	ror	r25
 f14:	87 95       	ror	r24
 f16:	77 95       	ror	r23
 f18:	67 95       	ror	r22
 f1a:	ba 95       	dec	r27
 f1c:	c9 f7       	brne	.-14     	; 0xf10 <__ultoa_invert+0x86>
 f1e:	00 97       	sbiw	r24, 0x00	; 0
 f20:	61 05       	cpc	r22, r1
 f22:	71 05       	cpc	r23, r1
 f24:	08 95       	ret
 f26:	9b 01       	movw	r18, r22
 f28:	ac 01       	movw	r20, r24
 f2a:	0a 2e       	mov	r0, r26
 f2c:	06 94       	lsr	r0
 f2e:	57 95       	ror	r21
 f30:	47 95       	ror	r20
 f32:	37 95       	ror	r19
 f34:	27 95       	ror	r18
 f36:	ba 95       	dec	r27
 f38:	c9 f7       	brne	.-14     	; 0xf2c <__ultoa_invert+0xa2>
 f3a:	62 0f       	add	r22, r18
 f3c:	73 1f       	adc	r23, r19
 f3e:	84 1f       	adc	r24, r20
 f40:	95 1f       	adc	r25, r21
 f42:	a0 1d       	adc	r26, r0
 f44:	08 95       	ret

00000f46 <__prologue_saves__>:
 f46:	2f 92       	push	r2
 f48:	3f 92       	push	r3
 f4a:	4f 92       	push	r4
 f4c:	5f 92       	push	r5
 f4e:	6f 92       	push	r6
 f50:	7f 92       	push	r7
 f52:	8f 92       	push	r8
 f54:	9f 92       	push	r9
 f56:	af 92       	push	r10
 f58:	bf 92       	push	r11
 f5a:	cf 92       	push	r12
 f5c:	df 92       	push	r13
 f5e:	ef 92       	push	r14
 f60:	ff 92       	push	r15
 f62:	0f 93       	push	r16
 f64:	1f 93       	push	r17
 f66:	cf 93       	push	r28
 f68:	df 93       	push	r29
 f6a:	cd b7       	in	r28, 0x3d	; 61
 f6c:	de b7       	in	r29, 0x3e	; 62
 f6e:	ca 1b       	sub	r28, r26
 f70:	db 0b       	sbc	r29, r27
 f72:	0f b6       	in	r0, 0x3f	; 63
 f74:	f8 94       	cli
 f76:	de bf       	out	0x3e, r29	; 62
 f78:	0f be       	out	0x3f, r0	; 63
 f7a:	cd bf       	out	0x3d, r28	; 61
 f7c:	09 94       	ijmp

00000f7e <__epilogue_restores__>:
 f7e:	2a 88       	ldd	r2, Y+18	; 0x12
 f80:	39 88       	ldd	r3, Y+17	; 0x11
 f82:	48 88       	ldd	r4, Y+16	; 0x10
 f84:	5f 84       	ldd	r5, Y+15	; 0x0f
 f86:	6e 84       	ldd	r6, Y+14	; 0x0e
 f88:	7d 84       	ldd	r7, Y+13	; 0x0d
 f8a:	8c 84       	ldd	r8, Y+12	; 0x0c
 f8c:	9b 84       	ldd	r9, Y+11	; 0x0b
 f8e:	aa 84       	ldd	r10, Y+10	; 0x0a
 f90:	b9 84       	ldd	r11, Y+9	; 0x09
 f92:	c8 84       	ldd	r12, Y+8	; 0x08
 f94:	df 80       	ldd	r13, Y+7	; 0x07
 f96:	ee 80       	ldd	r14, Y+6	; 0x06
 f98:	fd 80       	ldd	r15, Y+5	; 0x05
 f9a:	0c 81       	ldd	r16, Y+4	; 0x04
 f9c:	1b 81       	ldd	r17, Y+3	; 0x03
 f9e:	aa 81       	ldd	r26, Y+2	; 0x02
 fa0:	b9 81       	ldd	r27, Y+1	; 0x01
 fa2:	ce 0f       	add	r28, r30
 fa4:	d1 1d       	adc	r29, r1
 fa6:	0f b6       	in	r0, 0x3f	; 63
 fa8:	f8 94       	cli
 faa:	de bf       	out	0x3e, r29	; 62
 fac:	0f be       	out	0x3f, r0	; 63
 fae:	cd bf       	out	0x3d, r28	; 61
 fb0:	ed 01       	movw	r28, r26
 fb2:	08 95       	ret

00000fb4 <_exit>:
 fb4:	f8 94       	cli

00000fb6 <__stop_program>:
 fb6:	ff cf       	rjmp	.-2      	; 0xfb6 <__stop_program>
