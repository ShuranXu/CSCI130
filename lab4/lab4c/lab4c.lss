
lab4c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800100  00001854  000018c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001854  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  000019d8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000c0  00000000  00000000  000019f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000846  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000265  00000000  00000000  000022f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000389  00000000  00000000  0000255b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001e0  00000000  00000000  000028e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000024b  00000000  00000000  00002ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000387  00000000  00000000  00002d0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	63 64       	ori	r22, 0x43	; 67
      6a:	69 6e       	ori	r22, 0xE9	; 233
      6c:	6f 70       	andi	r22, 0x0F	; 15
      6e:	73 75       	andi	r23, 0x53	; 83
      70:	78 58       	subi	r23, 0x88	; 136
      72:	5b 00       	.word	0x005b	; ????

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf ef       	ldi	r28, 0xFF	; 255
      7a:	d8 e0       	ldi	r29, 0x08	; 8
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	12 e0       	ldi	r17, 0x02	; 2
      82:	a0 e0       	ldi	r26, 0x00	; 0
      84:	b1 e0       	ldi	r27, 0x01	; 1
      86:	e4 e5       	ldi	r30, 0x54	; 84
      88:	f8 e1       	ldi	r31, 0x18	; 24
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	a0 31       	cpi	r26, 0x10	; 16
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>
      96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
      9a:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:
};
/*********************************************
	Main Function
**********************************************/

int main(int argc, char const *argv[]){
      a2:	cf 93       	push	r28
      a4:	df 93       	push	r29
      a6:	cd b7       	in	r28, 0x3d	; 61
      a8:	de b7       	in	r29, 0x3e	; 62
      aa:	2c 97       	sbiw	r28, 0x0c	; 12
      ac:	0f b6       	in	r0, 0x3f	; 63
      ae:	f8 94       	cli
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	0f be       	out	0x3f, r0	; 63
      b4:	cd bf       	out	0x3d, r28	; 61
      b6:	9a 87       	std	Y+10, r25	; 0x0a
      b8:	89 87       	std	Y+9, r24	; 0x09
      ba:	7c 87       	std	Y+12, r23	; 0x0c
      bc:	6b 87       	std	Y+11, r22	; 0x0b

	initUART(BAUD);
      be:	60 e8       	ldi	r22, 0x80	; 128
      c0:	75 e2       	ldi	r23, 0x25	; 37
      c2:	80 e0       	ldi	r24, 0x00	; 0
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <initUART>
	initADC();
      ca:	0e 94 bd 00 	call	0x17a	; 0x17a <initADC>

	uint32_t dout = 0;
      ce:	19 82       	std	Y+1, r1	; 0x01
      d0:	1a 82       	std	Y+2, r1	; 0x02
      d2:	1b 82       	std	Y+3, r1	; 0x03
      d4:	1c 82       	std	Y+4, r1	; 0x04
	float inputVol = 0.0;
      d6:	1d 82       	std	Y+5, r1	; 0x05
      d8:	1e 82       	std	Y+6, r1	; 0x06
      da:	1f 82       	std	Y+7, r1	; 0x07
      dc:	18 86       	std	Y+8, r1	; 0x08

	while(1){

		dout = (uint32_t)analog(0);  
      de:	80 e0       	ldi	r24, 0x00	; 0
      e0:	0e 94 3e 01 	call	0x27c	; 0x27c <analog>
      e4:	cc 01       	movw	r24, r24
      e6:	a0 e0       	ldi	r26, 0x00	; 0
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	89 83       	std	Y+1, r24	; 0x01
      ec:	9a 83       	std	Y+2, r25	; 0x02
      ee:	ab 83       	std	Y+3, r26	; 0x03
      f0:	bc 83       	std	Y+4, r27	; 0x04
		inputVol = roundNum(convertToInputVoltage(dout));
      f2:	89 81       	ldd	r24, Y+1	; 0x01
      f4:	9a 81       	ldd	r25, Y+2	; 0x02
      f6:	ab 81       	ldd	r26, Y+3	; 0x03
      f8:	bc 81       	ldd	r27, Y+4	; 0x04
      fa:	bc 01       	movw	r22, r24
      fc:	cd 01       	movw	r24, r26
      fe:	0e 94 96 02 	call	0x52c	; 0x52c <convertToInputVoltage>
     102:	dc 01       	movw	r26, r24
     104:	cb 01       	movw	r24, r22
     106:	bc 01       	movw	r22, r24
     108:	cd 01       	movw	r24, r26
     10a:	0e 94 82 03 	call	0x704	; 0x704 <roundNum>
     10e:	dc 01       	movw	r26, r24
     110:	cb 01       	movw	r24, r22
     112:	8d 83       	std	Y+5, r24	; 0x05
     114:	9e 83       	std	Y+6, r25	; 0x06
     116:	af 83       	std	Y+7, r26	; 0x07
     118:	b8 87       	std	Y+8, r27	; 0x08
		if( inputVol < 0.40 ){
     11a:	2d ec       	ldi	r18, 0xCD	; 205
     11c:	3c ec       	ldi	r19, 0xCC	; 204
     11e:	4c ec       	ldi	r20, 0xCC	; 204
     120:	5e e3       	ldi	r21, 0x3E	; 62
     122:	6d 81       	ldd	r22, Y+5	; 0x05
     124:	7e 81       	ldd	r23, Y+6	; 0x06
     126:	8f 81       	ldd	r24, Y+7	; 0x07
     128:	98 85       	ldd	r25, Y+8	; 0x08
     12a:	0e 94 42 04 	call	0x884	; 0x884 <__cmpsf2>
     12e:	88 23       	and	r24, r24
     130:	2c f4       	brge	.+10     	; 0x13c <main+0x9a>
			transmitString("unrecognizable distance");
     132:	80 ee       	ldi	r24, 0xE0	; 224
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	0e 94 9b 01 	call	0x336	; 0x336 <transmitString>
     13a:	18 c0       	rjmp	.+48     	; 0x16c <main+0xca>
		}
		else{
			transmitString("distance = ");
     13c:	88 ef       	ldi	r24, 0xF8	; 248
     13e:	91 e0       	ldi	r25, 0x01	; 1
     140:	0e 94 9b 01 	call	0x336	; 0x336 <transmitString>
			printUint32(getBestDistance(roundNum(inputVol)));
     144:	8d 81       	ldd	r24, Y+5	; 0x05
     146:	9e 81       	ldd	r25, Y+6	; 0x06
     148:	af 81       	ldd	r26, Y+7	; 0x07
     14a:	b8 85       	ldd	r27, Y+8	; 0x08
     14c:	bc 01       	movw	r22, r24
     14e:	cd 01       	movw	r24, r26
     150:	0e 94 82 03 	call	0x704	; 0x704 <roundNum>
     154:	dc 01       	movw	r26, r24
     156:	cb 01       	movw	r24, r22
     158:	bc 01       	movw	r22, r24
     15a:	cd 01       	movw	r24, r26
     15c:	0e 94 0d 03 	call	0x61a	; 0x61a <getBestDistance>
     160:	dc 01       	movw	r26, r24
     162:	cb 01       	movw	r24, r22
     164:	bc 01       	movw	r22, r24
     166:	cd 01       	movw	r24, r26
     168:	0e 94 57 02 	call	0x4ae	; 0x4ae <printUint32>
		}
		printCR();
     16c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <printCR>
		delayMs(500);
     170:	84 ef       	ldi	r24, 0xF4	; 244
     172:	91 e0       	ldi	r25, 0x01	; 1
     174:	0e 94 c0 01 	call	0x380	; 0x380 <delayMs>
	}
     178:	b2 cf       	rjmp	.-156    	; 0xde <main+0x3c>

0000017a <initADC>:
	1). Vref internally connect to AVcc
	2). Right adjusted for 8-bit resolution
	3). Disable digital buffer for analog input pins
*/

static void initADC(void){
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	cd b7       	in	r28, 0x3d	; 61
     180:	de b7       	in	r29, 0x3e	; 62

	ADCSRA = 0;
     182:	8a e7       	ldi	r24, 0x7A	; 122
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	fc 01       	movw	r30, r24
     188:	10 82       	st	Z, r1
	//enable ADC
	ADCSRA |= ( 1 << ADEN );
     18a:	8a e7       	ldi	r24, 0x7A	; 122
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	2a e7       	ldi	r18, 0x7A	; 122
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	f9 01       	movw	r30, r18
     194:	20 81       	ld	r18, Z
     196:	20 68       	ori	r18, 0x80	; 128
     198:	fc 01       	movw	r30, r24
     19a:	20 83       	st	Z, r18
	//Vref internally connect to AVcc
	ADMUX |= ( 1 << REFS0 );
     19c:	8c e7       	ldi	r24, 0x7C	; 124
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	2c e7       	ldi	r18, 0x7C	; 124
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	f9 01       	movw	r30, r18
     1a6:	20 81       	ld	r18, Z
     1a8:	20 64       	ori	r18, 0x40	; 64
     1aa:	fc 01       	movw	r30, r24
     1ac:	20 83       	st	Z, r18
	//right adjusted for 10-bit resolution
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     1ae:	8a e7       	ldi	r24, 0x7A	; 122
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	2a e7       	ldi	r18, 0x7A	; 122
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	f9 01       	movw	r30, r18
     1b8:	20 81       	ld	r18, Z
     1ba:	27 60       	ori	r18, 0x07	; 7
     1bc:	fc 01       	movw	r30, r24
     1be:	20 83       	st	Z, r18
	//disable digital input for ADC pins
	DIDR0 = 0;
     1c0:	8e e7       	ldi	r24, 0x7E	; 126
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	fc 01       	movw	r30, r24
     1c6:	10 82       	st	Z, r1
	DIDR0 |= ((1 << ADC5D) | (1 << ADC4D) | (1 << ADC3D) | (1 << ADC2D) | (1 << ADC1D) | (1 << ADC0D));
     1c8:	8e e7       	ldi	r24, 0x7E	; 126
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	2e e7       	ldi	r18, 0x7E	; 126
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	f9 01       	movw	r30, r18
     1d2:	20 81       	ld	r18, Z
     1d4:	2f 63       	ori	r18, 0x3F	; 63
     1d6:	fc 01       	movw	r30, r24
     1d8:	20 83       	st	Z, r18
	//start the first conversion
	ADCSRA |= (1 << ADSC);
     1da:	8a e7       	ldi	r24, 0x7A	; 122
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	2a e7       	ldi	r18, 0x7A	; 122
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	f9 01       	movw	r30, r18
     1e4:	20 81       	ld	r18, Z
     1e6:	20 64       	ori	r18, 0x40	; 64
     1e8:	fc 01       	movw	r30, r24
     1ea:	20 83       	st	Z, r18

	return;
     1ec:	00 00       	nop
}
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <initUART>:
/*
  Initialize settings for uart functions, the function runs the USART
in double speed mode.
*/ 

static void initUART(uint32_t baud){
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
     1fc:	2a 97       	sbiw	r28, 0x0a	; 10
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	f8 94       	cli
     202:	de bf       	out	0x3e, r29	; 62
     204:	0f be       	out	0x3f, r0	; 63
     206:	cd bf       	out	0x3d, r28	; 61
     208:	6b 83       	std	Y+3, r22	; 0x03
     20a:	7c 83       	std	Y+4, r23	; 0x04
     20c:	8d 83       	std	Y+5, r24	; 0x05
     20e:	9e 83       	std	Y+6, r25	; 0x06

   //double-speed mode UBRR formula
   unsigned int ubrr = F_CPU/8/baud -1;
     210:	80 e8       	ldi	r24, 0x80	; 128
     212:	94 e8       	ldi	r25, 0x84	; 132
     214:	ae e1       	ldi	r26, 0x1E	; 30
     216:	b0 e0       	ldi	r27, 0x00	; 0
     218:	2b 81       	ldd	r18, Y+3	; 0x03
     21a:	3c 81       	ldd	r19, Y+4	; 0x04
     21c:	4d 81       	ldd	r20, Y+5	; 0x05
     21e:	5e 81       	ldd	r21, Y+6	; 0x06
     220:	bc 01       	movw	r22, r24
     222:	cd 01       	movw	r24, r26
     224:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__udivmodsi4>
     228:	da 01       	movw	r26, r20
     22a:	c9 01       	movw	r24, r18
     22c:	01 97       	sbiw	r24, 0x01	; 1
     22e:	9a 83       	std	Y+2, r25	; 0x02
     230:	89 83       	std	Y+1, r24	; 0x01
   //shift MSB and store in UBRR0H 
   UBRR0H = (unsigned char) (ubrr >> 8); 
     232:	85 ec       	ldi	r24, 0xC5	; 197
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	29 81       	ldd	r18, Y+1	; 0x01
     238:	3a 81       	ldd	r19, Y+2	; 0x02
     23a:	23 2f       	mov	r18, r19
     23c:	33 27       	eor	r19, r19
     23e:	fc 01       	movw	r30, r24
     240:	20 83       	st	Z, r18
   //store LSB in UBRR0L      
   UBRR0L = (unsigned char) ubrr;
     242:	84 ec       	ldi	r24, 0xC4	; 196
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	29 81       	ldd	r18, Y+1	; 0x01
     248:	fc 01       	movw	r30, r24
     24a:	20 83       	st	Z, r18
   //enable double speed mode
   UCSR0A = (1 << U2X0);
     24c:	80 ec       	ldi	r24, 0xC0	; 192
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	22 e0       	ldi	r18, 0x02	; 2
     252:	fc 01       	movw	r30, r24
     254:	20 83       	st	Z, r18
   //enable transmitter/receiver 
   UCSR0B = (1 << RXEN0) | (1 << TXEN0);
     256:	81 ec       	ldi	r24, 0xC1	; 193
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	28 e1       	ldi	r18, 0x18	; 24
     25c:	fc 01       	movw	r30, r24
     25e:	20 83       	st	Z, r18
   //8-Bit Characters, 1 Stop bits, Even parity
   UCSR0C = (1 << UCSZ00) | (1 << UCSZ01) | (1 << UPM01);
     260:	82 ec       	ldi	r24, 0xC2	; 194
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	26 e2       	ldi	r18, 0x26	; 38
     266:	fc 01       	movw	r30, r24
     268:	20 83       	st	Z, r18
   
}
     26a:	2a 96       	adiw	r28, 0x0a	; 10
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	f8 94       	cli
     270:	de bf       	out	0x3e, r29	; 62
     272:	0f be       	out	0x3f, r0	; 63
     274:	cd bf       	out	0x3d, r28	; 61
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	08 95       	ret

0000027c <analog>:

/* 
	Analog to digital for 8-bit resolution
*/

static uint16_t analog(uint8_t channel){
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	1f 92       	push	r1
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
     286:	89 83       	std	Y+1, r24	; 0x01

	//clear MUX[3:0]
	ADMUX &= 0xF0; 
     288:	8c e7       	ldi	r24, 0x7C	; 124
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	2c e7       	ldi	r18, 0x7C	; 124
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	f9 01       	movw	r30, r18
     292:	20 81       	ld	r18, Z
     294:	20 7f       	andi	r18, 0xF0	; 240
     296:	fc 01       	movw	r30, r24
     298:	20 83       	st	Z, r18
	//select channel
	ADMUX |= channel; 
     29a:	8c e7       	ldi	r24, 0x7C	; 124
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	2c e7       	ldi	r18, 0x7C	; 124
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	f9 01       	movw	r30, r18
     2a4:	30 81       	ld	r19, Z
     2a6:	29 81       	ldd	r18, Y+1	; 0x01
     2a8:	23 2b       	or	r18, r19
     2aa:	fc 01       	movw	r30, r24
     2ac:	20 83       	st	Z, r18
	//start conversion
	ADCSRA |= (1 << ADSC);
     2ae:	8a e7       	ldi	r24, 0x7A	; 122
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	2a e7       	ldi	r18, 0x7A	; 122
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	f9 01       	movw	r30, r18
     2b8:	20 81       	ld	r18, Z
     2ba:	20 64       	ori	r18, 0x40	; 64
     2bc:	fc 01       	movw	r30, r24
     2be:	20 83       	st	Z, r18
	//wait for the conversion completed
	while(ADCSRA & ( 1 << ADSC));
     2c0:	00 00       	nop
     2c2:	8a e7       	ldi	r24, 0x7A	; 122
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	fc 01       	movw	r30, r24
     2c8:	80 81       	ld	r24, Z
     2ca:	88 2f       	mov	r24, r24
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	80 74       	andi	r24, 0x40	; 64
     2d0:	99 27       	eor	r25, r25
     2d2:	00 97       	sbiw	r24, 0x00	; 0
     2d4:	b1 f7       	brne	.-20     	; 0x2c2 <analog+0x46>
	return ADC;
     2d6:	88 e7       	ldi	r24, 0x78	; 120
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	fc 01       	movw	r30, r24
     2dc:	80 81       	ld	r24, Z
     2de:	91 81       	ldd	r25, Z+1	; 0x01
}
     2e0:	0f 90       	pop	r0
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <printCR>:

/* 
	print carriage return & newline
*/

static void printCR(void){
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	cd b7       	in	r28, 0x3d	; 61
     2ee:	de b7       	in	r29, 0x3e	; 62

	transmitByte((uint8_t)'\n');
     2f0:	8a e0       	ldi	r24, 0x0A	; 10
     2f2:	0e 94 81 01 	call	0x302	; 0x302 <transmitByte>
	transmitByte((uint8_t)'\r');
     2f6:	8d e0       	ldi	r24, 0x0D	; 13
     2f8:	0e 94 81 01 	call	0x302	; 0x302 <transmitByte>
}
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	08 95       	ret

00000302 <transmitByte>:

/*
   Write byte to UART
*/ 

static void transmitByte(uint8_t data){
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	1f 92       	push	r1
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
     30c:	89 83       	std	Y+1, r24	; 0x01

	// Wait for empty transmit buffer
   	while ( !(UCSR0A & (1 << UDRE0)) );
     30e:	00 00       	nop
     310:	80 ec       	ldi	r24, 0xC0	; 192
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	fc 01       	movw	r30, r24
     316:	80 81       	ld	r24, Z
     318:	88 2f       	mov	r24, r24
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	80 72       	andi	r24, 0x20	; 32
     31e:	99 27       	eor	r25, r25
     320:	00 97       	sbiw	r24, 0x00	; 0
     322:	b1 f3       	breq	.-20     	; 0x310 <transmitByte+0xe>
    // Start transmission by writing to UDR0 register
   	UDR0 = data;
     324:	86 ec       	ldi	r24, 0xC6	; 198
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	29 81       	ldd	r18, Y+1	; 0x01
     32a:	fc 01       	movw	r30, r24
     32c:	20 83       	st	Z, r18
}  
     32e:	0f 90       	pop	r0
     330:	df 91       	pop	r29
     332:	cf 91       	pop	r28
     334:	08 95       	ret

00000336 <transmitString>:

/*
	print a string in the serial console
*/

static void transmitString(char* stringPtr){
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	00 d0       	rcall	.+0      	; 0x33c <transmitString+0x6>
     33c:	00 d0       	rcall	.+0      	; 0x33e <transmitString+0x8>
     33e:	cd b7       	in	r28, 0x3d	; 61
     340:	de b7       	in	r29, 0x3e	; 62
     342:	9c 83       	std	Y+4, r25	; 0x04
     344:	8b 83       	std	Y+3, r24	; 0x03

	char* iter = stringPtr;
     346:	8b 81       	ldd	r24, Y+3	; 0x03
     348:	9c 81       	ldd	r25, Y+4	; 0x04
     34a:	9a 83       	std	Y+2, r25	; 0x02
     34c:	89 83       	std	Y+1, r24	; 0x01
	while(*iter != '\0'){
     34e:	0b c0       	rjmp	.+22     	; 0x366 <transmitString+0x30>
		transmitByte(*iter++);
     350:	89 81       	ldd	r24, Y+1	; 0x01
     352:	9a 81       	ldd	r25, Y+2	; 0x02
     354:	9c 01       	movw	r18, r24
     356:	2f 5f       	subi	r18, 0xFF	; 255
     358:	3f 4f       	sbci	r19, 0xFF	; 255
     35a:	3a 83       	std	Y+2, r19	; 0x02
     35c:	29 83       	std	Y+1, r18	; 0x01
     35e:	fc 01       	movw	r30, r24
     360:	80 81       	ld	r24, Z
     362:	0e 94 81 01 	call	0x302	; 0x302 <transmitByte>
*/

static void transmitString(char* stringPtr){

	char* iter = stringPtr;
	while(*iter != '\0'){
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	9a 81       	ldd	r25, Y+2	; 0x02
     36a:	fc 01       	movw	r30, r24
     36c:	80 81       	ld	r24, Z
     36e:	88 23       	and	r24, r24
     370:	79 f7       	brne	.-34     	; 0x350 <transmitString+0x1a>
		transmitByte(*iter++);
	}
}
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	08 95       	ret

00000380 <delayMs>:

/*
	delay function
*/
static void delayMs (uint16_t ms) {
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
     388:	62 97       	sbiw	r28, 0x12	; 18
     38a:	0f b6       	in	r0, 0x3f	; 63
     38c:	f8 94       	cli
     38e:	de bf       	out	0x3e, r29	; 62
     390:	0f be       	out	0x3f, r0	; 63
     392:	cd bf       	out	0x3d, r28	; 61
     394:	9a 8b       	std	Y+18, r25	; 0x12
     396:	89 8b       	std	Y+17, r24	; 0x11

	uint16_t i;
	for (i = 0; i < ms; i++)
     398:	1a 82       	std	Y+2, r1	; 0x02
     39a:	19 82       	std	Y+1, r1	; 0x01
     39c:	77 c0       	rjmp	.+238    	; 0x48c <delayMs+0x10c>
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	a0 e8       	ldi	r26, 0x80	; 128
     3a4:	bf e3       	ldi	r27, 0x3F	; 63
     3a6:	8b 83       	std	Y+3, r24	; 0x03
     3a8:	9c 83       	std	Y+4, r25	; 0x04
     3aa:	ad 83       	std	Y+5, r26	; 0x05
     3ac:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	4a e7       	ldi	r20, 0x7A	; 122
     3b4:	55 e4       	ldi	r21, 0x45	; 69
     3b6:	6b 81       	ldd	r22, Y+3	; 0x03
     3b8:	7c 81       	ldd	r23, Y+4	; 0x04
     3ba:	8d 81       	ldd	r24, Y+5	; 0x05
     3bc:	9e 81       	ldd	r25, Y+6	; 0x06
     3be:	0e 94 90 05 	call	0xb20	; 0xb20 <__mulsf3>
     3c2:	dc 01       	movw	r26, r24
     3c4:	cb 01       	movw	r24, r22
     3c6:	8f 83       	std	Y+7, r24	; 0x07
     3c8:	98 87       	std	Y+8, r25	; 0x08
     3ca:	a9 87       	std	Y+9, r26	; 0x09
     3cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     3ce:	20 e0       	ldi	r18, 0x00	; 0
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	40 e8       	ldi	r20, 0x80	; 128
     3d4:	5f e3       	ldi	r21, 0x3F	; 63
     3d6:	6f 81       	ldd	r22, Y+7	; 0x07
     3d8:	78 85       	ldd	r23, Y+8	; 0x08
     3da:	89 85       	ldd	r24, Y+9	; 0x09
     3dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     3de:	0e 94 42 04 	call	0x884	; 0x884 <__cmpsf2>
     3e2:	88 23       	and	r24, r24
     3e4:	2c f4       	brge	.+10     	; 0x3f0 <delayMs+0x70>
		__ticks = 1;
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	9c 87       	std	Y+12, r25	; 0x0c
     3ec:	8b 87       	std	Y+11, r24	; 0x0b
     3ee:	3f c0       	rjmp	.+126    	; 0x46e <delayMs+0xee>
	else if (__tmp > 65535)
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	3f ef       	ldi	r19, 0xFF	; 255
     3f4:	4f e7       	ldi	r20, 0x7F	; 127
     3f6:	57 e4       	ldi	r21, 0x47	; 71
     3f8:	6f 81       	ldd	r22, Y+7	; 0x07
     3fa:	78 85       	ldd	r23, Y+8	; 0x08
     3fc:	89 85       	ldd	r24, Y+9	; 0x09
     3fe:	9a 85       	ldd	r25, Y+10	; 0x0a
     400:	0e 94 8c 05 	call	0xb18	; 0xb18 <__gesf2>
     404:	18 16       	cp	r1, r24
     406:	4c f5       	brge	.+82     	; 0x45a <delayMs+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	40 e2       	ldi	r20, 0x20	; 32
     40e:	51 e4       	ldi	r21, 0x41	; 65
     410:	6b 81       	ldd	r22, Y+3	; 0x03
     412:	7c 81       	ldd	r23, Y+4	; 0x04
     414:	8d 81       	ldd	r24, Y+5	; 0x05
     416:	9e 81       	ldd	r25, Y+6	; 0x06
     418:	0e 94 90 05 	call	0xb20	; 0xb20 <__mulsf3>
     41c:	dc 01       	movw	r26, r24
     41e:	cb 01       	movw	r24, r22
     420:	bc 01       	movw	r22, r24
     422:	cd 01       	movw	r24, r26
     424:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
     428:	dc 01       	movw	r26, r24
     42a:	cb 01       	movw	r24, r22
     42c:	9c 87       	std	Y+12, r25	; 0x0c
     42e:	8b 87       	std	Y+11, r24	; 0x0b
     430:	0f c0       	rjmp	.+30     	; 0x450 <delayMs+0xd0>
     432:	80 e9       	ldi	r24, 0x90	; 144
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	9e 87       	std	Y+14, r25	; 0x0e
     438:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     43a:	8d 85       	ldd	r24, Y+13	; 0x0d
     43c:	9e 85       	ldd	r25, Y+14	; 0x0e
     43e:	01 97       	sbiw	r24, 0x01	; 1
     440:	f1 f7       	brne	.-4      	; 0x43e <delayMs+0xbe>
     442:	9e 87       	std	Y+14, r25	; 0x0e
     444:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     446:	8b 85       	ldd	r24, Y+11	; 0x0b
     448:	9c 85       	ldd	r25, Y+12	; 0x0c
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	9c 87       	std	Y+12, r25	; 0x0c
     44e:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     450:	8b 85       	ldd	r24, Y+11	; 0x0b
     452:	9c 85       	ldd	r25, Y+12	; 0x0c
     454:	00 97       	sbiw	r24, 0x00	; 0
     456:	69 f7       	brne	.-38     	; 0x432 <delayMs+0xb2>
     458:	14 c0       	rjmp	.+40     	; 0x482 <delayMs+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     45a:	6f 81       	ldd	r22, Y+7	; 0x07
     45c:	78 85       	ldd	r23, Y+8	; 0x08
     45e:	89 85       	ldd	r24, Y+9	; 0x09
     460:	9a 85       	ldd	r25, Y+10	; 0x0a
     462:	0e 94 ae 04 	call	0x95c	; 0x95c <__fixunssfsi>
     466:	dc 01       	movw	r26, r24
     468:	cb 01       	movw	r24, r22
     46a:	9c 87       	std	Y+12, r25	; 0x0c
     46c:	8b 87       	std	Y+11, r24	; 0x0b
     46e:	8b 85       	ldd	r24, Y+11	; 0x0b
     470:	9c 85       	ldd	r25, Y+12	; 0x0c
     472:	98 8b       	std	Y+16, r25	; 0x10
     474:	8f 87       	std	Y+15, r24	; 0x0f
     476:	8f 85       	ldd	r24, Y+15	; 0x0f
     478:	98 89       	ldd	r25, Y+16	; 0x10
     47a:	01 97       	sbiw	r24, 0x01	; 1
     47c:	f1 f7       	brne	.-4      	; 0x47a <delayMs+0xfa>
     47e:	98 8b       	std	Y+16, r25	; 0x10
     480:	8f 87       	std	Y+15, r24	; 0x0f
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	9a 81       	ldd	r25, Y+2	; 0x02
     486:	01 96       	adiw	r24, 0x01	; 1
     488:	9a 83       	std	Y+2, r25	; 0x02
     48a:	89 83       	std	Y+1, r24	; 0x01
     48c:	29 81       	ldd	r18, Y+1	; 0x01
     48e:	3a 81       	ldd	r19, Y+2	; 0x02
     490:	89 89       	ldd	r24, Y+17	; 0x11
     492:	9a 89       	ldd	r25, Y+18	; 0x12
     494:	28 17       	cp	r18, r24
     496:	39 07       	cpc	r19, r25
     498:	08 f4       	brcc	.+2      	; 0x49c <delayMs+0x11c>
     49a:	81 cf       	rjmp	.-254    	; 0x39e <delayMs+0x1e>
		_delay_ms(1);	
}
     49c:	62 96       	adiw	r28, 0x12	; 18
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	de bf       	out	0x3e, r29	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	cd bf       	out	0x3d, r28	; 61
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <printUint32>:
/*
	Print a uint32_t number to the serial console. The negtive sign is printed if the number is negative.
	In addition, necessary character shifting is also performed for pretty formatting. 
*/

static void printUint32(uint32_t num){
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
     4b6:	29 97       	sbiw	r28, 0x09	; 9
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	f8 94       	cli
     4bc:	de bf       	out	0x3e, r29	; 62
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	cd bf       	out	0x3d, r28	; 61
     4c2:	6e 83       	std	Y+6, r22	; 0x06
     4c4:	7f 83       	std	Y+7, r23	; 0x07
     4c6:	88 87       	std	Y+8, r24	; 0x08
     4c8:	99 87       	std	Y+9, r25	; 0x09

	char str[5];
	memset(str,0,sizeof(str));
     4ca:	45 e0       	ldi	r20, 0x05	; 5
     4cc:	50 e0       	ldi	r21, 0x00	; 0
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	ce 01       	movw	r24, r28
     4d4:	01 96       	adiw	r24, 0x01	; 1
     4d6:	0e 94 15 06 	call	0xc2a	; 0xc2a <memset>
	sprintf(str,"%u",(unsigned int)num);
     4da:	8e 81       	ldd	r24, Y+6	; 0x06
     4dc:	9f 81       	ldd	r25, Y+7	; 0x07
     4de:	29 2f       	mov	r18, r25
     4e0:	2f 93       	push	r18
     4e2:	8f 93       	push	r24
     4e4:	84 e0       	ldi	r24, 0x04	; 4
     4e6:	92 e0       	ldi	r25, 0x02	; 2
     4e8:	89 2f       	mov	r24, r25
     4ea:	8f 93       	push	r24
     4ec:	84 e0       	ldi	r24, 0x04	; 4
     4ee:	92 e0       	ldi	r25, 0x02	; 2
     4f0:	8f 93       	push	r24
     4f2:	ce 01       	movw	r24, r28
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	89 2f       	mov	r24, r25
     4f8:	8f 93       	push	r24
     4fa:	ce 01       	movw	r24, r28
     4fc:	01 96       	adiw	r24, 0x01	; 1
     4fe:	8f 93       	push	r24
     500:	0e 94 1c 06 	call	0xc38	; 0xc38 <sprintf>
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
	str[4] = '\0';
     510:	1d 82       	std	Y+5, r1	; 0x05
	transmitString(str);
     512:	ce 01       	movw	r24, r28
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	0e 94 9b 01 	call	0x336	; 0x336 <transmitString>
}
     51a:	29 96       	adiw	r28, 0x09	; 9
     51c:	0f b6       	in	r0, 0x3f	; 63
     51e:	f8 94       	cli
     520:	de bf       	out	0x3e, r29	; 62
     522:	0f be       	out	0x3f, r0	; 63
     524:	cd bf       	out	0x3d, r28	; 61
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	08 95       	ret

0000052c <convertToInputVoltage>:

/*
	Obtain the input voltage value based on the ADC value
*/

static float convertToInputVoltage(uint32_t val){
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	00 d0       	rcall	.+0      	; 0x532 <convertToInputVoltage+0x6>
     532:	00 d0       	rcall	.+0      	; 0x534 <convertToInputVoltage+0x8>
     534:	cd b7       	in	r28, 0x3d	; 61
     536:	de b7       	in	r29, 0x3e	; 62
     538:	69 83       	std	Y+1, r22	; 0x01
     53a:	7a 83       	std	Y+2, r23	; 0x02
     53c:	8b 83       	std	Y+3, r24	; 0x03
     53e:	9c 83       	std	Y+4, r25	; 0x04

	return ((val * VCC_VAL * 1.0)/1024);
     540:	29 81       	ldd	r18, Y+1	; 0x01
     542:	3a 81       	ldd	r19, Y+2	; 0x02
     544:	4b 81       	ldd	r20, Y+3	; 0x03
     546:	5c 81       	ldd	r21, Y+4	; 0x04
     548:	da 01       	movw	r26, r20
     54a:	c9 01       	movw	r24, r18
     54c:	88 0f       	add	r24, r24
     54e:	99 1f       	adc	r25, r25
     550:	aa 1f       	adc	r26, r26
     552:	bb 1f       	adc	r27, r27
     554:	88 0f       	add	r24, r24
     556:	99 1f       	adc	r25, r25
     558:	aa 1f       	adc	r26, r26
     55a:	bb 1f       	adc	r27, r27
     55c:	82 0f       	add	r24, r18
     55e:	93 1f       	adc	r25, r19
     560:	a4 1f       	adc	r26, r20
     562:	b5 1f       	adc	r27, r21
     564:	bc 01       	movw	r22, r24
     566:	cd 01       	movw	r24, r26
     568:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__floatunsisf>
     56c:	dc 01       	movw	r26, r24
     56e:	cb 01       	movw	r24, r22
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	40 e8       	ldi	r20, 0x80	; 128
     576:	54 e4       	ldi	r21, 0x44	; 68
     578:	bc 01       	movw	r22, r24
     57a:	cd 01       	movw	r24, r26
     57c:	0e 94 46 04 	call	0x88c	; 0x88c <__divsf3>
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
}
     584:	bc 01       	movw	r22, r24
     586:	cd 01       	movw	r24, r26
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	08 95       	ret

00000596 <absDiff>:

/*
	Get the absolute difference between two variables.  
	This function is used for calculating offset to be used for indexing the lookup table.
*/
static float absDiff(float y, float x){
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	cd b7       	in	r28, 0x3d	; 61
     59c:	de b7       	in	r29, 0x3e	; 62
     59e:	28 97       	sbiw	r28, 0x08	; 8
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	de bf       	out	0x3e, r29	; 62
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	cd bf       	out	0x3d, r28	; 61
     5aa:	69 83       	std	Y+1, r22	; 0x01
     5ac:	7a 83       	std	Y+2, r23	; 0x02
     5ae:	8b 83       	std	Y+3, r24	; 0x03
     5b0:	9c 83       	std	Y+4, r25	; 0x04
     5b2:	2d 83       	std	Y+5, r18	; 0x05
     5b4:	3e 83       	std	Y+6, r19	; 0x06
     5b6:	4f 83       	std	Y+7, r20	; 0x07
     5b8:	58 87       	std	Y+8, r21	; 0x08

	if( y > x){
     5ba:	2d 81       	ldd	r18, Y+5	; 0x05
     5bc:	3e 81       	ldd	r19, Y+6	; 0x06
     5be:	4f 81       	ldd	r20, Y+7	; 0x07
     5c0:	58 85       	ldd	r21, Y+8	; 0x08
     5c2:	69 81       	ldd	r22, Y+1	; 0x01
     5c4:	7a 81       	ldd	r23, Y+2	; 0x02
     5c6:	8b 81       	ldd	r24, Y+3	; 0x03
     5c8:	9c 81       	ldd	r25, Y+4	; 0x04
     5ca:	0e 94 8c 05 	call	0xb18	; 0xb18 <__gesf2>
     5ce:	18 16       	cp	r1, r24
     5d0:	6c f4       	brge	.+26     	; 0x5ec <absDiff+0x56>
		return (y - x);
     5d2:	2d 81       	ldd	r18, Y+5	; 0x05
     5d4:	3e 81       	ldd	r19, Y+6	; 0x06
     5d6:	4f 81       	ldd	r20, Y+7	; 0x07
     5d8:	58 85       	ldd	r21, Y+8	; 0x08
     5da:	69 81       	ldd	r22, Y+1	; 0x01
     5dc:	7a 81       	ldd	r23, Y+2	; 0x02
     5de:	8b 81       	ldd	r24, Y+3	; 0x03
     5e0:	9c 81       	ldd	r25, Y+4	; 0x04
     5e2:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__subsf3>
     5e6:	dc 01       	movw	r26, r24
     5e8:	cb 01       	movw	r24, r22
     5ea:	0c c0       	rjmp	.+24     	; 0x604 <absDiff+0x6e>
	}
	else{
		return (x - y);
     5ec:	29 81       	ldd	r18, Y+1	; 0x01
     5ee:	3a 81       	ldd	r19, Y+2	; 0x02
     5f0:	4b 81       	ldd	r20, Y+3	; 0x03
     5f2:	5c 81       	ldd	r21, Y+4	; 0x04
     5f4:	6d 81       	ldd	r22, Y+5	; 0x05
     5f6:	7e 81       	ldd	r23, Y+6	; 0x06
     5f8:	8f 81       	ldd	r24, Y+7	; 0x07
     5fa:	98 85       	ldd	r25, Y+8	; 0x08
     5fc:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__subsf3>
     600:	dc 01       	movw	r26, r24
     602:	cb 01       	movw	r24, r22
	}
}
     604:	bc 01       	movw	r22, r24
     606:	cd 01       	movw	r24, r26
     608:	28 96       	adiw	r28, 0x08	; 8
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	f8 94       	cli
     60e:	de bf       	out	0x3e, r29	; 62
     610:	0f be       	out	0x3f, r0	; 63
     612:	cd bf       	out	0x3d, r28	; 61
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	08 95       	ret

0000061a <getBestDistance>:

/*
	Get the distance value that fits the input voltage value.
*/

static uint32_t getBestDistance(float voltage){
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	cd b7       	in	r28, 0x3d	; 61
     620:	de b7       	in	r29, 0x3e	; 62
     622:	60 97       	sbiw	r28, 0x10	; 16
     624:	0f b6       	in	r0, 0x3f	; 63
     626:	f8 94       	cli
     628:	de bf       	out	0x3e, r29	; 62
     62a:	0f be       	out	0x3f, r0	; 63
     62c:	cd bf       	out	0x3d, r28	; 61
     62e:	6d 87       	std	Y+13, r22	; 0x0d
     630:	7e 87       	std	Y+14, r23	; 0x0e
     632:	8f 87       	std	Y+15, r24	; 0x0f
     634:	98 8b       	std	Y+16, r25	; 0x10

	int i;
	float minVal = 99; //initialize to be some big number
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	a6 ec       	ldi	r26, 0xC6	; 198
     63c:	b2 e4       	ldi	r27, 0x42	; 66
     63e:	8b 83       	std	Y+3, r24	; 0x03
     640:	9c 83       	std	Y+4, r25	; 0x04
     642:	ad 83       	std	Y+5, r26	; 0x05
     644:	be 83       	std	Y+6, r27	; 0x06
	float currDiff;
	int index = 0;
     646:	18 86       	std	Y+8, r1	; 0x08
     648:	1f 82       	std	Y+7, r1	; 0x07

	for(i=0;i<REGISTERED_NUM;++i){
     64a:	1a 82       	std	Y+2, r1	; 0x02
     64c:	19 82       	std	Y+1, r1	; 0x01
     64e:	3a c0       	rjmp	.+116    	; 0x6c4 <getBestDistance+0xaa>

		currDiff = absDiff(lookupTable[i].voltage,voltage);
     650:	89 81       	ldd	r24, Y+1	; 0x01
     652:	9a 81       	ldd	r25, Y+2	; 0x02
     654:	88 0f       	add	r24, r24
     656:	99 1f       	adc	r25, r25
     658:	88 0f       	add	r24, r24
     65a:	99 1f       	adc	r25, r25
     65c:	88 0f       	add	r24, r24
     65e:	99 1f       	adc	r25, r25
     660:	8c 5f       	subi	r24, 0xFC	; 252
     662:	9e 4f       	sbci	r25, 0xFE	; 254
     664:	fc 01       	movw	r30, r24
     666:	80 81       	ld	r24, Z
     668:	91 81       	ldd	r25, Z+1	; 0x01
     66a:	a2 81       	ldd	r26, Z+2	; 0x02
     66c:	b3 81       	ldd	r27, Z+3	; 0x03
     66e:	2d 85       	ldd	r18, Y+13	; 0x0d
     670:	3e 85       	ldd	r19, Y+14	; 0x0e
     672:	4f 85       	ldd	r20, Y+15	; 0x0f
     674:	58 89       	ldd	r21, Y+16	; 0x10
     676:	bc 01       	movw	r22, r24
     678:	cd 01       	movw	r24, r26
     67a:	0e 94 cb 02 	call	0x596	; 0x596 <absDiff>
     67e:	dc 01       	movw	r26, r24
     680:	cb 01       	movw	r24, r22
     682:	89 87       	std	Y+9, r24	; 0x09
     684:	9a 87       	std	Y+10, r25	; 0x0a
     686:	ab 87       	std	Y+11, r26	; 0x0b
     688:	bc 87       	std	Y+12, r27	; 0x0c
		if( minVal > currDiff){
     68a:	29 85       	ldd	r18, Y+9	; 0x09
     68c:	3a 85       	ldd	r19, Y+10	; 0x0a
     68e:	4b 85       	ldd	r20, Y+11	; 0x0b
     690:	5c 85       	ldd	r21, Y+12	; 0x0c
     692:	6b 81       	ldd	r22, Y+3	; 0x03
     694:	7c 81       	ldd	r23, Y+4	; 0x04
     696:	8d 81       	ldd	r24, Y+5	; 0x05
     698:	9e 81       	ldd	r25, Y+6	; 0x06
     69a:	0e 94 8c 05 	call	0xb18	; 0xb18 <__gesf2>
     69e:	18 16       	cp	r1, r24
     6a0:	64 f4       	brge	.+24     	; 0x6ba <getBestDistance+0xa0>
			minVal = currDiff;
     6a2:	89 85       	ldd	r24, Y+9	; 0x09
     6a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     6a6:	ab 85       	ldd	r26, Y+11	; 0x0b
     6a8:	bc 85       	ldd	r27, Y+12	; 0x0c
     6aa:	8b 83       	std	Y+3, r24	; 0x03
     6ac:	9c 83       	std	Y+4, r25	; 0x04
     6ae:	ad 83       	std	Y+5, r26	; 0x05
     6b0:	be 83       	std	Y+6, r27	; 0x06
			index = i;
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
     6b4:	9a 81       	ldd	r25, Y+2	; 0x02
     6b6:	98 87       	std	Y+8, r25	; 0x08
     6b8:	8f 83       	std	Y+7, r24	; 0x07
	int i;
	float minVal = 99; //initialize to be some big number
	float currDiff;
	int index = 0;

	for(i=0;i<REGISTERED_NUM;++i){
     6ba:	89 81       	ldd	r24, Y+1	; 0x01
     6bc:	9a 81       	ldd	r25, Y+2	; 0x02
     6be:	01 96       	adiw	r24, 0x01	; 1
     6c0:	9a 83       	std	Y+2, r25	; 0x02
     6c2:	89 83       	std	Y+1, r24	; 0x01
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
     6c6:	9a 81       	ldd	r25, Y+2	; 0x02
     6c8:	8c 31       	cpi	r24, 0x1C	; 28
     6ca:	91 05       	cpc	r25, r1
     6cc:	0c f4       	brge	.+2      	; 0x6d0 <getBestDistance+0xb6>
     6ce:	c0 cf       	rjmp	.-128    	; 0x650 <getBestDistance+0x36>
		if( minVal > currDiff){
			minVal = currDiff;
			index = i;
		}
	}
	return lookupTable[index].distance;
     6d0:	8f 81       	ldd	r24, Y+7	; 0x07
     6d2:	98 85       	ldd	r25, Y+8	; 0x08
     6d4:	88 0f       	add	r24, r24
     6d6:	99 1f       	adc	r25, r25
     6d8:	88 0f       	add	r24, r24
     6da:	99 1f       	adc	r25, r25
     6dc:	88 0f       	add	r24, r24
     6de:	99 1f       	adc	r25, r25
     6e0:	80 50       	subi	r24, 0x00	; 0
     6e2:	9f 4f       	sbci	r25, 0xFF	; 255
     6e4:	fc 01       	movw	r30, r24
     6e6:	80 81       	ld	r24, Z
     6e8:	91 81       	ldd	r25, Z+1	; 0x01
     6ea:	a2 81       	ldd	r26, Z+2	; 0x02
     6ec:	b3 81       	ldd	r27, Z+3	; 0x03
}
     6ee:	bc 01       	movw	r22, r24
     6f0:	cd 01       	movw	r24, r26
     6f2:	60 96       	adiw	r28, 0x10	; 16
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	f8 94       	cli
     6f8:	de bf       	out	0x3e, r29	; 62
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	cd bf       	out	0x3d, r28	; 61
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	08 95       	ret

00000704 <roundNum>:
/*
	Here we round the voltage input value with .2f precision
*/

static float roundNum(float var){
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
     70c:	ac 97       	sbiw	r28, 0x2c	; 44
     70e:	0f b6       	in	r0, 0x3f	; 63
     710:	f8 94       	cli
     712:	de bf       	out	0x3e, r29	; 62
     714:	0f be       	out	0x3f, r0	; 63
     716:	cd bf       	out	0x3d, r28	; 61
     718:	69 a7       	std	Y+41, r22	; 0x29
     71a:	7a a7       	std	Y+42, r23	; 0x2a
     71c:	8b a7       	std	Y+43, r24	; 0x2b
     71e:	9c a7       	std	Y+44, r25	; 0x2c

    // we use array of chars to store number as a string. 
    char str[40];  
    // Print in string the value of var with two decimal point 
    sprintf(str, "%.2f", var); 
     720:	89 a5       	ldd	r24, Y+41	; 0x29
     722:	9a a5       	ldd	r25, Y+42	; 0x2a
     724:	ab a5       	ldd	r26, Y+43	; 0x2b
     726:	bc a5       	ldd	r27, Y+44	; 0x2c
     728:	2b 2f       	mov	r18, r27
     72a:	2f 93       	push	r18
     72c:	2a 2f       	mov	r18, r26
     72e:	2f 93       	push	r18
     730:	29 2f       	mov	r18, r25
     732:	2f 93       	push	r18
     734:	8f 93       	push	r24
     736:	87 e0       	ldi	r24, 0x07	; 7
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	89 2f       	mov	r24, r25
     73c:	8f 93       	push	r24
     73e:	87 e0       	ldi	r24, 0x07	; 7
     740:	92 e0       	ldi	r25, 0x02	; 2
     742:	8f 93       	push	r24
     744:	ce 01       	movw	r24, r28
     746:	01 96       	adiw	r24, 0x01	; 1
     748:	89 2f       	mov	r24, r25
     74a:	8f 93       	push	r24
     74c:	ce 01       	movw	r24, r28
     74e:	01 96       	adiw	r24, 0x01	; 1
     750:	8f 93       	push	r24
     752:	0e 94 1c 06 	call	0xc38	; 0xc38 <sprintf>
     756:	8d b7       	in	r24, 0x3d	; 61
     758:	9e b7       	in	r25, 0x3e	; 62
     75a:	08 96       	adiw	r24, 0x08	; 8
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	de bf       	out	0x3e, r29	; 62
     762:	0f be       	out	0x3f, r0	; 63
     764:	cd bf       	out	0x3d, r28	; 61
    // scan string value in var  
    sscanf(str, "%f", &var);  
     766:	ce 01       	movw	r24, r28
     768:	89 96       	adiw	r24, 0x29	; 41
     76a:	29 2f       	mov	r18, r25
     76c:	2f 93       	push	r18
     76e:	8f 93       	push	r24
     770:	8c e0       	ldi	r24, 0x0C	; 12
     772:	92 e0       	ldi	r25, 0x02	; 2
     774:	89 2f       	mov	r24, r25
     776:	8f 93       	push	r24
     778:	8c e0       	ldi	r24, 0x0C	; 12
     77a:	92 e0       	ldi	r25, 0x02	; 2
     77c:	8f 93       	push	r24
     77e:	ce 01       	movw	r24, r28
     780:	01 96       	adiw	r24, 0x01	; 1
     782:	89 2f       	mov	r24, r25
     784:	8f 93       	push	r24
     786:	ce 01       	movw	r24, r28
     788:	01 96       	adiw	r24, 0x01	; 1
     78a:	8f 93       	push	r24
     78c:	0e 94 3e 06 	call	0xc7c	; 0xc7c <sscanf>
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	0f 90       	pop	r0
     798:	0f 90       	pop	r0
     79a:	0f 90       	pop	r0
  
    return var;  
     79c:	89 a5       	ldd	r24, Y+41	; 0x29
     79e:	9a a5       	ldd	r25, Y+42	; 0x2a
     7a0:	ab a5       	ldd	r26, Y+43	; 0x2b
     7a2:	bc a5       	ldd	r27, Y+44	; 0x2c
} 
     7a4:	bc 01       	movw	r22, r24
     7a6:	cd 01       	movw	r24, r26
     7a8:	ac 96       	adiw	r28, 0x2c	; 44
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	cd bf       	out	0x3d, r28	; 61
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	08 95       	ret

000007ba <__subsf3>:
     7ba:	50 58       	subi	r21, 0x80	; 128

000007bc <__addsf3>:
     7bc:	bb 27       	eor	r27, r27
     7be:	aa 27       	eor	r26, r26
     7c0:	0e d0       	rcall	.+28     	; 0x7de <__addsf3x>
     7c2:	70 c1       	rjmp	.+736    	; 0xaa4 <__fp_round>
     7c4:	61 d1       	rcall	.+706    	; 0xa88 <__fp_pscA>
     7c6:	30 f0       	brcs	.+12     	; 0x7d4 <__addsf3+0x18>
     7c8:	66 d1       	rcall	.+716    	; 0xa96 <__fp_pscB>
     7ca:	20 f0       	brcs	.+8      	; 0x7d4 <__addsf3+0x18>
     7cc:	31 f4       	brne	.+12     	; 0x7da <__addsf3+0x1e>
     7ce:	9f 3f       	cpi	r25, 0xFF	; 255
     7d0:	11 f4       	brne	.+4      	; 0x7d6 <__addsf3+0x1a>
     7d2:	1e f4       	brtc	.+6      	; 0x7da <__addsf3+0x1e>
     7d4:	56 c1       	rjmp	.+684    	; 0xa82 <__fp_nan>
     7d6:	0e f4       	brtc	.+2      	; 0x7da <__addsf3+0x1e>
     7d8:	e0 95       	com	r30
     7da:	e7 fb       	bst	r30, 7
     7dc:	4c c1       	rjmp	.+664    	; 0xa76 <__fp_inf>

000007de <__addsf3x>:
     7de:	e9 2f       	mov	r30, r25
     7e0:	72 d1       	rcall	.+740    	; 0xac6 <__fp_split3>
     7e2:	80 f3       	brcs	.-32     	; 0x7c4 <__addsf3+0x8>
     7e4:	ba 17       	cp	r27, r26
     7e6:	62 07       	cpc	r22, r18
     7e8:	73 07       	cpc	r23, r19
     7ea:	84 07       	cpc	r24, r20
     7ec:	95 07       	cpc	r25, r21
     7ee:	18 f0       	brcs	.+6      	; 0x7f6 <__addsf3x+0x18>
     7f0:	71 f4       	brne	.+28     	; 0x80e <__addsf3x+0x30>
     7f2:	9e f5       	brtc	.+102    	; 0x85a <__addsf3x+0x7c>
     7f4:	8a c1       	rjmp	.+788    	; 0xb0a <__fp_zero>
     7f6:	0e f4       	brtc	.+2      	; 0x7fa <__addsf3x+0x1c>
     7f8:	e0 95       	com	r30
     7fa:	0b 2e       	mov	r0, r27
     7fc:	ba 2f       	mov	r27, r26
     7fe:	a0 2d       	mov	r26, r0
     800:	0b 01       	movw	r0, r22
     802:	b9 01       	movw	r22, r18
     804:	90 01       	movw	r18, r0
     806:	0c 01       	movw	r0, r24
     808:	ca 01       	movw	r24, r20
     80a:	a0 01       	movw	r20, r0
     80c:	11 24       	eor	r1, r1
     80e:	ff 27       	eor	r31, r31
     810:	59 1b       	sub	r21, r25
     812:	99 f0       	breq	.+38     	; 0x83a <__addsf3x+0x5c>
     814:	59 3f       	cpi	r21, 0xF9	; 249
     816:	50 f4       	brcc	.+20     	; 0x82c <__addsf3x+0x4e>
     818:	50 3e       	cpi	r21, 0xE0	; 224
     81a:	68 f1       	brcs	.+90     	; 0x876 <__addsf3x+0x98>
     81c:	1a 16       	cp	r1, r26
     81e:	f0 40       	sbci	r31, 0x00	; 0
     820:	a2 2f       	mov	r26, r18
     822:	23 2f       	mov	r18, r19
     824:	34 2f       	mov	r19, r20
     826:	44 27       	eor	r20, r20
     828:	58 5f       	subi	r21, 0xF8	; 248
     82a:	f3 cf       	rjmp	.-26     	; 0x812 <__addsf3x+0x34>
     82c:	46 95       	lsr	r20
     82e:	37 95       	ror	r19
     830:	27 95       	ror	r18
     832:	a7 95       	ror	r26
     834:	f0 40       	sbci	r31, 0x00	; 0
     836:	53 95       	inc	r21
     838:	c9 f7       	brne	.-14     	; 0x82c <__addsf3x+0x4e>
     83a:	7e f4       	brtc	.+30     	; 0x85a <__addsf3x+0x7c>
     83c:	1f 16       	cp	r1, r31
     83e:	ba 0b       	sbc	r27, r26
     840:	62 0b       	sbc	r22, r18
     842:	73 0b       	sbc	r23, r19
     844:	84 0b       	sbc	r24, r20
     846:	ba f0       	brmi	.+46     	; 0x876 <__addsf3x+0x98>
     848:	91 50       	subi	r25, 0x01	; 1
     84a:	a1 f0       	breq	.+40     	; 0x874 <__addsf3x+0x96>
     84c:	ff 0f       	add	r31, r31
     84e:	bb 1f       	adc	r27, r27
     850:	66 1f       	adc	r22, r22
     852:	77 1f       	adc	r23, r23
     854:	88 1f       	adc	r24, r24
     856:	c2 f7       	brpl	.-16     	; 0x848 <__addsf3x+0x6a>
     858:	0e c0       	rjmp	.+28     	; 0x876 <__addsf3x+0x98>
     85a:	ba 0f       	add	r27, r26
     85c:	62 1f       	adc	r22, r18
     85e:	73 1f       	adc	r23, r19
     860:	84 1f       	adc	r24, r20
     862:	48 f4       	brcc	.+18     	; 0x876 <__addsf3x+0x98>
     864:	87 95       	ror	r24
     866:	77 95       	ror	r23
     868:	67 95       	ror	r22
     86a:	b7 95       	ror	r27
     86c:	f7 95       	ror	r31
     86e:	9e 3f       	cpi	r25, 0xFE	; 254
     870:	08 f0       	brcs	.+2      	; 0x874 <__addsf3x+0x96>
     872:	b3 cf       	rjmp	.-154    	; 0x7da <__addsf3+0x1e>
     874:	93 95       	inc	r25
     876:	88 0f       	add	r24, r24
     878:	08 f0       	brcs	.+2      	; 0x87c <__addsf3x+0x9e>
     87a:	99 27       	eor	r25, r25
     87c:	ee 0f       	add	r30, r30
     87e:	97 95       	ror	r25
     880:	87 95       	ror	r24
     882:	08 95       	ret

00000884 <__cmpsf2>:
     884:	d4 d0       	rcall	.+424    	; 0xa2e <__fp_cmp>
     886:	08 f4       	brcc	.+2      	; 0x88a <__cmpsf2+0x6>
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	08 95       	ret

0000088c <__divsf3>:
     88c:	0c d0       	rcall	.+24     	; 0x8a6 <__divsf3x>
     88e:	0a c1       	rjmp	.+532    	; 0xaa4 <__fp_round>
     890:	02 d1       	rcall	.+516    	; 0xa96 <__fp_pscB>
     892:	40 f0       	brcs	.+16     	; 0x8a4 <__divsf3+0x18>
     894:	f9 d0       	rcall	.+498    	; 0xa88 <__fp_pscA>
     896:	30 f0       	brcs	.+12     	; 0x8a4 <__divsf3+0x18>
     898:	21 f4       	brne	.+8      	; 0x8a2 <__divsf3+0x16>
     89a:	5f 3f       	cpi	r21, 0xFF	; 255
     89c:	19 f0       	breq	.+6      	; 0x8a4 <__divsf3+0x18>
     89e:	eb c0       	rjmp	.+470    	; 0xa76 <__fp_inf>
     8a0:	51 11       	cpse	r21, r1
     8a2:	34 c1       	rjmp	.+616    	; 0xb0c <__fp_szero>
     8a4:	ee c0       	rjmp	.+476    	; 0xa82 <__fp_nan>

000008a6 <__divsf3x>:
     8a6:	0f d1       	rcall	.+542    	; 0xac6 <__fp_split3>
     8a8:	98 f3       	brcs	.-26     	; 0x890 <__divsf3+0x4>

000008aa <__divsf3_pse>:
     8aa:	99 23       	and	r25, r25
     8ac:	c9 f3       	breq	.-14     	; 0x8a0 <__divsf3+0x14>
     8ae:	55 23       	and	r21, r21
     8b0:	b1 f3       	breq	.-20     	; 0x89e <__divsf3+0x12>
     8b2:	95 1b       	sub	r25, r21
     8b4:	55 0b       	sbc	r21, r21
     8b6:	bb 27       	eor	r27, r27
     8b8:	aa 27       	eor	r26, r26
     8ba:	62 17       	cp	r22, r18
     8bc:	73 07       	cpc	r23, r19
     8be:	84 07       	cpc	r24, r20
     8c0:	38 f0       	brcs	.+14     	; 0x8d0 <__divsf3_pse+0x26>
     8c2:	9f 5f       	subi	r25, 0xFF	; 255
     8c4:	5f 4f       	sbci	r21, 0xFF	; 255
     8c6:	22 0f       	add	r18, r18
     8c8:	33 1f       	adc	r19, r19
     8ca:	44 1f       	adc	r20, r20
     8cc:	aa 1f       	adc	r26, r26
     8ce:	a9 f3       	breq	.-22     	; 0x8ba <__divsf3_pse+0x10>
     8d0:	33 d0       	rcall	.+102    	; 0x938 <__stack+0x39>
     8d2:	0e 2e       	mov	r0, r30
     8d4:	3a f0       	brmi	.+14     	; 0x8e4 <__divsf3_pse+0x3a>
     8d6:	e0 e8       	ldi	r30, 0x80	; 128
     8d8:	30 d0       	rcall	.+96     	; 0x93a <__stack+0x3b>
     8da:	91 50       	subi	r25, 0x01	; 1
     8dc:	50 40       	sbci	r21, 0x00	; 0
     8de:	e6 95       	lsr	r30
     8e0:	00 1c       	adc	r0, r0
     8e2:	ca f7       	brpl	.-14     	; 0x8d6 <__divsf3_pse+0x2c>
     8e4:	29 d0       	rcall	.+82     	; 0x938 <__stack+0x39>
     8e6:	fe 2f       	mov	r31, r30
     8e8:	27 d0       	rcall	.+78     	; 0x938 <__stack+0x39>
     8ea:	66 0f       	add	r22, r22
     8ec:	77 1f       	adc	r23, r23
     8ee:	88 1f       	adc	r24, r24
     8f0:	bb 1f       	adc	r27, r27
     8f2:	26 17       	cp	r18, r22
     8f4:	37 07       	cpc	r19, r23
     8f6:	48 07       	cpc	r20, r24
     8f8:	ab 07       	cpc	r26, r27
     8fa:	b0 e8       	ldi	r27, 0x80	; 128
     8fc:	09 f0       	breq	.+2      	; 0x900 <__stack+0x1>
     8fe:	bb 0b       	sbc	r27, r27
     900:	80 2d       	mov	r24, r0
     902:	bf 01       	movw	r22, r30
     904:	ff 27       	eor	r31, r31
     906:	93 58       	subi	r25, 0x83	; 131
     908:	5f 4f       	sbci	r21, 0xFF	; 255
     90a:	2a f0       	brmi	.+10     	; 0x916 <__stack+0x17>
     90c:	9e 3f       	cpi	r25, 0xFE	; 254
     90e:	51 05       	cpc	r21, r1
     910:	68 f0       	brcs	.+26     	; 0x92c <__stack+0x2d>
     912:	b1 c0       	rjmp	.+354    	; 0xa76 <__fp_inf>
     914:	fb c0       	rjmp	.+502    	; 0xb0c <__fp_szero>
     916:	5f 3f       	cpi	r21, 0xFF	; 255
     918:	ec f3       	brlt	.-6      	; 0x914 <__stack+0x15>
     91a:	98 3e       	cpi	r25, 0xE8	; 232
     91c:	dc f3       	brlt	.-10     	; 0x914 <__stack+0x15>
     91e:	86 95       	lsr	r24
     920:	77 95       	ror	r23
     922:	67 95       	ror	r22
     924:	b7 95       	ror	r27
     926:	f7 95       	ror	r31
     928:	9f 5f       	subi	r25, 0xFF	; 255
     92a:	c9 f7       	brne	.-14     	; 0x91e <__stack+0x1f>
     92c:	88 0f       	add	r24, r24
     92e:	91 1d       	adc	r25, r1
     930:	96 95       	lsr	r25
     932:	87 95       	ror	r24
     934:	97 f9       	bld	r25, 7
     936:	08 95       	ret
     938:	e1 e0       	ldi	r30, 0x01	; 1
     93a:	66 0f       	add	r22, r22
     93c:	77 1f       	adc	r23, r23
     93e:	88 1f       	adc	r24, r24
     940:	bb 1f       	adc	r27, r27
     942:	62 17       	cp	r22, r18
     944:	73 07       	cpc	r23, r19
     946:	84 07       	cpc	r24, r20
     948:	ba 07       	cpc	r27, r26
     94a:	20 f0       	brcs	.+8      	; 0x954 <__stack+0x55>
     94c:	62 1b       	sub	r22, r18
     94e:	73 0b       	sbc	r23, r19
     950:	84 0b       	sbc	r24, r20
     952:	ba 0b       	sbc	r27, r26
     954:	ee 1f       	adc	r30, r30
     956:	88 f7       	brcc	.-30     	; 0x93a <__stack+0x3b>
     958:	e0 95       	com	r30
     95a:	08 95       	ret

0000095c <__fixunssfsi>:
     95c:	bc d0       	rcall	.+376    	; 0xad6 <__fp_splitA>
     95e:	88 f0       	brcs	.+34     	; 0x982 <__fixunssfsi+0x26>
     960:	9f 57       	subi	r25, 0x7F	; 127
     962:	90 f0       	brcs	.+36     	; 0x988 <__fixunssfsi+0x2c>
     964:	b9 2f       	mov	r27, r25
     966:	99 27       	eor	r25, r25
     968:	b7 51       	subi	r27, 0x17	; 23
     96a:	a0 f0       	brcs	.+40     	; 0x994 <__fixunssfsi+0x38>
     96c:	d1 f0       	breq	.+52     	; 0x9a2 <__fixunssfsi+0x46>
     96e:	66 0f       	add	r22, r22
     970:	77 1f       	adc	r23, r23
     972:	88 1f       	adc	r24, r24
     974:	99 1f       	adc	r25, r25
     976:	1a f0       	brmi	.+6      	; 0x97e <__fixunssfsi+0x22>
     978:	ba 95       	dec	r27
     97a:	c9 f7       	brne	.-14     	; 0x96e <__fixunssfsi+0x12>
     97c:	12 c0       	rjmp	.+36     	; 0x9a2 <__fixunssfsi+0x46>
     97e:	b1 30       	cpi	r27, 0x01	; 1
     980:	81 f0       	breq	.+32     	; 0x9a2 <__fixunssfsi+0x46>
     982:	c3 d0       	rcall	.+390    	; 0xb0a <__fp_zero>
     984:	b1 e0       	ldi	r27, 0x01	; 1
     986:	08 95       	ret
     988:	c0 c0       	rjmp	.+384    	; 0xb0a <__fp_zero>
     98a:	67 2f       	mov	r22, r23
     98c:	78 2f       	mov	r23, r24
     98e:	88 27       	eor	r24, r24
     990:	b8 5f       	subi	r27, 0xF8	; 248
     992:	39 f0       	breq	.+14     	; 0x9a2 <__fixunssfsi+0x46>
     994:	b9 3f       	cpi	r27, 0xF9	; 249
     996:	cc f3       	brlt	.-14     	; 0x98a <__fixunssfsi+0x2e>
     998:	86 95       	lsr	r24
     99a:	77 95       	ror	r23
     99c:	67 95       	ror	r22
     99e:	b3 95       	inc	r27
     9a0:	d9 f7       	brne	.-10     	; 0x998 <__fixunssfsi+0x3c>
     9a2:	3e f4       	brtc	.+14     	; 0x9b2 <__fixunssfsi+0x56>
     9a4:	90 95       	com	r25
     9a6:	80 95       	com	r24
     9a8:	70 95       	com	r23
     9aa:	61 95       	neg	r22
     9ac:	7f 4f       	sbci	r23, 0xFF	; 255
     9ae:	8f 4f       	sbci	r24, 0xFF	; 255
     9b0:	9f 4f       	sbci	r25, 0xFF	; 255
     9b2:	08 95       	ret

000009b4 <__floatunsisf>:
     9b4:	e8 94       	clt
     9b6:	09 c0       	rjmp	.+18     	; 0x9ca <__floatsisf+0x12>

000009b8 <__floatsisf>:
     9b8:	97 fb       	bst	r25, 7
     9ba:	3e f4       	brtc	.+14     	; 0x9ca <__floatsisf+0x12>
     9bc:	90 95       	com	r25
     9be:	80 95       	com	r24
     9c0:	70 95       	com	r23
     9c2:	61 95       	neg	r22
     9c4:	7f 4f       	sbci	r23, 0xFF	; 255
     9c6:	8f 4f       	sbci	r24, 0xFF	; 255
     9c8:	9f 4f       	sbci	r25, 0xFF	; 255
     9ca:	99 23       	and	r25, r25
     9cc:	a9 f0       	breq	.+42     	; 0x9f8 <__floatsisf+0x40>
     9ce:	f9 2f       	mov	r31, r25
     9d0:	96 e9       	ldi	r25, 0x96	; 150
     9d2:	bb 27       	eor	r27, r27
     9d4:	93 95       	inc	r25
     9d6:	f6 95       	lsr	r31
     9d8:	87 95       	ror	r24
     9da:	77 95       	ror	r23
     9dc:	67 95       	ror	r22
     9de:	b7 95       	ror	r27
     9e0:	f1 11       	cpse	r31, r1
     9e2:	f8 cf       	rjmp	.-16     	; 0x9d4 <__floatsisf+0x1c>
     9e4:	fa f4       	brpl	.+62     	; 0xa24 <__floatsisf+0x6c>
     9e6:	bb 0f       	add	r27, r27
     9e8:	11 f4       	brne	.+4      	; 0x9ee <__floatsisf+0x36>
     9ea:	60 ff       	sbrs	r22, 0
     9ec:	1b c0       	rjmp	.+54     	; 0xa24 <__floatsisf+0x6c>
     9ee:	6f 5f       	subi	r22, 0xFF	; 255
     9f0:	7f 4f       	sbci	r23, 0xFF	; 255
     9f2:	8f 4f       	sbci	r24, 0xFF	; 255
     9f4:	9f 4f       	sbci	r25, 0xFF	; 255
     9f6:	16 c0       	rjmp	.+44     	; 0xa24 <__floatsisf+0x6c>
     9f8:	88 23       	and	r24, r24
     9fa:	11 f0       	breq	.+4      	; 0xa00 <__floatsisf+0x48>
     9fc:	96 e9       	ldi	r25, 0x96	; 150
     9fe:	11 c0       	rjmp	.+34     	; 0xa22 <__floatsisf+0x6a>
     a00:	77 23       	and	r23, r23
     a02:	21 f0       	breq	.+8      	; 0xa0c <__floatsisf+0x54>
     a04:	9e e8       	ldi	r25, 0x8E	; 142
     a06:	87 2f       	mov	r24, r23
     a08:	76 2f       	mov	r23, r22
     a0a:	05 c0       	rjmp	.+10     	; 0xa16 <__floatsisf+0x5e>
     a0c:	66 23       	and	r22, r22
     a0e:	71 f0       	breq	.+28     	; 0xa2c <__floatsisf+0x74>
     a10:	96 e8       	ldi	r25, 0x86	; 134
     a12:	86 2f       	mov	r24, r22
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	60 e0       	ldi	r22, 0x00	; 0
     a18:	2a f0       	brmi	.+10     	; 0xa24 <__floatsisf+0x6c>
     a1a:	9a 95       	dec	r25
     a1c:	66 0f       	add	r22, r22
     a1e:	77 1f       	adc	r23, r23
     a20:	88 1f       	adc	r24, r24
     a22:	da f7       	brpl	.-10     	; 0xa1a <__floatsisf+0x62>
     a24:	88 0f       	add	r24, r24
     a26:	96 95       	lsr	r25
     a28:	87 95       	ror	r24
     a2a:	97 f9       	bld	r25, 7
     a2c:	08 95       	ret

00000a2e <__fp_cmp>:
     a2e:	99 0f       	add	r25, r25
     a30:	00 08       	sbc	r0, r0
     a32:	55 0f       	add	r21, r21
     a34:	aa 0b       	sbc	r26, r26
     a36:	e0 e8       	ldi	r30, 0x80	; 128
     a38:	fe ef       	ldi	r31, 0xFE	; 254
     a3a:	16 16       	cp	r1, r22
     a3c:	17 06       	cpc	r1, r23
     a3e:	e8 07       	cpc	r30, r24
     a40:	f9 07       	cpc	r31, r25
     a42:	c0 f0       	brcs	.+48     	; 0xa74 <__fp_cmp+0x46>
     a44:	12 16       	cp	r1, r18
     a46:	13 06       	cpc	r1, r19
     a48:	e4 07       	cpc	r30, r20
     a4a:	f5 07       	cpc	r31, r21
     a4c:	98 f0       	brcs	.+38     	; 0xa74 <__fp_cmp+0x46>
     a4e:	62 1b       	sub	r22, r18
     a50:	73 0b       	sbc	r23, r19
     a52:	84 0b       	sbc	r24, r20
     a54:	95 0b       	sbc	r25, r21
     a56:	39 f4       	brne	.+14     	; 0xa66 <__fp_cmp+0x38>
     a58:	0a 26       	eor	r0, r26
     a5a:	61 f0       	breq	.+24     	; 0xa74 <__fp_cmp+0x46>
     a5c:	23 2b       	or	r18, r19
     a5e:	24 2b       	or	r18, r20
     a60:	25 2b       	or	r18, r21
     a62:	21 f4       	brne	.+8      	; 0xa6c <__fp_cmp+0x3e>
     a64:	08 95       	ret
     a66:	0a 26       	eor	r0, r26
     a68:	09 f4       	brne	.+2      	; 0xa6c <__fp_cmp+0x3e>
     a6a:	a1 40       	sbci	r26, 0x01	; 1
     a6c:	a6 95       	lsr	r26
     a6e:	8f ef       	ldi	r24, 0xFF	; 255
     a70:	81 1d       	adc	r24, r1
     a72:	81 1d       	adc	r24, r1
     a74:	08 95       	ret

00000a76 <__fp_inf>:
     a76:	97 f9       	bld	r25, 7
     a78:	9f 67       	ori	r25, 0x7F	; 127
     a7a:	80 e8       	ldi	r24, 0x80	; 128
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	08 95       	ret

00000a82 <__fp_nan>:
     a82:	9f ef       	ldi	r25, 0xFF	; 255
     a84:	80 ec       	ldi	r24, 0xC0	; 192
     a86:	08 95       	ret

00000a88 <__fp_pscA>:
     a88:	00 24       	eor	r0, r0
     a8a:	0a 94       	dec	r0
     a8c:	16 16       	cp	r1, r22
     a8e:	17 06       	cpc	r1, r23
     a90:	18 06       	cpc	r1, r24
     a92:	09 06       	cpc	r0, r25
     a94:	08 95       	ret

00000a96 <__fp_pscB>:
     a96:	00 24       	eor	r0, r0
     a98:	0a 94       	dec	r0
     a9a:	12 16       	cp	r1, r18
     a9c:	13 06       	cpc	r1, r19
     a9e:	14 06       	cpc	r1, r20
     aa0:	05 06       	cpc	r0, r21
     aa2:	08 95       	ret

00000aa4 <__fp_round>:
     aa4:	09 2e       	mov	r0, r25
     aa6:	03 94       	inc	r0
     aa8:	00 0c       	add	r0, r0
     aaa:	11 f4       	brne	.+4      	; 0xab0 <__fp_round+0xc>
     aac:	88 23       	and	r24, r24
     aae:	52 f0       	brmi	.+20     	; 0xac4 <__fp_round+0x20>
     ab0:	bb 0f       	add	r27, r27
     ab2:	40 f4       	brcc	.+16     	; 0xac4 <__fp_round+0x20>
     ab4:	bf 2b       	or	r27, r31
     ab6:	11 f4       	brne	.+4      	; 0xabc <__fp_round+0x18>
     ab8:	60 ff       	sbrs	r22, 0
     aba:	04 c0       	rjmp	.+8      	; 0xac4 <__fp_round+0x20>
     abc:	6f 5f       	subi	r22, 0xFF	; 255
     abe:	7f 4f       	sbci	r23, 0xFF	; 255
     ac0:	8f 4f       	sbci	r24, 0xFF	; 255
     ac2:	9f 4f       	sbci	r25, 0xFF	; 255
     ac4:	08 95       	ret

00000ac6 <__fp_split3>:
     ac6:	57 fd       	sbrc	r21, 7
     ac8:	90 58       	subi	r25, 0x80	; 128
     aca:	44 0f       	add	r20, r20
     acc:	55 1f       	adc	r21, r21
     ace:	59 f0       	breq	.+22     	; 0xae6 <__fp_splitA+0x10>
     ad0:	5f 3f       	cpi	r21, 0xFF	; 255
     ad2:	71 f0       	breq	.+28     	; 0xaf0 <__fp_splitA+0x1a>
     ad4:	47 95       	ror	r20

00000ad6 <__fp_splitA>:
     ad6:	88 0f       	add	r24, r24
     ad8:	97 fb       	bst	r25, 7
     ada:	99 1f       	adc	r25, r25
     adc:	61 f0       	breq	.+24     	; 0xaf6 <__fp_splitA+0x20>
     ade:	9f 3f       	cpi	r25, 0xFF	; 255
     ae0:	79 f0       	breq	.+30     	; 0xb00 <__fp_splitA+0x2a>
     ae2:	87 95       	ror	r24
     ae4:	08 95       	ret
     ae6:	12 16       	cp	r1, r18
     ae8:	13 06       	cpc	r1, r19
     aea:	14 06       	cpc	r1, r20
     aec:	55 1f       	adc	r21, r21
     aee:	f2 cf       	rjmp	.-28     	; 0xad4 <__fp_split3+0xe>
     af0:	46 95       	lsr	r20
     af2:	f1 df       	rcall	.-30     	; 0xad6 <__fp_splitA>
     af4:	08 c0       	rjmp	.+16     	; 0xb06 <__fp_splitA+0x30>
     af6:	16 16       	cp	r1, r22
     af8:	17 06       	cpc	r1, r23
     afa:	18 06       	cpc	r1, r24
     afc:	99 1f       	adc	r25, r25
     afe:	f1 cf       	rjmp	.-30     	; 0xae2 <__fp_splitA+0xc>
     b00:	86 95       	lsr	r24
     b02:	71 05       	cpc	r23, r1
     b04:	61 05       	cpc	r22, r1
     b06:	08 94       	sec
     b08:	08 95       	ret

00000b0a <__fp_zero>:
     b0a:	e8 94       	clt

00000b0c <__fp_szero>:
     b0c:	bb 27       	eor	r27, r27
     b0e:	66 27       	eor	r22, r22
     b10:	77 27       	eor	r23, r23
     b12:	cb 01       	movw	r24, r22
     b14:	97 f9       	bld	r25, 7
     b16:	08 95       	ret

00000b18 <__gesf2>:
     b18:	8a df       	rcall	.-236    	; 0xa2e <__fp_cmp>
     b1a:	08 f4       	brcc	.+2      	; 0xb1e <__gesf2+0x6>
     b1c:	8f ef       	ldi	r24, 0xFF	; 255
     b1e:	08 95       	ret

00000b20 <__mulsf3>:
     b20:	0b d0       	rcall	.+22     	; 0xb38 <__mulsf3x>
     b22:	c0 cf       	rjmp	.-128    	; 0xaa4 <__fp_round>
     b24:	b1 df       	rcall	.-158    	; 0xa88 <__fp_pscA>
     b26:	28 f0       	brcs	.+10     	; 0xb32 <__mulsf3+0x12>
     b28:	b6 df       	rcall	.-148    	; 0xa96 <__fp_pscB>
     b2a:	18 f0       	brcs	.+6      	; 0xb32 <__mulsf3+0x12>
     b2c:	95 23       	and	r25, r21
     b2e:	09 f0       	breq	.+2      	; 0xb32 <__mulsf3+0x12>
     b30:	a2 cf       	rjmp	.-188    	; 0xa76 <__fp_inf>
     b32:	a7 cf       	rjmp	.-178    	; 0xa82 <__fp_nan>
     b34:	11 24       	eor	r1, r1
     b36:	ea cf       	rjmp	.-44     	; 0xb0c <__fp_szero>

00000b38 <__mulsf3x>:
     b38:	c6 df       	rcall	.-116    	; 0xac6 <__fp_split3>
     b3a:	a0 f3       	brcs	.-24     	; 0xb24 <__mulsf3+0x4>

00000b3c <__mulsf3_pse>:
     b3c:	95 9f       	mul	r25, r21
     b3e:	d1 f3       	breq	.-12     	; 0xb34 <__mulsf3+0x14>
     b40:	95 0f       	add	r25, r21
     b42:	50 e0       	ldi	r21, 0x00	; 0
     b44:	55 1f       	adc	r21, r21
     b46:	62 9f       	mul	r22, r18
     b48:	f0 01       	movw	r30, r0
     b4a:	72 9f       	mul	r23, r18
     b4c:	bb 27       	eor	r27, r27
     b4e:	f0 0d       	add	r31, r0
     b50:	b1 1d       	adc	r27, r1
     b52:	63 9f       	mul	r22, r19
     b54:	aa 27       	eor	r26, r26
     b56:	f0 0d       	add	r31, r0
     b58:	b1 1d       	adc	r27, r1
     b5a:	aa 1f       	adc	r26, r26
     b5c:	64 9f       	mul	r22, r20
     b5e:	66 27       	eor	r22, r22
     b60:	b0 0d       	add	r27, r0
     b62:	a1 1d       	adc	r26, r1
     b64:	66 1f       	adc	r22, r22
     b66:	82 9f       	mul	r24, r18
     b68:	22 27       	eor	r18, r18
     b6a:	b0 0d       	add	r27, r0
     b6c:	a1 1d       	adc	r26, r1
     b6e:	62 1f       	adc	r22, r18
     b70:	73 9f       	mul	r23, r19
     b72:	b0 0d       	add	r27, r0
     b74:	a1 1d       	adc	r26, r1
     b76:	62 1f       	adc	r22, r18
     b78:	83 9f       	mul	r24, r19
     b7a:	a0 0d       	add	r26, r0
     b7c:	61 1d       	adc	r22, r1
     b7e:	22 1f       	adc	r18, r18
     b80:	74 9f       	mul	r23, r20
     b82:	33 27       	eor	r19, r19
     b84:	a0 0d       	add	r26, r0
     b86:	61 1d       	adc	r22, r1
     b88:	23 1f       	adc	r18, r19
     b8a:	84 9f       	mul	r24, r20
     b8c:	60 0d       	add	r22, r0
     b8e:	21 1d       	adc	r18, r1
     b90:	82 2f       	mov	r24, r18
     b92:	76 2f       	mov	r23, r22
     b94:	6a 2f       	mov	r22, r26
     b96:	11 24       	eor	r1, r1
     b98:	9f 57       	subi	r25, 0x7F	; 127
     b9a:	50 40       	sbci	r21, 0x00	; 0
     b9c:	8a f0       	brmi	.+34     	; 0xbc0 <__mulsf3_pse+0x84>
     b9e:	e1 f0       	breq	.+56     	; 0xbd8 <__mulsf3_pse+0x9c>
     ba0:	88 23       	and	r24, r24
     ba2:	4a f0       	brmi	.+18     	; 0xbb6 <__mulsf3_pse+0x7a>
     ba4:	ee 0f       	add	r30, r30
     ba6:	ff 1f       	adc	r31, r31
     ba8:	bb 1f       	adc	r27, r27
     baa:	66 1f       	adc	r22, r22
     bac:	77 1f       	adc	r23, r23
     bae:	88 1f       	adc	r24, r24
     bb0:	91 50       	subi	r25, 0x01	; 1
     bb2:	50 40       	sbci	r21, 0x00	; 0
     bb4:	a9 f7       	brne	.-22     	; 0xba0 <__mulsf3_pse+0x64>
     bb6:	9e 3f       	cpi	r25, 0xFE	; 254
     bb8:	51 05       	cpc	r21, r1
     bba:	70 f0       	brcs	.+28     	; 0xbd8 <__mulsf3_pse+0x9c>
     bbc:	5c cf       	rjmp	.-328    	; 0xa76 <__fp_inf>
     bbe:	a6 cf       	rjmp	.-180    	; 0xb0c <__fp_szero>
     bc0:	5f 3f       	cpi	r21, 0xFF	; 255
     bc2:	ec f3       	brlt	.-6      	; 0xbbe <__mulsf3_pse+0x82>
     bc4:	98 3e       	cpi	r25, 0xE8	; 232
     bc6:	dc f3       	brlt	.-10     	; 0xbbe <__mulsf3_pse+0x82>
     bc8:	86 95       	lsr	r24
     bca:	77 95       	ror	r23
     bcc:	67 95       	ror	r22
     bce:	b7 95       	ror	r27
     bd0:	f7 95       	ror	r31
     bd2:	e7 95       	ror	r30
     bd4:	9f 5f       	subi	r25, 0xFF	; 255
     bd6:	c1 f7       	brne	.-16     	; 0xbc8 <__mulsf3_pse+0x8c>
     bd8:	fe 2b       	or	r31, r30
     bda:	88 0f       	add	r24, r24
     bdc:	91 1d       	adc	r25, r1
     bde:	96 95       	lsr	r25
     be0:	87 95       	ror	r24
     be2:	97 f9       	bld	r25, 7
     be4:	08 95       	ret

00000be6 <__udivmodsi4>:
     be6:	a1 e2       	ldi	r26, 0x21	; 33
     be8:	1a 2e       	mov	r1, r26
     bea:	aa 1b       	sub	r26, r26
     bec:	bb 1b       	sub	r27, r27
     bee:	fd 01       	movw	r30, r26
     bf0:	0d c0       	rjmp	.+26     	; 0xc0c <__udivmodsi4_ep>

00000bf2 <__udivmodsi4_loop>:
     bf2:	aa 1f       	adc	r26, r26
     bf4:	bb 1f       	adc	r27, r27
     bf6:	ee 1f       	adc	r30, r30
     bf8:	ff 1f       	adc	r31, r31
     bfa:	a2 17       	cp	r26, r18
     bfc:	b3 07       	cpc	r27, r19
     bfe:	e4 07       	cpc	r30, r20
     c00:	f5 07       	cpc	r31, r21
     c02:	20 f0       	brcs	.+8      	; 0xc0c <__udivmodsi4_ep>
     c04:	a2 1b       	sub	r26, r18
     c06:	b3 0b       	sbc	r27, r19
     c08:	e4 0b       	sbc	r30, r20
     c0a:	f5 0b       	sbc	r31, r21

00000c0c <__udivmodsi4_ep>:
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	88 1f       	adc	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	1a 94       	dec	r1
     c16:	69 f7       	brne	.-38     	; 0xbf2 <__udivmodsi4_loop>
     c18:	60 95       	com	r22
     c1a:	70 95       	com	r23
     c1c:	80 95       	com	r24
     c1e:	90 95       	com	r25
     c20:	9b 01       	movw	r18, r22
     c22:	ac 01       	movw	r20, r24
     c24:	bd 01       	movw	r22, r26
     c26:	cf 01       	movw	r24, r30
     c28:	08 95       	ret

00000c2a <memset>:
     c2a:	dc 01       	movw	r26, r24
     c2c:	01 c0       	rjmp	.+2      	; 0xc30 <memset+0x6>
     c2e:	6d 93       	st	X+, r22
     c30:	41 50       	subi	r20, 0x01	; 1
     c32:	50 40       	sbci	r21, 0x00	; 0
     c34:	e0 f7       	brcc	.-8      	; 0xc2e <memset+0x4>
     c36:	08 95       	ret

00000c38 <sprintf>:
     c38:	ae e0       	ldi	r26, 0x0E	; 14
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	e2 e2       	ldi	r30, 0x22	; 34
     c3e:	f6 e0       	ldi	r31, 0x06	; 6
     c40:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <__prologue_saves__+0x1c>
     c44:	0d 89       	ldd	r16, Y+21	; 0x15
     c46:	1e 89       	ldd	r17, Y+22	; 0x16
     c48:	86 e0       	ldi	r24, 0x06	; 6
     c4a:	8c 83       	std	Y+4, r24	; 0x04
     c4c:	1a 83       	std	Y+2, r17	; 0x02
     c4e:	09 83       	std	Y+1, r16	; 0x01
     c50:	8f ef       	ldi	r24, 0xFF	; 255
     c52:	9f e7       	ldi	r25, 0x7F	; 127
     c54:	9e 83       	std	Y+6, r25	; 0x06
     c56:	8d 83       	std	Y+5, r24	; 0x05
     c58:	ae 01       	movw	r20, r28
     c5a:	47 5e       	subi	r20, 0xE7	; 231
     c5c:	5f 4f       	sbci	r21, 0xFF	; 255
     c5e:	6f 89       	ldd	r22, Y+23	; 0x17
     c60:	78 8d       	ldd	r23, Y+24	; 0x18
     c62:	ce 01       	movw	r24, r28
     c64:	01 96       	adiw	r24, 0x01	; 1
     c66:	0e 94 57 06 	call	0xcae	; 0xcae <vfprintf>
     c6a:	ef 81       	ldd	r30, Y+7	; 0x07
     c6c:	f8 85       	ldd	r31, Y+8	; 0x08
     c6e:	e0 0f       	add	r30, r16
     c70:	f1 1f       	adc	r31, r17
     c72:	10 82       	st	Z, r1
     c74:	2e 96       	adiw	r28, 0x0e	; 14
     c76:	e4 e0       	ldi	r30, 0x04	; 4
     c78:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__epilogue_restores__+0x1c>

00000c7c <sscanf>:
     c7c:	ae e0       	ldi	r26, 0x0E	; 14
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e4 e4       	ldi	r30, 0x44	; 68
     c82:	f6 e0       	ldi	r31, 0x06	; 6
     c84:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__prologue_saves__+0x20>
     c88:	85 e0       	ldi	r24, 0x05	; 5
     c8a:	8c 83       	std	Y+4, r24	; 0x04
     c8c:	8b 89       	ldd	r24, Y+19	; 0x13
     c8e:	9c 89       	ldd	r25, Y+20	; 0x14
     c90:	9a 83       	std	Y+2, r25	; 0x02
     c92:	89 83       	std	Y+1, r24	; 0x01
     c94:	ae 01       	movw	r20, r28
     c96:	49 5e       	subi	r20, 0xE9	; 233
     c98:	5f 4f       	sbci	r21, 0xFF	; 255
     c9a:	6d 89       	ldd	r22, Y+21	; 0x15
     c9c:	7e 89       	ldd	r23, Y+22	; 0x16
     c9e:	ce 01       	movw	r24, r28
     ca0:	01 96       	adiw	r24, 0x01	; 1
     ca2:	0e 94 a7 09 	call	0x134e	; 0x134e <vfscanf>
     ca6:	2e 96       	adiw	r28, 0x0e	; 14
     ca8:	e2 e0       	ldi	r30, 0x02	; 2
     caa:	0c 94 1d 0c 	jmp	0x183a	; 0x183a <__epilogue_restores__+0x20>

00000cae <vfprintf>:
     cae:	ac e0       	ldi	r26, 0x0C	; 12
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	ed e5       	ldi	r30, 0x5D	; 93
     cb4:	f6 e0       	ldi	r31, 0x06	; 6
     cb6:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__prologue_saves__>
     cba:	7c 01       	movw	r14, r24
     cbc:	6b 01       	movw	r12, r22
     cbe:	8a 01       	movw	r16, r20
     cc0:	fc 01       	movw	r30, r24
     cc2:	17 82       	std	Z+7, r1	; 0x07
     cc4:	16 82       	std	Z+6, r1	; 0x06
     cc6:	83 81       	ldd	r24, Z+3	; 0x03
     cc8:	81 ff       	sbrs	r24, 1
     cca:	bd c1       	rjmp	.+890    	; 0x1046 <vfprintf+0x398>
     ccc:	ce 01       	movw	r24, r28
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	4c 01       	movw	r8, r24
     cd2:	f7 01       	movw	r30, r14
     cd4:	93 81       	ldd	r25, Z+3	; 0x03
     cd6:	f6 01       	movw	r30, r12
     cd8:	93 fd       	sbrc	r25, 3
     cda:	85 91       	lpm	r24, Z+
     cdc:	93 ff       	sbrs	r25, 3
     cde:	81 91       	ld	r24, Z+
     ce0:	6f 01       	movw	r12, r30
     ce2:	88 23       	and	r24, r24
     ce4:	09 f4       	brne	.+2      	; 0xce8 <vfprintf+0x3a>
     ce6:	ab c1       	rjmp	.+854    	; 0x103e <vfprintf+0x390>
     ce8:	85 32       	cpi	r24, 0x25	; 37
     cea:	39 f4       	brne	.+14     	; 0xcfa <vfprintf+0x4c>
     cec:	93 fd       	sbrc	r25, 3
     cee:	85 91       	lpm	r24, Z+
     cf0:	93 ff       	sbrs	r25, 3
     cf2:	81 91       	ld	r24, Z+
     cf4:	6f 01       	movw	r12, r30
     cf6:	85 32       	cpi	r24, 0x25	; 37
     cf8:	29 f4       	brne	.+10     	; 0xd04 <vfprintf+0x56>
     cfa:	b7 01       	movw	r22, r14
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	0e 94 45 0b 	call	0x168a	; 0x168a <fputc>
     d02:	e7 cf       	rjmp	.-50     	; 0xcd2 <vfprintf+0x24>
     d04:	51 2c       	mov	r5, r1
     d06:	31 2c       	mov	r3, r1
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	20 32       	cpi	r18, 0x20	; 32
     d0c:	a0 f4       	brcc	.+40     	; 0xd36 <vfprintf+0x88>
     d0e:	8b 32       	cpi	r24, 0x2B	; 43
     d10:	69 f0       	breq	.+26     	; 0xd2c <vfprintf+0x7e>
     d12:	30 f4       	brcc	.+12     	; 0xd20 <vfprintf+0x72>
     d14:	80 32       	cpi	r24, 0x20	; 32
     d16:	59 f0       	breq	.+22     	; 0xd2e <vfprintf+0x80>
     d18:	83 32       	cpi	r24, 0x23	; 35
     d1a:	69 f4       	brne	.+26     	; 0xd36 <vfprintf+0x88>
     d1c:	20 61       	ori	r18, 0x10	; 16
     d1e:	2c c0       	rjmp	.+88     	; 0xd78 <vfprintf+0xca>
     d20:	8d 32       	cpi	r24, 0x2D	; 45
     d22:	39 f0       	breq	.+14     	; 0xd32 <vfprintf+0x84>
     d24:	80 33       	cpi	r24, 0x30	; 48
     d26:	39 f4       	brne	.+14     	; 0xd36 <vfprintf+0x88>
     d28:	21 60       	ori	r18, 0x01	; 1
     d2a:	26 c0       	rjmp	.+76     	; 0xd78 <vfprintf+0xca>
     d2c:	22 60       	ori	r18, 0x02	; 2
     d2e:	24 60       	ori	r18, 0x04	; 4
     d30:	23 c0       	rjmp	.+70     	; 0xd78 <vfprintf+0xca>
     d32:	28 60       	ori	r18, 0x08	; 8
     d34:	21 c0       	rjmp	.+66     	; 0xd78 <vfprintf+0xca>
     d36:	27 fd       	sbrc	r18, 7
     d38:	27 c0       	rjmp	.+78     	; 0xd88 <vfprintf+0xda>
     d3a:	30 ed       	ldi	r19, 0xD0	; 208
     d3c:	38 0f       	add	r19, r24
     d3e:	3a 30       	cpi	r19, 0x0A	; 10
     d40:	78 f4       	brcc	.+30     	; 0xd60 <vfprintf+0xb2>
     d42:	26 ff       	sbrs	r18, 6
     d44:	06 c0       	rjmp	.+12     	; 0xd52 <vfprintf+0xa4>
     d46:	fa e0       	ldi	r31, 0x0A	; 10
     d48:	5f 9e       	mul	r5, r31
     d4a:	30 0d       	add	r19, r0
     d4c:	11 24       	eor	r1, r1
     d4e:	53 2e       	mov	r5, r19
     d50:	13 c0       	rjmp	.+38     	; 0xd78 <vfprintf+0xca>
     d52:	8a e0       	ldi	r24, 0x0A	; 10
     d54:	38 9e       	mul	r3, r24
     d56:	30 0d       	add	r19, r0
     d58:	11 24       	eor	r1, r1
     d5a:	33 2e       	mov	r3, r19
     d5c:	20 62       	ori	r18, 0x20	; 32
     d5e:	0c c0       	rjmp	.+24     	; 0xd78 <vfprintf+0xca>
     d60:	8e 32       	cpi	r24, 0x2E	; 46
     d62:	21 f4       	brne	.+8      	; 0xd6c <vfprintf+0xbe>
     d64:	26 fd       	sbrc	r18, 6
     d66:	6b c1       	rjmp	.+726    	; 0x103e <vfprintf+0x390>
     d68:	20 64       	ori	r18, 0x40	; 64
     d6a:	06 c0       	rjmp	.+12     	; 0xd78 <vfprintf+0xca>
     d6c:	8c 36       	cpi	r24, 0x6C	; 108
     d6e:	11 f4       	brne	.+4      	; 0xd74 <vfprintf+0xc6>
     d70:	20 68       	ori	r18, 0x80	; 128
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <vfprintf+0xca>
     d74:	88 36       	cpi	r24, 0x68	; 104
     d76:	41 f4       	brne	.+16     	; 0xd88 <vfprintf+0xda>
     d78:	f6 01       	movw	r30, r12
     d7a:	93 fd       	sbrc	r25, 3
     d7c:	85 91       	lpm	r24, Z+
     d7e:	93 ff       	sbrs	r25, 3
     d80:	81 91       	ld	r24, Z+
     d82:	6f 01       	movw	r12, r30
     d84:	81 11       	cpse	r24, r1
     d86:	c1 cf       	rjmp	.-126    	; 0xd0a <vfprintf+0x5c>
     d88:	98 2f       	mov	r25, r24
     d8a:	9f 7d       	andi	r25, 0xDF	; 223
     d8c:	95 54       	subi	r25, 0x45	; 69
     d8e:	93 30       	cpi	r25, 0x03	; 3
     d90:	28 f4       	brcc	.+10     	; 0xd9c <vfprintf+0xee>
     d92:	0c 5f       	subi	r16, 0xFC	; 252
     d94:	1f 4f       	sbci	r17, 0xFF	; 255
     d96:	ff e3       	ldi	r31, 0x3F	; 63
     d98:	f9 83       	std	Y+1, r31	; 0x01
     d9a:	0d c0       	rjmp	.+26     	; 0xdb6 <vfprintf+0x108>
     d9c:	83 36       	cpi	r24, 0x63	; 99
     d9e:	31 f0       	breq	.+12     	; 0xdac <vfprintf+0xfe>
     da0:	83 37       	cpi	r24, 0x73	; 115
     da2:	71 f0       	breq	.+28     	; 0xdc0 <vfprintf+0x112>
     da4:	83 35       	cpi	r24, 0x53	; 83
     da6:	09 f0       	breq	.+2      	; 0xdaa <vfprintf+0xfc>
     da8:	5b c0       	rjmp	.+182    	; 0xe60 <vfprintf+0x1b2>
     daa:	22 c0       	rjmp	.+68     	; 0xdf0 <vfprintf+0x142>
     dac:	f8 01       	movw	r30, r16
     dae:	80 81       	ld	r24, Z
     db0:	89 83       	std	Y+1, r24	; 0x01
     db2:	0e 5f       	subi	r16, 0xFE	; 254
     db4:	1f 4f       	sbci	r17, 0xFF	; 255
     db6:	44 24       	eor	r4, r4
     db8:	43 94       	inc	r4
     dba:	51 2c       	mov	r5, r1
     dbc:	54 01       	movw	r10, r8
     dbe:	15 c0       	rjmp	.+42     	; 0xdea <vfprintf+0x13c>
     dc0:	38 01       	movw	r6, r16
     dc2:	f2 e0       	ldi	r31, 0x02	; 2
     dc4:	6f 0e       	add	r6, r31
     dc6:	71 1c       	adc	r7, r1
     dc8:	f8 01       	movw	r30, r16
     dca:	a0 80       	ld	r10, Z
     dcc:	b1 80       	ldd	r11, Z+1	; 0x01
     dce:	26 ff       	sbrs	r18, 6
     dd0:	03 c0       	rjmp	.+6      	; 0xdd8 <vfprintf+0x12a>
     dd2:	65 2d       	mov	r22, r5
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <vfprintf+0x12e>
     dd8:	6f ef       	ldi	r22, 0xFF	; 255
     dda:	7f ef       	ldi	r23, 0xFF	; 255
     ddc:	c5 01       	movw	r24, r10
     dde:	2c 87       	std	Y+12, r18	; 0x0c
     de0:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <strnlen>
     de4:	2c 01       	movw	r4, r24
     de6:	83 01       	movw	r16, r6
     de8:	2c 85       	ldd	r18, Y+12	; 0x0c
     dea:	2f 77       	andi	r18, 0x7F	; 127
     dec:	22 2e       	mov	r2, r18
     dee:	17 c0       	rjmp	.+46     	; 0xe1e <vfprintf+0x170>
     df0:	38 01       	movw	r6, r16
     df2:	f2 e0       	ldi	r31, 0x02	; 2
     df4:	6f 0e       	add	r6, r31
     df6:	71 1c       	adc	r7, r1
     df8:	f8 01       	movw	r30, r16
     dfa:	a0 80       	ld	r10, Z
     dfc:	b1 80       	ldd	r11, Z+1	; 0x01
     dfe:	26 ff       	sbrs	r18, 6
     e00:	03 c0       	rjmp	.+6      	; 0xe08 <vfprintf+0x15a>
     e02:	65 2d       	mov	r22, r5
     e04:	70 e0       	ldi	r23, 0x00	; 0
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <vfprintf+0x15e>
     e08:	6f ef       	ldi	r22, 0xFF	; 255
     e0a:	7f ef       	ldi	r23, 0xFF	; 255
     e0c:	c5 01       	movw	r24, r10
     e0e:	2c 87       	std	Y+12, r18	; 0x0c
     e10:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <strnlen_P>
     e14:	2c 01       	movw	r4, r24
     e16:	2c 85       	ldd	r18, Y+12	; 0x0c
     e18:	20 68       	ori	r18, 0x80	; 128
     e1a:	22 2e       	mov	r2, r18
     e1c:	83 01       	movw	r16, r6
     e1e:	23 fc       	sbrc	r2, 3
     e20:	1b c0       	rjmp	.+54     	; 0xe58 <vfprintf+0x1aa>
     e22:	83 2d       	mov	r24, r3
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	48 16       	cp	r4, r24
     e28:	59 06       	cpc	r5, r25
     e2a:	b0 f4       	brcc	.+44     	; 0xe58 <vfprintf+0x1aa>
     e2c:	b7 01       	movw	r22, r14
     e2e:	80 e2       	ldi	r24, 0x20	; 32
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 94 45 0b 	call	0x168a	; 0x168a <fputc>
     e36:	3a 94       	dec	r3
     e38:	f4 cf       	rjmp	.-24     	; 0xe22 <vfprintf+0x174>
     e3a:	f5 01       	movw	r30, r10
     e3c:	27 fc       	sbrc	r2, 7
     e3e:	85 91       	lpm	r24, Z+
     e40:	27 fe       	sbrs	r2, 7
     e42:	81 91       	ld	r24, Z+
     e44:	5f 01       	movw	r10, r30
     e46:	b7 01       	movw	r22, r14
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	0e 94 45 0b 	call	0x168a	; 0x168a <fputc>
     e4e:	31 10       	cpse	r3, r1
     e50:	3a 94       	dec	r3
     e52:	f1 e0       	ldi	r31, 0x01	; 1
     e54:	4f 1a       	sub	r4, r31
     e56:	51 08       	sbc	r5, r1
     e58:	41 14       	cp	r4, r1
     e5a:	51 04       	cpc	r5, r1
     e5c:	71 f7       	brne	.-36     	; 0xe3a <vfprintf+0x18c>
     e5e:	e5 c0       	rjmp	.+458    	; 0x102a <vfprintf+0x37c>
     e60:	84 36       	cpi	r24, 0x64	; 100
     e62:	11 f0       	breq	.+4      	; 0xe68 <vfprintf+0x1ba>
     e64:	89 36       	cpi	r24, 0x69	; 105
     e66:	39 f5       	brne	.+78     	; 0xeb6 <vfprintf+0x208>
     e68:	f8 01       	movw	r30, r16
     e6a:	27 ff       	sbrs	r18, 7
     e6c:	07 c0       	rjmp	.+14     	; 0xe7c <vfprintf+0x1ce>
     e6e:	60 81       	ld	r22, Z
     e70:	71 81       	ldd	r23, Z+1	; 0x01
     e72:	82 81       	ldd	r24, Z+2	; 0x02
     e74:	93 81       	ldd	r25, Z+3	; 0x03
     e76:	0c 5f       	subi	r16, 0xFC	; 252
     e78:	1f 4f       	sbci	r17, 0xFF	; 255
     e7a:	08 c0       	rjmp	.+16     	; 0xe8c <vfprintf+0x1de>
     e7c:	60 81       	ld	r22, Z
     e7e:	71 81       	ldd	r23, Z+1	; 0x01
     e80:	88 27       	eor	r24, r24
     e82:	77 fd       	sbrc	r23, 7
     e84:	80 95       	com	r24
     e86:	98 2f       	mov	r25, r24
     e88:	0e 5f       	subi	r16, 0xFE	; 254
     e8a:	1f 4f       	sbci	r17, 0xFF	; 255
     e8c:	2f 76       	andi	r18, 0x6F	; 111
     e8e:	b2 2e       	mov	r11, r18
     e90:	97 ff       	sbrs	r25, 7
     e92:	09 c0       	rjmp	.+18     	; 0xea6 <vfprintf+0x1f8>
     e94:	90 95       	com	r25
     e96:	80 95       	com	r24
     e98:	70 95       	com	r23
     e9a:	61 95       	neg	r22
     e9c:	7f 4f       	sbci	r23, 0xFF	; 255
     e9e:	8f 4f       	sbci	r24, 0xFF	; 255
     ea0:	9f 4f       	sbci	r25, 0xFF	; 255
     ea2:	20 68       	ori	r18, 0x80	; 128
     ea4:	b2 2e       	mov	r11, r18
     ea6:	2a e0       	ldi	r18, 0x0A	; 10
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	a4 01       	movw	r20, r8
     eac:	0e 94 90 0b 	call	0x1720	; 0x1720 <__ultoa_invert>
     eb0:	a8 2e       	mov	r10, r24
     eb2:	a8 18       	sub	r10, r8
     eb4:	44 c0       	rjmp	.+136    	; 0xf3e <vfprintf+0x290>
     eb6:	85 37       	cpi	r24, 0x75	; 117
     eb8:	29 f4       	brne	.+10     	; 0xec4 <vfprintf+0x216>
     eba:	2f 7e       	andi	r18, 0xEF	; 239
     ebc:	b2 2e       	mov	r11, r18
     ebe:	2a e0       	ldi	r18, 0x0A	; 10
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	25 c0       	rjmp	.+74     	; 0xf0e <vfprintf+0x260>
     ec4:	f2 2f       	mov	r31, r18
     ec6:	f9 7f       	andi	r31, 0xF9	; 249
     ec8:	bf 2e       	mov	r11, r31
     eca:	8f 36       	cpi	r24, 0x6F	; 111
     ecc:	c1 f0       	breq	.+48     	; 0xefe <vfprintf+0x250>
     ece:	18 f4       	brcc	.+6      	; 0xed6 <vfprintf+0x228>
     ed0:	88 35       	cpi	r24, 0x58	; 88
     ed2:	79 f0       	breq	.+30     	; 0xef2 <vfprintf+0x244>
     ed4:	b4 c0       	rjmp	.+360    	; 0x103e <vfprintf+0x390>
     ed6:	80 37       	cpi	r24, 0x70	; 112
     ed8:	19 f0       	breq	.+6      	; 0xee0 <vfprintf+0x232>
     eda:	88 37       	cpi	r24, 0x78	; 120
     edc:	21 f0       	breq	.+8      	; 0xee6 <vfprintf+0x238>
     ede:	af c0       	rjmp	.+350    	; 0x103e <vfprintf+0x390>
     ee0:	2f 2f       	mov	r18, r31
     ee2:	20 61       	ori	r18, 0x10	; 16
     ee4:	b2 2e       	mov	r11, r18
     ee6:	b4 fe       	sbrs	r11, 4
     ee8:	0d c0       	rjmp	.+26     	; 0xf04 <vfprintf+0x256>
     eea:	8b 2d       	mov	r24, r11
     eec:	84 60       	ori	r24, 0x04	; 4
     eee:	b8 2e       	mov	r11, r24
     ef0:	09 c0       	rjmp	.+18     	; 0xf04 <vfprintf+0x256>
     ef2:	24 ff       	sbrs	r18, 4
     ef4:	0a c0       	rjmp	.+20     	; 0xf0a <vfprintf+0x25c>
     ef6:	9f 2f       	mov	r25, r31
     ef8:	96 60       	ori	r25, 0x06	; 6
     efa:	b9 2e       	mov	r11, r25
     efc:	06 c0       	rjmp	.+12     	; 0xf0a <vfprintf+0x25c>
     efe:	28 e0       	ldi	r18, 0x08	; 8
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	05 c0       	rjmp	.+10     	; 0xf0e <vfprintf+0x260>
     f04:	20 e1       	ldi	r18, 0x10	; 16
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <vfprintf+0x260>
     f0a:	20 e1       	ldi	r18, 0x10	; 16
     f0c:	32 e0       	ldi	r19, 0x02	; 2
     f0e:	f8 01       	movw	r30, r16
     f10:	b7 fe       	sbrs	r11, 7
     f12:	07 c0       	rjmp	.+14     	; 0xf22 <vfprintf+0x274>
     f14:	60 81       	ld	r22, Z
     f16:	71 81       	ldd	r23, Z+1	; 0x01
     f18:	82 81       	ldd	r24, Z+2	; 0x02
     f1a:	93 81       	ldd	r25, Z+3	; 0x03
     f1c:	0c 5f       	subi	r16, 0xFC	; 252
     f1e:	1f 4f       	sbci	r17, 0xFF	; 255
     f20:	06 c0       	rjmp	.+12     	; 0xf2e <vfprintf+0x280>
     f22:	60 81       	ld	r22, Z
     f24:	71 81       	ldd	r23, Z+1	; 0x01
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 5f       	subi	r16, 0xFE	; 254
     f2c:	1f 4f       	sbci	r17, 0xFF	; 255
     f2e:	a4 01       	movw	r20, r8
     f30:	0e 94 90 0b 	call	0x1720	; 0x1720 <__ultoa_invert>
     f34:	a8 2e       	mov	r10, r24
     f36:	a8 18       	sub	r10, r8
     f38:	fb 2d       	mov	r31, r11
     f3a:	ff 77       	andi	r31, 0x7F	; 127
     f3c:	bf 2e       	mov	r11, r31
     f3e:	b6 fe       	sbrs	r11, 6
     f40:	0b c0       	rjmp	.+22     	; 0xf58 <vfprintf+0x2aa>
     f42:	2b 2d       	mov	r18, r11
     f44:	2e 7f       	andi	r18, 0xFE	; 254
     f46:	a5 14       	cp	r10, r5
     f48:	50 f4       	brcc	.+20     	; 0xf5e <vfprintf+0x2b0>
     f4a:	b4 fe       	sbrs	r11, 4
     f4c:	0a c0       	rjmp	.+20     	; 0xf62 <vfprintf+0x2b4>
     f4e:	b2 fc       	sbrc	r11, 2
     f50:	08 c0       	rjmp	.+16     	; 0xf62 <vfprintf+0x2b4>
     f52:	2b 2d       	mov	r18, r11
     f54:	2e 7e       	andi	r18, 0xEE	; 238
     f56:	05 c0       	rjmp	.+10     	; 0xf62 <vfprintf+0x2b4>
     f58:	7a 2c       	mov	r7, r10
     f5a:	2b 2d       	mov	r18, r11
     f5c:	03 c0       	rjmp	.+6      	; 0xf64 <vfprintf+0x2b6>
     f5e:	7a 2c       	mov	r7, r10
     f60:	01 c0       	rjmp	.+2      	; 0xf64 <vfprintf+0x2b6>
     f62:	75 2c       	mov	r7, r5
     f64:	24 ff       	sbrs	r18, 4
     f66:	0d c0       	rjmp	.+26     	; 0xf82 <vfprintf+0x2d4>
     f68:	fe 01       	movw	r30, r28
     f6a:	ea 0d       	add	r30, r10
     f6c:	f1 1d       	adc	r31, r1
     f6e:	80 81       	ld	r24, Z
     f70:	80 33       	cpi	r24, 0x30	; 48
     f72:	11 f4       	brne	.+4      	; 0xf78 <vfprintf+0x2ca>
     f74:	29 7e       	andi	r18, 0xE9	; 233
     f76:	09 c0       	rjmp	.+18     	; 0xf8a <vfprintf+0x2dc>
     f78:	22 ff       	sbrs	r18, 2
     f7a:	06 c0       	rjmp	.+12     	; 0xf88 <vfprintf+0x2da>
     f7c:	73 94       	inc	r7
     f7e:	73 94       	inc	r7
     f80:	04 c0       	rjmp	.+8      	; 0xf8a <vfprintf+0x2dc>
     f82:	82 2f       	mov	r24, r18
     f84:	86 78       	andi	r24, 0x86	; 134
     f86:	09 f0       	breq	.+2      	; 0xf8a <vfprintf+0x2dc>
     f88:	73 94       	inc	r7
     f8a:	23 fd       	sbrc	r18, 3
     f8c:	13 c0       	rjmp	.+38     	; 0xfb4 <vfprintf+0x306>
     f8e:	20 ff       	sbrs	r18, 0
     f90:	06 c0       	rjmp	.+12     	; 0xf9e <vfprintf+0x2f0>
     f92:	5a 2c       	mov	r5, r10
     f94:	73 14       	cp	r7, r3
     f96:	18 f4       	brcc	.+6      	; 0xf9e <vfprintf+0x2f0>
     f98:	53 0c       	add	r5, r3
     f9a:	57 18       	sub	r5, r7
     f9c:	73 2c       	mov	r7, r3
     f9e:	73 14       	cp	r7, r3
     fa0:	68 f4       	brcc	.+26     	; 0xfbc <vfprintf+0x30e>
     fa2:	b7 01       	movw	r22, r14
     fa4:	80 e2       	ldi	r24, 0x20	; 32
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	2c 87       	std	Y+12, r18	; 0x0c
     faa:	0e 94 45 0b 	call	0x168a	; 0x168a <fputc>
     fae:	73 94       	inc	r7
     fb0:	2c 85       	ldd	r18, Y+12	; 0x0c
     fb2:	f5 cf       	rjmp	.-22     	; 0xf9e <vfprintf+0x2f0>
     fb4:	73 14       	cp	r7, r3
     fb6:	10 f4       	brcc	.+4      	; 0xfbc <vfprintf+0x30e>
     fb8:	37 18       	sub	r3, r7
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <vfprintf+0x310>
     fbc:	31 2c       	mov	r3, r1
     fbe:	24 ff       	sbrs	r18, 4
     fc0:	12 c0       	rjmp	.+36     	; 0xfe6 <vfprintf+0x338>
     fc2:	b7 01       	movw	r22, r14
     fc4:	80 e3       	ldi	r24, 0x30	; 48
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	2c 87       	std	Y+12, r18	; 0x0c
     fca:	0e 94 45 0b 	call	0x168a	; 0x168a <fputc>
     fce:	2c 85       	ldd	r18, Y+12	; 0x0c
     fd0:	22 ff       	sbrs	r18, 2
     fd2:	17 c0       	rjmp	.+46     	; 0x1002 <vfprintf+0x354>
     fd4:	21 ff       	sbrs	r18, 1
     fd6:	03 c0       	rjmp	.+6      	; 0xfde <vfprintf+0x330>
     fd8:	88 e5       	ldi	r24, 0x58	; 88
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <vfprintf+0x334>
     fde:	88 e7       	ldi	r24, 0x78	; 120
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	b7 01       	movw	r22, r14
     fe4:	0c c0       	rjmp	.+24     	; 0xffe <vfprintf+0x350>
     fe6:	82 2f       	mov	r24, r18
     fe8:	86 78       	andi	r24, 0x86	; 134
     fea:	59 f0       	breq	.+22     	; 0x1002 <vfprintf+0x354>
     fec:	21 fd       	sbrc	r18, 1
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <vfprintf+0x346>
     ff0:	80 e2       	ldi	r24, 0x20	; 32
     ff2:	01 c0       	rjmp	.+2      	; 0xff6 <vfprintf+0x348>
     ff4:	8b e2       	ldi	r24, 0x2B	; 43
     ff6:	27 fd       	sbrc	r18, 7
     ff8:	8d e2       	ldi	r24, 0x2D	; 45
     ffa:	b7 01       	movw	r22, r14
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	0e 94 45 0b 	call	0x168a	; 0x168a <fputc>
    1002:	a5 14       	cp	r10, r5
    1004:	38 f4       	brcc	.+14     	; 0x1014 <vfprintf+0x366>
    1006:	b7 01       	movw	r22, r14
    1008:	80 e3       	ldi	r24, 0x30	; 48
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 45 0b 	call	0x168a	; 0x168a <fputc>
    1010:	5a 94       	dec	r5
    1012:	f7 cf       	rjmp	.-18     	; 0x1002 <vfprintf+0x354>
    1014:	aa 94       	dec	r10
    1016:	f4 01       	movw	r30, r8
    1018:	ea 0d       	add	r30, r10
    101a:	f1 1d       	adc	r31, r1
    101c:	80 81       	ld	r24, Z
    101e:	b7 01       	movw	r22, r14
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 45 0b 	call	0x168a	; 0x168a <fputc>
    1026:	a1 10       	cpse	r10, r1
    1028:	f5 cf       	rjmp	.-22     	; 0x1014 <vfprintf+0x366>
    102a:	33 20       	and	r3, r3
    102c:	09 f4       	brne	.+2      	; 0x1030 <vfprintf+0x382>
    102e:	51 ce       	rjmp	.-862    	; 0xcd2 <vfprintf+0x24>
    1030:	b7 01       	movw	r22, r14
    1032:	80 e2       	ldi	r24, 0x20	; 32
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 45 0b 	call	0x168a	; 0x168a <fputc>
    103a:	3a 94       	dec	r3
    103c:	f6 cf       	rjmp	.-20     	; 0x102a <vfprintf+0x37c>
    103e:	f7 01       	movw	r30, r14
    1040:	86 81       	ldd	r24, Z+6	; 0x06
    1042:	97 81       	ldd	r25, Z+7	; 0x07
    1044:	02 c0       	rjmp	.+4      	; 0x104a <vfprintf+0x39c>
    1046:	8f ef       	ldi	r24, 0xFF	; 255
    1048:	9f ef       	ldi	r25, 0xFF	; 255
    104a:	2c 96       	adiw	r28, 0x0c	; 12
    104c:	e2 e1       	ldi	r30, 0x12	; 18
    104e:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__epilogue_restores__>

00001052 <putval>:
    1052:	20 fd       	sbrc	r18, 0
    1054:	09 c0       	rjmp	.+18     	; 0x1068 <putval+0x16>
    1056:	fc 01       	movw	r30, r24
    1058:	23 fd       	sbrc	r18, 3
    105a:	05 c0       	rjmp	.+10     	; 0x1066 <putval+0x14>
    105c:	22 ff       	sbrs	r18, 2
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <putval+0x12>
    1060:	73 83       	std	Z+3, r23	; 0x03
    1062:	62 83       	std	Z+2, r22	; 0x02
    1064:	51 83       	std	Z+1, r21	; 0x01
    1066:	40 83       	st	Z, r20
    1068:	08 95       	ret

0000106a <mulacc>:
    106a:	44 fd       	sbrc	r20, 4
    106c:	10 c0       	rjmp	.+32     	; 0x108e <mulacc+0x24>
    106e:	46 fd       	sbrc	r20, 6
    1070:	10 c0       	rjmp	.+32     	; 0x1092 <mulacc+0x28>
    1072:	db 01       	movw	r26, r22
    1074:	fc 01       	movw	r30, r24
    1076:	aa 0f       	add	r26, r26
    1078:	bb 1f       	adc	r27, r27
    107a:	ee 1f       	adc	r30, r30
    107c:	ff 1f       	adc	r31, r31
    107e:	10 94       	com	r1
    1080:	d1 f7       	brne	.-12     	; 0x1076 <mulacc+0xc>
    1082:	6a 0f       	add	r22, r26
    1084:	7b 1f       	adc	r23, r27
    1086:	8e 1f       	adc	r24, r30
    1088:	9f 1f       	adc	r25, r31
    108a:	31 e0       	ldi	r19, 0x01	; 1
    108c:	03 c0       	rjmp	.+6      	; 0x1094 <mulacc+0x2a>
    108e:	33 e0       	ldi	r19, 0x03	; 3
    1090:	01 c0       	rjmp	.+2      	; 0x1094 <mulacc+0x2a>
    1092:	34 e0       	ldi	r19, 0x04	; 4
    1094:	66 0f       	add	r22, r22
    1096:	77 1f       	adc	r23, r23
    1098:	88 1f       	adc	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	31 50       	subi	r19, 0x01	; 1
    109e:	d1 f7       	brne	.-12     	; 0x1094 <mulacc+0x2a>
    10a0:	62 0f       	add	r22, r18
    10a2:	71 1d       	adc	r23, r1
    10a4:	81 1d       	adc	r24, r1
    10a6:	91 1d       	adc	r25, r1
    10a8:	08 95       	ret

000010aa <skip_spaces>:
    10aa:	0f 93       	push	r16
    10ac:	1f 93       	push	r17
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	8c 01       	movw	r16, r24
    10b4:	c8 01       	movw	r24, r16
    10b6:	0e 94 07 0b 	call	0x160e	; 0x160e <fgetc>
    10ba:	ec 01       	movw	r28, r24
    10bc:	97 fd       	sbrc	r25, 7
    10be:	08 c0       	rjmp	.+16     	; 0x10d0 <skip_spaces+0x26>
    10c0:	0e 94 de 0a 	call	0x15bc	; 0x15bc <isspace>
    10c4:	89 2b       	or	r24, r25
    10c6:	b1 f7       	brne	.-20     	; 0x10b4 <skip_spaces+0xa>
    10c8:	b8 01       	movw	r22, r16
    10ca:	ce 01       	movw	r24, r28
    10cc:	0e 94 77 0b 	call	0x16ee	; 0x16ee <ungetc>
    10d0:	ce 01       	movw	r24, r28
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	1f 91       	pop	r17
    10d8:	0f 91       	pop	r16
    10da:	08 95       	ret

000010dc <conv_int>:
    10dc:	8f 92       	push	r8
    10de:	9f 92       	push	r9
    10e0:	af 92       	push	r10
    10e2:	cf 92       	push	r12
    10e4:	df 92       	push	r13
    10e6:	ef 92       	push	r14
    10e8:	ff 92       	push	r15
    10ea:	0f 93       	push	r16
    10ec:	1f 93       	push	r17
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	ec 01       	movw	r28, r24
    10f4:	a6 2e       	mov	r10, r22
    10f6:	4a 01       	movw	r8, r20
    10f8:	02 2f       	mov	r16, r18
    10fa:	0e 94 07 0b 	call	0x160e	; 0x160e <fgetc>
    10fe:	ac 01       	movw	r20, r24
    1100:	55 27       	eor	r21, r21
    1102:	4b 32       	cpi	r20, 0x2B	; 43
    1104:	51 05       	cpc	r21, r1
    1106:	21 f0       	breq	.+8      	; 0x1110 <conv_int+0x34>
    1108:	4d 32       	cpi	r20, 0x2D	; 45
    110a:	51 05       	cpc	r21, r1
    110c:	51 f4       	brne	.+20     	; 0x1122 <conv_int+0x46>
    110e:	00 68       	ori	r16, 0x80	; 128
    1110:	aa 94       	dec	r10
    1112:	11 f4       	brne	.+4      	; 0x1118 <conv_int+0x3c>
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	67 c0       	rjmp	.+206    	; 0x11e6 <conv_int+0x10a>
    1118:	ce 01       	movw	r24, r28
    111a:	0e 94 07 0b 	call	0x160e	; 0x160e <fgetc>
    111e:	97 fd       	sbrc	r25, 7
    1120:	f9 cf       	rjmp	.-14     	; 0x1114 <conv_int+0x38>
    1122:	10 2f       	mov	r17, r16
    1124:	1d 7f       	andi	r17, 0xFD	; 253
    1126:	30 2f       	mov	r19, r16
    1128:	30 73       	andi	r19, 0x30	; 48
    112a:	01 f5       	brne	.+64     	; 0x116c <conv_int+0x90>
    112c:	80 33       	cpi	r24, 0x30	; 48
    112e:	f1 f4       	brne	.+60     	; 0x116c <conv_int+0x90>
    1130:	ff 24       	eor	r15, r15
    1132:	fa 94       	dec	r15
    1134:	fa 0c       	add	r15, r10
    1136:	09 f4       	brne	.+2      	; 0x113a <conv_int+0x5e>
    1138:	42 c0       	rjmp	.+132    	; 0x11be <conv_int+0xe2>
    113a:	ce 01       	movw	r24, r28
    113c:	0e 94 07 0b 	call	0x160e	; 0x160e <fgetc>
    1140:	97 fd       	sbrc	r25, 7
    1142:	3d c0       	rjmp	.+122    	; 0x11be <conv_int+0xe2>
    1144:	38 2f       	mov	r19, r24
    1146:	3f 7d       	andi	r19, 0xDF	; 223
    1148:	38 35       	cpi	r19, 0x58	; 88
    114a:	51 f4       	brne	.+20     	; 0x1160 <conv_int+0x84>
    114c:	12 64       	ori	r17, 0x42	; 66
    114e:	aa 94       	dec	r10
    1150:	aa 94       	dec	r10
    1152:	a9 f1       	breq	.+106    	; 0x11be <conv_int+0xe2>
    1154:	ce 01       	movw	r24, r28
    1156:	0e 94 07 0b 	call	0x160e	; 0x160e <fgetc>
    115a:	97 ff       	sbrs	r25, 7
    115c:	07 c0       	rjmp	.+14     	; 0x116c <conv_int+0x90>
    115e:	2f c0       	rjmp	.+94     	; 0x11be <conv_int+0xe2>
    1160:	06 ff       	sbrs	r16, 6
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <conv_int+0x8c>
    1164:	12 60       	ori	r17, 0x02	; 2
    1166:	01 c0       	rjmp	.+2      	; 0x116a <conv_int+0x8e>
    1168:	12 61       	ori	r17, 0x12	; 18
    116a:	af 2c       	mov	r10, r15
    116c:	c1 2c       	mov	r12, r1
    116e:	d1 2c       	mov	r13, r1
    1170:	76 01       	movw	r14, r12
    1172:	20 ed       	ldi	r18, 0xD0	; 208
    1174:	28 0f       	add	r18, r24
    1176:	28 30       	cpi	r18, 0x08	; 8
    1178:	80 f0       	brcs	.+32     	; 0x119a <conv_int+0xbe>
    117a:	14 ff       	sbrs	r17, 4
    117c:	04 c0       	rjmp	.+8      	; 0x1186 <conv_int+0xaa>
    117e:	be 01       	movw	r22, r28
    1180:	0e 94 77 0b 	call	0x16ee	; 0x16ee <ungetc>
    1184:	19 c0       	rjmp	.+50     	; 0x11b8 <conv_int+0xdc>
    1186:	2a 30       	cpi	r18, 0x0A	; 10
    1188:	40 f0       	brcs	.+16     	; 0x119a <conv_int+0xbe>
    118a:	16 ff       	sbrs	r17, 6
    118c:	f8 cf       	rjmp	.-16     	; 0x117e <conv_int+0xa2>
    118e:	2f 7d       	andi	r18, 0xDF	; 223
    1190:	3f ee       	ldi	r19, 0xEF	; 239
    1192:	32 0f       	add	r19, r18
    1194:	36 30       	cpi	r19, 0x06	; 6
    1196:	98 f7       	brcc	.-26     	; 0x117e <conv_int+0xa2>
    1198:	27 50       	subi	r18, 0x07	; 7
    119a:	41 2f       	mov	r20, r17
    119c:	c7 01       	movw	r24, r14
    119e:	b6 01       	movw	r22, r12
    11a0:	0e 94 35 08 	call	0x106a	; 0x106a <mulacc>
    11a4:	6b 01       	movw	r12, r22
    11a6:	7c 01       	movw	r14, r24
    11a8:	12 60       	ori	r17, 0x02	; 2
    11aa:	aa 94       	dec	r10
    11ac:	59 f0       	breq	.+22     	; 0x11c4 <conv_int+0xe8>
    11ae:	ce 01       	movw	r24, r28
    11b0:	0e 94 07 0b 	call	0x160e	; 0x160e <fgetc>
    11b4:	97 ff       	sbrs	r25, 7
    11b6:	dd cf       	rjmp	.-70     	; 0x1172 <conv_int+0x96>
    11b8:	11 fd       	sbrc	r17, 1
    11ba:	04 c0       	rjmp	.+8      	; 0x11c4 <conv_int+0xe8>
    11bc:	ab cf       	rjmp	.-170    	; 0x1114 <conv_int+0x38>
    11be:	c1 2c       	mov	r12, r1
    11c0:	d1 2c       	mov	r13, r1
    11c2:	76 01       	movw	r14, r12
    11c4:	17 ff       	sbrs	r17, 7
    11c6:	08 c0       	rjmp	.+16     	; 0x11d8 <conv_int+0xfc>
    11c8:	f0 94       	com	r15
    11ca:	e0 94       	com	r14
    11cc:	d0 94       	com	r13
    11ce:	c0 94       	com	r12
    11d0:	c1 1c       	adc	r12, r1
    11d2:	d1 1c       	adc	r13, r1
    11d4:	e1 1c       	adc	r14, r1
    11d6:	f1 1c       	adc	r15, r1
    11d8:	21 2f       	mov	r18, r17
    11da:	b7 01       	movw	r22, r14
    11dc:	a6 01       	movw	r20, r12
    11de:	c4 01       	movw	r24, r8
    11e0:	0e 94 29 08 	call	0x1052	; 0x1052 <putval>
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	ff 90       	pop	r15
    11f0:	ef 90       	pop	r14
    11f2:	df 90       	pop	r13
    11f4:	cf 90       	pop	r12
    11f6:	af 90       	pop	r10
    11f8:	9f 90       	pop	r9
    11fa:	8f 90       	pop	r8
    11fc:	08 95       	ret

000011fe <conv_brk>:
    11fe:	a1 e2       	ldi	r26, 0x21	; 33
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e5 e0       	ldi	r30, 0x05	; 5
    1204:	f9 e0       	ldi	r31, 0x09	; 9
    1206:	0c 94 f6 0b 	jmp	0x17ec	; 0x17ec <__prologue_saves__+0xa>
    120a:	5c 01       	movw	r10, r24
    120c:	7a 01       	movw	r14, r20
    120e:	8e 01       	movw	r16, r28
    1210:	0f 5f       	subi	r16, 0xFF	; 255
    1212:	1f 4f       	sbci	r17, 0xFF	; 255
    1214:	68 01       	movw	r12, r16
    1216:	80 e2       	ldi	r24, 0x20	; 32
    1218:	d8 01       	movw	r26, r16
    121a:	1d 92       	st	X+, r1
    121c:	8a 95       	dec	r24
    121e:	e9 f7       	brne	.-6      	; 0x121a <conv_brk+0x1c>
    1220:	f5 01       	movw	r30, r10
    1222:	73 80       	ldd	r7, Z+3	; 0x03
    1224:	40 e0       	ldi	r20, 0x00	; 0
    1226:	50 e0       	ldi	r21, 0x00	; 0
    1228:	81 2c       	mov	r8, r1
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	91 2c       	mov	r9, r1
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	f9 01       	movw	r30, r18
    1234:	73 fc       	sbrc	r7, 3
    1236:	a5 91       	lpm	r26, Z+
    1238:	73 fe       	sbrs	r7, 3
    123a:	a1 91       	ld	r26, Z+
    123c:	8f 01       	movw	r16, r30
    123e:	7a 2f       	mov	r23, r26
    1240:	9f 01       	movw	r18, r30
    1242:	a1 11       	cpse	r26, r1
    1244:	03 c0       	rjmp	.+6      	; 0x124c <conv_brk+0x4e>
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	7d c0       	rjmp	.+250    	; 0x1346 <conv_brk+0x148>
    124c:	ae 35       	cpi	r26, 0x5E	; 94
    124e:	19 f4       	brne	.+6      	; 0x1256 <conv_brk+0x58>
    1250:	41 15       	cp	r20, r1
    1252:	51 05       	cpc	r21, r1
    1254:	59 f1       	breq	.+86     	; 0x12ac <conv_brk+0xae>
    1256:	e9 2d       	mov	r30, r9
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	e4 17       	cp	r30, r20
    125c:	f5 07       	cpc	r31, r21
    125e:	3c f4       	brge	.+14     	; 0x126e <conv_brk+0x70>
    1260:	ad 35       	cpi	r26, 0x5D	; 93
    1262:	69 f1       	breq	.+90     	; 0x12be <conv_brk+0xc0>
    1264:	ad 32       	cpi	r26, 0x2D	; 45
    1266:	19 f4       	brne	.+6      	; 0x126e <conv_brk+0x70>
    1268:	bb 23       	and	r27, r27
    126a:	19 f1       	breq	.+70     	; 0x12b2 <conv_brk+0xb4>
    126c:	03 c0       	rjmp	.+6      	; 0x1274 <conv_brk+0x76>
    126e:	b1 11       	cpse	r27, r1
    1270:	01 c0       	rjmp	.+2      	; 0x1274 <conv_brk+0x76>
    1272:	8a 2e       	mov	r8, r26
    1274:	e7 2f       	mov	r30, r23
    1276:	e6 95       	lsr	r30
    1278:	e6 95       	lsr	r30
    127a:	e6 95       	lsr	r30
    127c:	86 01       	movw	r16, r12
    127e:	0e 0f       	add	r16, r30
    1280:	11 1d       	adc	r17, r1
    1282:	f8 01       	movw	r30, r16
    1284:	a7 2f       	mov	r26, r23
    1286:	a7 70       	andi	r26, 0x07	; 7
    1288:	8c 01       	movw	r16, r24
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <conv_brk+0x92>
    128c:	00 0f       	add	r16, r16
    128e:	11 1f       	adc	r17, r17
    1290:	aa 95       	dec	r26
    1292:	e2 f7       	brpl	.-8      	; 0x128c <conv_brk+0x8e>
    1294:	d8 01       	movw	r26, r16
    1296:	b0 81       	ld	r27, Z
    1298:	ba 2b       	or	r27, r26
    129a:	b0 83       	st	Z, r27
    129c:	78 15       	cp	r23, r8
    129e:	59 f0       	breq	.+22     	; 0x12b6 <conv_brk+0xb8>
    12a0:	78 15       	cp	r23, r8
    12a2:	10 f4       	brcc	.+4      	; 0x12a8 <conv_brk+0xaa>
    12a4:	7f 5f       	subi	r23, 0xFF	; 255
    12a6:	e6 cf       	rjmp	.-52     	; 0x1274 <conv_brk+0x76>
    12a8:	71 50       	subi	r23, 0x01	; 1
    12aa:	e4 cf       	rjmp	.-56     	; 0x1274 <conv_brk+0x76>
    12ac:	99 24       	eor	r9, r9
    12ae:	93 94       	inc	r9
    12b0:	03 c0       	rjmp	.+6      	; 0x12b8 <conv_brk+0xba>
    12b2:	b1 e0       	ldi	r27, 0x01	; 1
    12b4:	01 c0       	rjmp	.+2      	; 0x12b8 <conv_brk+0xba>
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	4f 5f       	subi	r20, 0xFF	; 255
    12ba:	5f 4f       	sbci	r21, 0xFF	; 255
    12bc:	ba cf       	rjmp	.-140    	; 0x1232 <conv_brk+0x34>
    12be:	bb 23       	and	r27, r27
    12c0:	19 f0       	breq	.+6      	; 0x12c8 <conv_brk+0xca>
    12c2:	8e 81       	ldd	r24, Y+6	; 0x06
    12c4:	80 62       	ori	r24, 0x20	; 32
    12c6:	8e 83       	std	Y+6, r24	; 0x06
    12c8:	91 10       	cpse	r9, r1
    12ca:	03 c0       	rjmp	.+6      	; 0x12d2 <conv_brk+0xd4>
    12cc:	99 24       	eor	r9, r9
    12ce:	93 94       	inc	r9
    12d0:	15 c0       	rjmp	.+42     	; 0x12fc <conv_brk+0xfe>
    12d2:	f6 01       	movw	r30, r12
    12d4:	ce 01       	movw	r24, r28
    12d6:	81 96       	adiw	r24, 0x21	; 33
    12d8:	20 81       	ld	r18, Z
    12da:	20 95       	com	r18
    12dc:	21 93       	st	Z+, r18
    12de:	e8 17       	cp	r30, r24
    12e0:	f9 07       	cpc	r31, r25
    12e2:	d1 f7       	brne	.-12     	; 0x12d8 <conv_brk+0xda>
    12e4:	f3 cf       	rjmp	.-26     	; 0x12cc <conv_brk+0xce>
    12e6:	e1 14       	cp	r14, r1
    12e8:	f1 04       	cpc	r15, r1
    12ea:	29 f0       	breq	.+10     	; 0x12f6 <conv_brk+0xf8>
    12ec:	d7 01       	movw	r26, r14
    12ee:	8c 93       	st	X, r24
    12f0:	f7 01       	movw	r30, r14
    12f2:	31 96       	adiw	r30, 0x01	; 1
    12f4:	7f 01       	movw	r14, r30
    12f6:	61 50       	subi	r22, 0x01	; 1
    12f8:	01 f1       	breq	.+64     	; 0x133a <conv_brk+0x13c>
    12fa:	91 2c       	mov	r9, r1
    12fc:	c5 01       	movw	r24, r10
    12fe:	69 a3       	std	Y+33, r22	; 0x21
    1300:	0e 94 07 0b 	call	0x160e	; 0x160e <fgetc>
    1304:	69 a1       	ldd	r22, Y+33	; 0x21
    1306:	97 fd       	sbrc	r25, 7
    1308:	16 c0       	rjmp	.+44     	; 0x1336 <conv_brk+0x138>
    130a:	28 2f       	mov	r18, r24
    130c:	26 95       	lsr	r18
    130e:	26 95       	lsr	r18
    1310:	26 95       	lsr	r18
    1312:	f6 01       	movw	r30, r12
    1314:	e2 0f       	add	r30, r18
    1316:	f1 1d       	adc	r31, r1
    1318:	20 81       	ld	r18, Z
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	ac 01       	movw	r20, r24
    131e:	47 70       	andi	r20, 0x07	; 7
    1320:	55 27       	eor	r21, r21
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <conv_brk+0x12a>
    1324:	35 95       	asr	r19
    1326:	27 95       	ror	r18
    1328:	4a 95       	dec	r20
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <conv_brk+0x126>
    132c:	20 fd       	sbrc	r18, 0
    132e:	db cf       	rjmp	.-74     	; 0x12e6 <conv_brk+0xe8>
    1330:	b5 01       	movw	r22, r10
    1332:	0e 94 77 0b 	call	0x16ee	; 0x16ee <ungetc>
    1336:	91 10       	cpse	r9, r1
    1338:	86 cf       	rjmp	.-244    	; 0x1246 <conv_brk+0x48>
    133a:	e1 14       	cp	r14, r1
    133c:	f1 04       	cpc	r15, r1
    133e:	11 f0       	breq	.+4      	; 0x1344 <conv_brk+0x146>
    1340:	d7 01       	movw	r26, r14
    1342:	1c 92       	st	X, r1
    1344:	c8 01       	movw	r24, r16
    1346:	a1 96       	adiw	r28, 0x21	; 33
    1348:	ed e0       	ldi	r30, 0x0D	; 13
    134a:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__epilogue_restores__+0xa>

0000134e <vfscanf>:
    134e:	4f 92       	push	r4
    1350:	5f 92       	push	r5
    1352:	7f 92       	push	r7
    1354:	8f 92       	push	r8
    1356:	9f 92       	push	r9
    1358:	af 92       	push	r10
    135a:	bf 92       	push	r11
    135c:	cf 92       	push	r12
    135e:	df 92       	push	r13
    1360:	ef 92       	push	r14
    1362:	ff 92       	push	r15
    1364:	0f 93       	push	r16
    1366:	1f 93       	push	r17
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	1f 92       	push	r1
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	8c 01       	movw	r16, r24
    1374:	2b 01       	movw	r4, r22
    1376:	7a 01       	movw	r14, r20
    1378:	fc 01       	movw	r30, r24
    137a:	17 82       	std	Z+7, r1	; 0x07
    137c:	16 82       	std	Z+6, r1	; 0x06
    137e:	a1 2c       	mov	r10, r1
    1380:	f8 01       	movw	r30, r16
    1382:	d3 80       	ldd	r13, Z+3	; 0x03
    1384:	f2 01       	movw	r30, r4
    1386:	d3 fc       	sbrc	r13, 3
    1388:	85 91       	lpm	r24, Z+
    138a:	d3 fe       	sbrs	r13, 3
    138c:	81 91       	ld	r24, Z+
    138e:	38 2f       	mov	r19, r24
    1390:	2f 01       	movw	r4, r30
    1392:	88 23       	and	r24, r24
    1394:	09 f4       	brne	.+2      	; 0x1398 <vfscanf+0x4a>
    1396:	fc c0       	rjmp	.+504    	; 0x1590 <vfscanf+0x242>
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	39 83       	std	Y+1, r19	; 0x01
    139c:	0e 94 de 0a 	call	0x15bc	; 0x15bc <isspace>
    13a0:	39 81       	ldd	r19, Y+1	; 0x01
    13a2:	89 2b       	or	r24, r25
    13a4:	21 f0       	breq	.+8      	; 0x13ae <vfscanf+0x60>
    13a6:	c8 01       	movw	r24, r16
    13a8:	0e 94 55 08 	call	0x10aa	; 0x10aa <skip_spaces>
    13ac:	e9 cf       	rjmp	.-46     	; 0x1380 <vfscanf+0x32>
    13ae:	35 32       	cpi	r19, 0x25	; 37
    13b0:	41 f4       	brne	.+16     	; 0x13c2 <vfscanf+0x74>
    13b2:	f2 01       	movw	r30, r4
    13b4:	d3 fc       	sbrc	r13, 3
    13b6:	35 91       	lpm	r19, Z+
    13b8:	d3 fe       	sbrs	r13, 3
    13ba:	31 91       	ld	r19, Z+
    13bc:	2f 01       	movw	r4, r30
    13be:	35 32       	cpi	r19, 0x25	; 37
    13c0:	69 f4       	brne	.+26     	; 0x13dc <vfscanf+0x8e>
    13c2:	c8 01       	movw	r24, r16
    13c4:	39 83       	std	Y+1, r19	; 0x01
    13c6:	0e 94 07 0b 	call	0x160e	; 0x160e <fgetc>
    13ca:	39 81       	ldd	r19, Y+1	; 0x01
    13cc:	97 fd       	sbrc	r25, 7
    13ce:	de c0       	rjmp	.+444    	; 0x158c <vfscanf+0x23e>
    13d0:	38 17       	cp	r19, r24
    13d2:	b1 f2       	breq	.-84     	; 0x1380 <vfscanf+0x32>
    13d4:	b8 01       	movw	r22, r16
    13d6:	0e 94 77 0b 	call	0x16ee	; 0x16ee <ungetc>
    13da:	da c0       	rjmp	.+436    	; 0x1590 <vfscanf+0x242>
    13dc:	3a 32       	cpi	r19, 0x2A	; 42
    13de:	41 f4       	brne	.+16     	; 0x13f0 <vfscanf+0xa2>
    13e0:	d3 fc       	sbrc	r13, 3
    13e2:	35 91       	lpm	r19, Z+
    13e4:	d3 fe       	sbrs	r13, 3
    13e6:	31 91       	ld	r19, Z+
    13e8:	2f 01       	movw	r4, r30
    13ea:	bb 24       	eor	r11, r11
    13ec:	b3 94       	inc	r11
    13ee:	01 c0       	rjmp	.+2      	; 0x13f2 <vfscanf+0xa4>
    13f0:	b1 2c       	mov	r11, r1
    13f2:	71 2c       	mov	r7, r1
    13f4:	20 ed       	ldi	r18, 0xD0	; 208
    13f6:	23 0f       	add	r18, r19
    13f8:	2a 30       	cpi	r18, 0x0A	; 10
    13fa:	90 f4       	brcc	.+36     	; 0x1420 <vfscanf+0xd2>
    13fc:	fb 2d       	mov	r31, r11
    13fe:	f2 60       	ori	r31, 0x02	; 2
    1400:	bf 2e       	mov	r11, r31
    1402:	67 2d       	mov	r22, r7
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	40 e2       	ldi	r20, 0x20	; 32
    140c:	0e 94 35 08 	call	0x106a	; 0x106a <mulacc>
    1410:	76 2e       	mov	r7, r22
    1412:	f2 01       	movw	r30, r4
    1414:	d3 fc       	sbrc	r13, 3
    1416:	35 91       	lpm	r19, Z+
    1418:	d3 fe       	sbrs	r13, 3
    141a:	31 91       	ld	r19, Z+
    141c:	2f 01       	movw	r4, r30
    141e:	ea cf       	rjmp	.-44     	; 0x13f4 <vfscanf+0xa6>
    1420:	b1 fe       	sbrs	r11, 1
    1422:	03 c0       	rjmp	.+6      	; 0x142a <vfscanf+0xdc>
    1424:	71 10       	cpse	r7, r1
    1426:	03 c0       	rjmp	.+6      	; 0x142e <vfscanf+0xe0>
    1428:	b3 c0       	rjmp	.+358    	; 0x1590 <vfscanf+0x242>
    142a:	77 24       	eor	r7, r7
    142c:	7a 94       	dec	r7
    142e:	38 36       	cpi	r19, 0x68	; 104
    1430:	19 f0       	breq	.+6      	; 0x1438 <vfscanf+0xea>
    1432:	3c 36       	cpi	r19, 0x6C	; 108
    1434:	61 f0       	breq	.+24     	; 0x144e <vfscanf+0x100>
    1436:	14 c0       	rjmp	.+40     	; 0x1460 <vfscanf+0x112>
    1438:	f2 01       	movw	r30, r4
    143a:	d3 fc       	sbrc	r13, 3
    143c:	35 91       	lpm	r19, Z+
    143e:	d3 fe       	sbrs	r13, 3
    1440:	31 91       	ld	r19, Z+
    1442:	2f 01       	movw	r4, r30
    1444:	38 36       	cpi	r19, 0x68	; 104
    1446:	61 f4       	brne	.+24     	; 0x1460 <vfscanf+0x112>
    1448:	fb 2d       	mov	r31, r11
    144a:	f8 60       	ori	r31, 0x08	; 8
    144c:	bf 2e       	mov	r11, r31
    144e:	8b 2d       	mov	r24, r11
    1450:	84 60       	ori	r24, 0x04	; 4
    1452:	b8 2e       	mov	r11, r24
    1454:	f2 01       	movw	r30, r4
    1456:	d3 fc       	sbrc	r13, 3
    1458:	35 91       	lpm	r19, Z+
    145a:	d3 fe       	sbrs	r13, 3
    145c:	31 91       	ld	r19, Z+
    145e:	2f 01       	movw	r4, r30
    1460:	33 23       	and	r19, r19
    1462:	09 f4       	brne	.+2      	; 0x1466 <vfscanf+0x118>
    1464:	95 c0       	rjmp	.+298    	; 0x1590 <vfscanf+0x242>
    1466:	63 2f       	mov	r22, r19
    1468:	70 e0       	ldi	r23, 0x00	; 0
    146a:	88 e6       	ldi	r24, 0x68	; 104
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	39 83       	std	Y+1, r19	; 0x01
    1470:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <strchr_P>
    1474:	39 81       	ldd	r19, Y+1	; 0x01
    1476:	89 2b       	or	r24, r25
    1478:	09 f4       	brne	.+2      	; 0x147c <vfscanf+0x12e>
    147a:	8a c0       	rjmp	.+276    	; 0x1590 <vfscanf+0x242>
    147c:	b0 fc       	sbrc	r11, 0
    147e:	07 c0       	rjmp	.+14     	; 0x148e <vfscanf+0x140>
    1480:	f7 01       	movw	r30, r14
    1482:	c0 80       	ld	r12, Z
    1484:	d1 80       	ldd	r13, Z+1	; 0x01
    1486:	c7 01       	movw	r24, r14
    1488:	02 96       	adiw	r24, 0x02	; 2
    148a:	7c 01       	movw	r14, r24
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <vfscanf+0x144>
    148e:	c1 2c       	mov	r12, r1
    1490:	d1 2c       	mov	r13, r1
    1492:	3e 36       	cpi	r19, 0x6E	; 110
    1494:	51 f4       	brne	.+20     	; 0x14aa <vfscanf+0x15c>
    1496:	f8 01       	movw	r30, r16
    1498:	46 81       	ldd	r20, Z+6	; 0x06
    149a:	57 81       	ldd	r21, Z+7	; 0x07
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	2b 2d       	mov	r18, r11
    14a2:	c6 01       	movw	r24, r12
    14a4:	0e 94 29 08 	call	0x1052	; 0x1052 <putval>
    14a8:	6b cf       	rjmp	.-298    	; 0x1380 <vfscanf+0x32>
    14aa:	33 36       	cpi	r19, 0x63	; 99
    14ac:	a1 f4       	brne	.+40     	; 0x14d6 <vfscanf+0x188>
    14ae:	b1 fc       	sbrc	r11, 1
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <vfscanf+0x168>
    14b2:	77 24       	eor	r7, r7
    14b4:	73 94       	inc	r7
    14b6:	c8 01       	movw	r24, r16
    14b8:	0e 94 07 0b 	call	0x160e	; 0x160e <fgetc>
    14bc:	97 fd       	sbrc	r25, 7
    14be:	66 c0       	rjmp	.+204    	; 0x158c <vfscanf+0x23e>
    14c0:	c1 14       	cp	r12, r1
    14c2:	d1 04       	cpc	r13, r1
    14c4:	29 f0       	breq	.+10     	; 0x14d0 <vfscanf+0x182>
    14c6:	f6 01       	movw	r30, r12
    14c8:	80 83       	st	Z, r24
    14ca:	c6 01       	movw	r24, r12
    14cc:	01 96       	adiw	r24, 0x01	; 1
    14ce:	6c 01       	movw	r12, r24
    14d0:	7a 94       	dec	r7
    14d2:	89 f7       	brne	.-30     	; 0x14b6 <vfscanf+0x168>
    14d4:	57 c0       	rjmp	.+174    	; 0x1584 <vfscanf+0x236>
    14d6:	3b 35       	cpi	r19, 0x5B	; 91
    14d8:	59 f4       	brne	.+22     	; 0x14f0 <vfscanf+0x1a2>
    14da:	92 01       	movw	r18, r4
    14dc:	a6 01       	movw	r20, r12
    14de:	67 2d       	mov	r22, r7
    14e0:	c8 01       	movw	r24, r16
    14e2:	0e 94 ff 08 	call	0x11fe	; 0x11fe <conv_brk>
    14e6:	2c 01       	movw	r4, r24
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	09 f0       	breq	.+2      	; 0x14ee <vfscanf+0x1a0>
    14ec:	4b c0       	rjmp	.+150    	; 0x1584 <vfscanf+0x236>
    14ee:	45 c0       	rjmp	.+138    	; 0x157a <vfscanf+0x22c>
    14f0:	c8 01       	movw	r24, r16
    14f2:	39 83       	std	Y+1, r19	; 0x01
    14f4:	0e 94 55 08 	call	0x10aa	; 0x10aa <skip_spaces>
    14f8:	39 81       	ldd	r19, Y+1	; 0x01
    14fa:	97 fd       	sbrc	r25, 7
    14fc:	47 c0       	rjmp	.+142    	; 0x158c <vfscanf+0x23e>
    14fe:	3f 36       	cpi	r19, 0x6F	; 111
    1500:	69 f1       	breq	.+90     	; 0x155c <vfscanf+0x20e>
    1502:	28 f4       	brcc	.+10     	; 0x150e <vfscanf+0x1c0>
    1504:	34 36       	cpi	r19, 0x64	; 100
    1506:	31 f1       	breq	.+76     	; 0x1554 <vfscanf+0x206>
    1508:	39 36       	cpi	r19, 0x69	; 105
    150a:	79 f1       	breq	.+94     	; 0x156a <vfscanf+0x21c>
    150c:	2b c0       	rjmp	.+86     	; 0x1564 <vfscanf+0x216>
    150e:	33 37       	cpi	r19, 0x73	; 115
    1510:	69 f0       	breq	.+26     	; 0x152c <vfscanf+0x1de>
    1512:	35 37       	cpi	r19, 0x75	; 117
    1514:	f9 f0       	breq	.+62     	; 0x1554 <vfscanf+0x206>
    1516:	26 c0       	rjmp	.+76     	; 0x1564 <vfscanf+0x216>
    1518:	c1 14       	cp	r12, r1
    151a:	d1 04       	cpc	r13, r1
    151c:	29 f0       	breq	.+10     	; 0x1528 <vfscanf+0x1da>
    151e:	f6 01       	movw	r30, r12
    1520:	80 82       	st	Z, r8
    1522:	c6 01       	movw	r24, r12
    1524:	01 96       	adiw	r24, 0x01	; 1
    1526:	6c 01       	movw	r12, r24
    1528:	7a 94       	dec	r7
    152a:	71 f0       	breq	.+28     	; 0x1548 <vfscanf+0x1fa>
    152c:	c8 01       	movw	r24, r16
    152e:	0e 94 07 0b 	call	0x160e	; 0x160e <fgetc>
    1532:	4c 01       	movw	r8, r24
    1534:	97 fd       	sbrc	r25, 7
    1536:	08 c0       	rjmp	.+16     	; 0x1548 <vfscanf+0x1fa>
    1538:	0e 94 de 0a 	call	0x15bc	; 0x15bc <isspace>
    153c:	89 2b       	or	r24, r25
    153e:	61 f3       	breq	.-40     	; 0x1518 <vfscanf+0x1ca>
    1540:	b8 01       	movw	r22, r16
    1542:	c4 01       	movw	r24, r8
    1544:	0e 94 77 0b 	call	0x16ee	; 0x16ee <ungetc>
    1548:	c1 14       	cp	r12, r1
    154a:	d1 04       	cpc	r13, r1
    154c:	d9 f0       	breq	.+54     	; 0x1584 <vfscanf+0x236>
    154e:	f6 01       	movw	r30, r12
    1550:	10 82       	st	Z, r1
    1552:	18 c0       	rjmp	.+48     	; 0x1584 <vfscanf+0x236>
    1554:	fb 2d       	mov	r31, r11
    1556:	f0 62       	ori	r31, 0x20	; 32
    1558:	bf 2e       	mov	r11, r31
    155a:	07 c0       	rjmp	.+14     	; 0x156a <vfscanf+0x21c>
    155c:	8b 2d       	mov	r24, r11
    155e:	80 61       	ori	r24, 0x10	; 16
    1560:	b8 2e       	mov	r11, r24
    1562:	03 c0       	rjmp	.+6      	; 0x156a <vfscanf+0x21c>
    1564:	9b 2d       	mov	r25, r11
    1566:	90 64       	ori	r25, 0x40	; 64
    1568:	b9 2e       	mov	r11, r25
    156a:	2b 2d       	mov	r18, r11
    156c:	a6 01       	movw	r20, r12
    156e:	67 2d       	mov	r22, r7
    1570:	c8 01       	movw	r24, r16
    1572:	0e 94 6e 08 	call	0x10dc	; 0x10dc <conv_int>
    1576:	81 11       	cpse	r24, r1
    1578:	05 c0       	rjmp	.+10     	; 0x1584 <vfscanf+0x236>
    157a:	f8 01       	movw	r30, r16
    157c:	83 81       	ldd	r24, Z+3	; 0x03
    157e:	80 73       	andi	r24, 0x30	; 48
    1580:	29 f4       	brne	.+10     	; 0x158c <vfscanf+0x23e>
    1582:	06 c0       	rjmp	.+12     	; 0x1590 <vfscanf+0x242>
    1584:	b0 fc       	sbrc	r11, 0
    1586:	fc ce       	rjmp	.-520    	; 0x1380 <vfscanf+0x32>
    1588:	a3 94       	inc	r10
    158a:	fa ce       	rjmp	.-524    	; 0x1380 <vfscanf+0x32>
    158c:	aa 20       	and	r10, r10
    158e:	19 f0       	breq	.+6      	; 0x1596 <vfscanf+0x248>
    1590:	8a 2d       	mov	r24, r10
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	02 c0       	rjmp	.+4      	; 0x159a <vfscanf+0x24c>
    1596:	8f ef       	ldi	r24, 0xFF	; 255
    1598:	9f ef       	ldi	r25, 0xFF	; 255
    159a:	0f 90       	pop	r0
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	1f 91       	pop	r17
    15a2:	0f 91       	pop	r16
    15a4:	ff 90       	pop	r15
    15a6:	ef 90       	pop	r14
    15a8:	df 90       	pop	r13
    15aa:	cf 90       	pop	r12
    15ac:	bf 90       	pop	r11
    15ae:	af 90       	pop	r10
    15b0:	9f 90       	pop	r9
    15b2:	8f 90       	pop	r8
    15b4:	7f 90       	pop	r7
    15b6:	5f 90       	pop	r5
    15b8:	4f 90       	pop	r4
    15ba:	08 95       	ret

000015bc <isspace>:
    15bc:	91 11       	cpse	r25, r1
    15be:	0e c1       	rjmp	.+540    	; 0x17dc <__ctype_isfalse>
    15c0:	80 32       	cpi	r24, 0x20	; 32
    15c2:	19 f0       	breq	.+6      	; 0x15ca <isspace+0xe>
    15c4:	89 50       	subi	r24, 0x09	; 9
    15c6:	85 50       	subi	r24, 0x05	; 5
    15c8:	d0 f7       	brcc	.-12     	; 0x15be <isspace+0x2>
    15ca:	08 95       	ret

000015cc <strchr_P>:
    15cc:	fc 01       	movw	r30, r24
    15ce:	05 90       	lpm	r0, Z+
    15d0:	06 16       	cp	r0, r22
    15d2:	21 f0       	breq	.+8      	; 0x15dc <strchr_P+0x10>
    15d4:	00 20       	and	r0, r0
    15d6:	d9 f7       	brne	.-10     	; 0x15ce <strchr_P+0x2>
    15d8:	c0 01       	movw	r24, r0
    15da:	08 95       	ret
    15dc:	31 97       	sbiw	r30, 0x01	; 1
    15de:	cf 01       	movw	r24, r30
    15e0:	08 95       	ret

000015e2 <strnlen_P>:
    15e2:	fc 01       	movw	r30, r24
    15e4:	05 90       	lpm	r0, Z+
    15e6:	61 50       	subi	r22, 0x01	; 1
    15e8:	70 40       	sbci	r23, 0x00	; 0
    15ea:	01 10       	cpse	r0, r1
    15ec:	d8 f7       	brcc	.-10     	; 0x15e4 <strnlen_P+0x2>
    15ee:	80 95       	com	r24
    15f0:	90 95       	com	r25
    15f2:	8e 0f       	add	r24, r30
    15f4:	9f 1f       	adc	r25, r31
    15f6:	08 95       	ret

000015f8 <strnlen>:
    15f8:	fc 01       	movw	r30, r24
    15fa:	61 50       	subi	r22, 0x01	; 1
    15fc:	70 40       	sbci	r23, 0x00	; 0
    15fe:	01 90       	ld	r0, Z+
    1600:	01 10       	cpse	r0, r1
    1602:	d8 f7       	brcc	.-10     	; 0x15fa <strnlen+0x2>
    1604:	80 95       	com	r24
    1606:	90 95       	com	r25
    1608:	8e 0f       	add	r24, r30
    160a:	9f 1f       	adc	r25, r31
    160c:	08 95       	ret

0000160e <fgetc>:
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	ec 01       	movw	r28, r24
    1614:	2b 81       	ldd	r18, Y+3	; 0x03
    1616:	20 ff       	sbrs	r18, 0
    1618:	33 c0       	rjmp	.+102    	; 0x1680 <fgetc+0x72>
    161a:	26 ff       	sbrs	r18, 6
    161c:	0a c0       	rjmp	.+20     	; 0x1632 <fgetc+0x24>
    161e:	2f 7b       	andi	r18, 0xBF	; 191
    1620:	2b 83       	std	Y+3, r18	; 0x03
    1622:	8e 81       	ldd	r24, Y+6	; 0x06
    1624:	9f 81       	ldd	r25, Y+7	; 0x07
    1626:	01 96       	adiw	r24, 0x01	; 1
    1628:	9f 83       	std	Y+7, r25	; 0x07
    162a:	8e 83       	std	Y+6, r24	; 0x06
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	29 c0       	rjmp	.+82     	; 0x1684 <fgetc+0x76>
    1632:	22 ff       	sbrs	r18, 2
    1634:	0f c0       	rjmp	.+30     	; 0x1654 <fgetc+0x46>
    1636:	e8 81       	ld	r30, Y
    1638:	f9 81       	ldd	r31, Y+1	; 0x01
    163a:	80 81       	ld	r24, Z
    163c:	99 27       	eor	r25, r25
    163e:	87 fd       	sbrc	r24, 7
    1640:	90 95       	com	r25
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	19 f4       	brne	.+6      	; 0x164c <fgetc+0x3e>
    1646:	20 62       	ori	r18, 0x20	; 32
    1648:	2b 83       	std	Y+3, r18	; 0x03
    164a:	1a c0       	rjmp	.+52     	; 0x1680 <fgetc+0x72>
    164c:	31 96       	adiw	r30, 0x01	; 1
    164e:	f9 83       	std	Y+1, r31	; 0x01
    1650:	e8 83       	st	Y, r30
    1652:	0e c0       	rjmp	.+28     	; 0x1670 <fgetc+0x62>
    1654:	ea 85       	ldd	r30, Y+10	; 0x0a
    1656:	fb 85       	ldd	r31, Y+11	; 0x0b
    1658:	09 95       	icall
    165a:	97 ff       	sbrs	r25, 7
    165c:	09 c0       	rjmp	.+18     	; 0x1670 <fgetc+0x62>
    165e:	2b 81       	ldd	r18, Y+3	; 0x03
    1660:	01 96       	adiw	r24, 0x01	; 1
    1662:	11 f4       	brne	.+4      	; 0x1668 <fgetc+0x5a>
    1664:	80 e1       	ldi	r24, 0x10	; 16
    1666:	01 c0       	rjmp	.+2      	; 0x166a <fgetc+0x5c>
    1668:	80 e2       	ldi	r24, 0x20	; 32
    166a:	82 2b       	or	r24, r18
    166c:	8b 83       	std	Y+3, r24	; 0x03
    166e:	08 c0       	rjmp	.+16     	; 0x1680 <fgetc+0x72>
    1670:	2e 81       	ldd	r18, Y+6	; 0x06
    1672:	3f 81       	ldd	r19, Y+7	; 0x07
    1674:	2f 5f       	subi	r18, 0xFF	; 255
    1676:	3f 4f       	sbci	r19, 0xFF	; 255
    1678:	3f 83       	std	Y+7, r19	; 0x07
    167a:	2e 83       	std	Y+6, r18	; 0x06
    167c:	99 27       	eor	r25, r25
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <fgetc+0x76>
    1680:	8f ef       	ldi	r24, 0xFF	; 255
    1682:	9f ef       	ldi	r25, 0xFF	; 255
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	08 95       	ret

0000168a <fputc>:
    168a:	0f 93       	push	r16
    168c:	1f 93       	push	r17
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	18 2f       	mov	r17, r24
    1694:	09 2f       	mov	r16, r25
    1696:	eb 01       	movw	r28, r22
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	81 fd       	sbrc	r24, 1
    169c:	03 c0       	rjmp	.+6      	; 0x16a4 <fputc+0x1a>
    169e:	8f ef       	ldi	r24, 0xFF	; 255
    16a0:	9f ef       	ldi	r25, 0xFF	; 255
    16a2:	20 c0       	rjmp	.+64     	; 0x16e4 <fputc+0x5a>
    16a4:	82 ff       	sbrs	r24, 2
    16a6:	10 c0       	rjmp	.+32     	; 0x16c8 <fputc+0x3e>
    16a8:	4e 81       	ldd	r20, Y+6	; 0x06
    16aa:	5f 81       	ldd	r21, Y+7	; 0x07
    16ac:	2c 81       	ldd	r18, Y+4	; 0x04
    16ae:	3d 81       	ldd	r19, Y+5	; 0x05
    16b0:	42 17       	cp	r20, r18
    16b2:	53 07       	cpc	r21, r19
    16b4:	7c f4       	brge	.+30     	; 0x16d4 <fputc+0x4a>
    16b6:	e8 81       	ld	r30, Y
    16b8:	f9 81       	ldd	r31, Y+1	; 0x01
    16ba:	9f 01       	movw	r18, r30
    16bc:	2f 5f       	subi	r18, 0xFF	; 255
    16be:	3f 4f       	sbci	r19, 0xFF	; 255
    16c0:	39 83       	std	Y+1, r19	; 0x01
    16c2:	28 83       	st	Y, r18
    16c4:	10 83       	st	Z, r17
    16c6:	06 c0       	rjmp	.+12     	; 0x16d4 <fputc+0x4a>
    16c8:	e8 85       	ldd	r30, Y+8	; 0x08
    16ca:	f9 85       	ldd	r31, Y+9	; 0x09
    16cc:	81 2f       	mov	r24, r17
    16ce:	09 95       	icall
    16d0:	89 2b       	or	r24, r25
    16d2:	29 f7       	brne	.-54     	; 0x169e <fputc+0x14>
    16d4:	2e 81       	ldd	r18, Y+6	; 0x06
    16d6:	3f 81       	ldd	r19, Y+7	; 0x07
    16d8:	2f 5f       	subi	r18, 0xFF	; 255
    16da:	3f 4f       	sbci	r19, 0xFF	; 255
    16dc:	3f 83       	std	Y+7, r19	; 0x07
    16de:	2e 83       	std	Y+6, r18	; 0x06
    16e0:	81 2f       	mov	r24, r17
    16e2:	90 2f       	mov	r25, r16
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	1f 91       	pop	r17
    16ea:	0f 91       	pop	r16
    16ec:	08 95       	ret

000016ee <ungetc>:
    16ee:	fb 01       	movw	r30, r22
    16f0:	23 81       	ldd	r18, Z+3	; 0x03
    16f2:	20 ff       	sbrs	r18, 0
    16f4:	12 c0       	rjmp	.+36     	; 0x171a <ungetc+0x2c>
    16f6:	26 fd       	sbrc	r18, 6
    16f8:	10 c0       	rjmp	.+32     	; 0x171a <ungetc+0x2c>
    16fa:	8f 3f       	cpi	r24, 0xFF	; 255
    16fc:	3f ef       	ldi	r19, 0xFF	; 255
    16fe:	93 07       	cpc	r25, r19
    1700:	61 f0       	breq	.+24     	; 0x171a <ungetc+0x2c>
    1702:	82 83       	std	Z+2, r24	; 0x02
    1704:	2f 7d       	andi	r18, 0xDF	; 223
    1706:	20 64       	ori	r18, 0x40	; 64
    1708:	23 83       	std	Z+3, r18	; 0x03
    170a:	26 81       	ldd	r18, Z+6	; 0x06
    170c:	37 81       	ldd	r19, Z+7	; 0x07
    170e:	21 50       	subi	r18, 0x01	; 1
    1710:	31 09       	sbc	r19, r1
    1712:	37 83       	std	Z+7, r19	; 0x07
    1714:	26 83       	std	Z+6, r18	; 0x06
    1716:	99 27       	eor	r25, r25
    1718:	08 95       	ret
    171a:	8f ef       	ldi	r24, 0xFF	; 255
    171c:	9f ef       	ldi	r25, 0xFF	; 255
    171e:	08 95       	ret

00001720 <__ultoa_invert>:
    1720:	fa 01       	movw	r30, r20
    1722:	aa 27       	eor	r26, r26
    1724:	28 30       	cpi	r18, 0x08	; 8
    1726:	51 f1       	breq	.+84     	; 0x177c <__ultoa_invert+0x5c>
    1728:	20 31       	cpi	r18, 0x10	; 16
    172a:	81 f1       	breq	.+96     	; 0x178c <__ultoa_invert+0x6c>
    172c:	e8 94       	clt
    172e:	6f 93       	push	r22
    1730:	6e 7f       	andi	r22, 0xFE	; 254
    1732:	6e 5f       	subi	r22, 0xFE	; 254
    1734:	7f 4f       	sbci	r23, 0xFF	; 255
    1736:	8f 4f       	sbci	r24, 0xFF	; 255
    1738:	9f 4f       	sbci	r25, 0xFF	; 255
    173a:	af 4f       	sbci	r26, 0xFF	; 255
    173c:	b1 e0       	ldi	r27, 0x01	; 1
    173e:	3e d0       	rcall	.+124    	; 0x17bc <__ultoa_invert+0x9c>
    1740:	b4 e0       	ldi	r27, 0x04	; 4
    1742:	3c d0       	rcall	.+120    	; 0x17bc <__ultoa_invert+0x9c>
    1744:	67 0f       	add	r22, r23
    1746:	78 1f       	adc	r23, r24
    1748:	89 1f       	adc	r24, r25
    174a:	9a 1f       	adc	r25, r26
    174c:	a1 1d       	adc	r26, r1
    174e:	68 0f       	add	r22, r24
    1750:	79 1f       	adc	r23, r25
    1752:	8a 1f       	adc	r24, r26
    1754:	91 1d       	adc	r25, r1
    1756:	a1 1d       	adc	r26, r1
    1758:	6a 0f       	add	r22, r26
    175a:	71 1d       	adc	r23, r1
    175c:	81 1d       	adc	r24, r1
    175e:	91 1d       	adc	r25, r1
    1760:	a1 1d       	adc	r26, r1
    1762:	20 d0       	rcall	.+64     	; 0x17a4 <__ultoa_invert+0x84>
    1764:	09 f4       	brne	.+2      	; 0x1768 <__ultoa_invert+0x48>
    1766:	68 94       	set
    1768:	3f 91       	pop	r19
    176a:	2a e0       	ldi	r18, 0x0A	; 10
    176c:	26 9f       	mul	r18, r22
    176e:	11 24       	eor	r1, r1
    1770:	30 19       	sub	r19, r0
    1772:	30 5d       	subi	r19, 0xD0	; 208
    1774:	31 93       	st	Z+, r19
    1776:	de f6       	brtc	.-74     	; 0x172e <__ultoa_invert+0xe>
    1778:	cf 01       	movw	r24, r30
    177a:	08 95       	ret
    177c:	46 2f       	mov	r20, r22
    177e:	47 70       	andi	r20, 0x07	; 7
    1780:	40 5d       	subi	r20, 0xD0	; 208
    1782:	41 93       	st	Z+, r20
    1784:	b3 e0       	ldi	r27, 0x03	; 3
    1786:	0f d0       	rcall	.+30     	; 0x17a6 <__ultoa_invert+0x86>
    1788:	c9 f7       	brne	.-14     	; 0x177c <__ultoa_invert+0x5c>
    178a:	f6 cf       	rjmp	.-20     	; 0x1778 <__ultoa_invert+0x58>
    178c:	46 2f       	mov	r20, r22
    178e:	4f 70       	andi	r20, 0x0F	; 15
    1790:	40 5d       	subi	r20, 0xD0	; 208
    1792:	4a 33       	cpi	r20, 0x3A	; 58
    1794:	18 f0       	brcs	.+6      	; 0x179c <__ultoa_invert+0x7c>
    1796:	49 5d       	subi	r20, 0xD9	; 217
    1798:	31 fd       	sbrc	r19, 1
    179a:	40 52       	subi	r20, 0x20	; 32
    179c:	41 93       	st	Z+, r20
    179e:	02 d0       	rcall	.+4      	; 0x17a4 <__ultoa_invert+0x84>
    17a0:	a9 f7       	brne	.-22     	; 0x178c <__ultoa_invert+0x6c>
    17a2:	ea cf       	rjmp	.-44     	; 0x1778 <__ultoa_invert+0x58>
    17a4:	b4 e0       	ldi	r27, 0x04	; 4
    17a6:	a6 95       	lsr	r26
    17a8:	97 95       	ror	r25
    17aa:	87 95       	ror	r24
    17ac:	77 95       	ror	r23
    17ae:	67 95       	ror	r22
    17b0:	ba 95       	dec	r27
    17b2:	c9 f7       	brne	.-14     	; 0x17a6 <__ultoa_invert+0x86>
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	61 05       	cpc	r22, r1
    17b8:	71 05       	cpc	r23, r1
    17ba:	08 95       	ret
    17bc:	9b 01       	movw	r18, r22
    17be:	ac 01       	movw	r20, r24
    17c0:	0a 2e       	mov	r0, r26
    17c2:	06 94       	lsr	r0
    17c4:	57 95       	ror	r21
    17c6:	47 95       	ror	r20
    17c8:	37 95       	ror	r19
    17ca:	27 95       	ror	r18
    17cc:	ba 95       	dec	r27
    17ce:	c9 f7       	brne	.-14     	; 0x17c2 <__ultoa_invert+0xa2>
    17d0:	62 0f       	add	r22, r18
    17d2:	73 1f       	adc	r23, r19
    17d4:	84 1f       	adc	r24, r20
    17d6:	95 1f       	adc	r25, r21
    17d8:	a0 1d       	adc	r26, r0
    17da:	08 95       	ret

000017dc <__ctype_isfalse>:
    17dc:	99 27       	eor	r25, r25
    17de:	88 27       	eor	r24, r24

000017e0 <__ctype_istrue>:
    17e0:	08 95       	ret

000017e2 <__prologue_saves__>:
    17e2:	2f 92       	push	r2
    17e4:	3f 92       	push	r3
    17e6:	4f 92       	push	r4
    17e8:	5f 92       	push	r5
    17ea:	6f 92       	push	r6
    17ec:	7f 92       	push	r7
    17ee:	8f 92       	push	r8
    17f0:	9f 92       	push	r9
    17f2:	af 92       	push	r10
    17f4:	bf 92       	push	r11
    17f6:	cf 92       	push	r12
    17f8:	df 92       	push	r13
    17fa:	ef 92       	push	r14
    17fc:	ff 92       	push	r15
    17fe:	0f 93       	push	r16
    1800:	1f 93       	push	r17
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	ca 1b       	sub	r28, r26
    180c:	db 0b       	sbc	r29, r27
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
    1818:	09 94       	ijmp

0000181a <__epilogue_restores__>:
    181a:	2a 88       	ldd	r2, Y+18	; 0x12
    181c:	39 88       	ldd	r3, Y+17	; 0x11
    181e:	48 88       	ldd	r4, Y+16	; 0x10
    1820:	5f 84       	ldd	r5, Y+15	; 0x0f
    1822:	6e 84       	ldd	r6, Y+14	; 0x0e
    1824:	7d 84       	ldd	r7, Y+13	; 0x0d
    1826:	8c 84       	ldd	r8, Y+12	; 0x0c
    1828:	9b 84       	ldd	r9, Y+11	; 0x0b
    182a:	aa 84       	ldd	r10, Y+10	; 0x0a
    182c:	b9 84       	ldd	r11, Y+9	; 0x09
    182e:	c8 84       	ldd	r12, Y+8	; 0x08
    1830:	df 80       	ldd	r13, Y+7	; 0x07
    1832:	ee 80       	ldd	r14, Y+6	; 0x06
    1834:	fd 80       	ldd	r15, Y+5	; 0x05
    1836:	0c 81       	ldd	r16, Y+4	; 0x04
    1838:	1b 81       	ldd	r17, Y+3	; 0x03
    183a:	aa 81       	ldd	r26, Y+2	; 0x02
    183c:	b9 81       	ldd	r27, Y+1	; 0x01
    183e:	ce 0f       	add	r28, r30
    1840:	d1 1d       	adc	r29, r1
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	cd bf       	out	0x3d, r28	; 61
    184c:	ed 01       	movw	r28, r26
    184e:	08 95       	ret

00001850 <_exit>:
    1850:	f8 94       	cli

00001852 <__stop_program>:
    1852:	ff cf       	rjmp	.-2      	; 0x1852 <__stop_program>
